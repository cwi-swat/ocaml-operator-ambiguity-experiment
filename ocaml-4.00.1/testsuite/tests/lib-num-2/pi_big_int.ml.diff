0a1,590
> (
>   open Printf
>   open Big_int
>   let
>   (
>     !$
>       Big_int.big_int_of_int
>     +$
>       Big_int.add_big_int
>     *$
>       Big_int.mult_big_int
>     =$
>       Big_int.eq_big_int
>   )
>   let
>   (
>     zero
>       Big_int.zero_big_int
>     one
>       Big_int.unit_big_int
>     three
>       !$
>       (
>           3
>       )
>     four
>       !$
>       (
>           4
>       )
>     ten
>       !$
>       (
>           10
>       )
>     neg_ten
>       !$
>       (
>           -10
>       )
>   )
>   module LFT
>     struct
>     (
>       let
>       (
>         floor_ev
>           (
>             case
>             (
>               (
>                 q
>                 r
>                 s
>                 t
>               )
>               (
>                 case
>                 (
>                   x
>                   div_big_int
>                   (
>                       +$
>                       (
>                           *$
>                           (
>                               q
>                               x
>                           )
>                           r
>                       )
>                       +$
>                       (
>                           *$
>                           (
>                               s
>                               x
>                           )
>                           t
>                       )
>                   )
>                 )
>               )
>             )
>           )
>       )
>       let
>       (
>         unit
>           (
>             one
>             zero
>             zero
>             one
>           )
>       )
>       let
>       (
>         comp
>           (
>             case
>             (
>               (
>                 q
>                 r
>                 s
>                 t
>               )
>               (
>                 case
>                 (
>                   (
>                     q'
>                     r'
>                     s'
>                     t'
>                   )
>                   (
>                     +$
>                     (
>                         *$
>                         (
>                             q
>                             q'
>                         )
>                         *$
>                         (
>                             r
>                             s'
>                         )
>                     )
>                     +$
>                     (
>                         *$
>                         (
>                             q
>                             r'
>                         )
>                         *$
>                         (
>                             r
>                             t'
>                         )
>                     )
>                     +$
>                     (
>                         *$
>                         (
>                             s
>                             q'
>                         )
>                         *$
>                         (
>                             t
>                             s'
>                         )
>                     )
>                     +$
>                     (
>                         *$
>                         (
>                             s
>                             r'
>                         )
>                         *$
>                         (
>                             t
>                             t'
>                         )
>                     )
>                   )
>                 )
>               )
>             )
>           )
>       )
>     )
>   let
>   (
>     next
>       (
>         case
>         (
>           z
>           LFT.floor_ev
>           (
>               z
>               three
>           )
>         )
>       )
>     safe
>       (
>         case
>         (
>           z
>           (
>             case
>             (
>               n
>               =$
>               (
>                   n
>                   LFT.floor_ev
>                   (
>                       z
>                       four
>                   )
>               )
>             )
>           )
>         )
>       )
>     prod
>       (
>         case
>         (
>           z
>           (
>             case
>             (
>               n
>               LFT.comp
>               (
>                   (
>                     ten
>                     *$
>                     (
>                         neg_ten
>                         n
>                     )
>                     zero
>                     one
>                   )
>                   z
>               )
>             )
>           )
>         )
>       )
>     cons
>       (
>         case
>         (
>           z
>           (
>             case
>             (
>               k
>               let
>               (
>                 (
>                   den
>                     +
>                     (
>                         *
>                         (
>                             2
>                             k
>                         )
>                         1
>                     )
>                 )
>               in
>                 LFT.comp
>                 (
>                     z
>                     (
>                       !$
>                       (
>                           k
>                       )
>                       !$
>                       (
>                           *
>                           (
>                               2
>                               den
>                           )
>                       )
>                       zero
>                       !$
>                       (
>                           den
>                       )
>                     )
>                 )
>               )
>             )
>           )
>         )
>       )
>   )
>   let
>   (
>     digit
>       (
>         case
>         (
>           k
>           (
>             case
>             (
>               z
>               (
>                 case
>                 (
>                   n
>                   (
>                     case
>                     (
>                       row
>                       (
>                         case
>                         (
>                           col
>                           ifthenelse
>                           (
>                             if
>                             (
>                               >
>                               (
>                                   n
>                                   0
>                               )
>                             )
>                             then
>                             (
>                               let
>                               (
>                                 (
>                                   y
>                                     next
>                                     (
>                                         z
>                                     )
>                                 )
>                               in
>                                 ifthenelse
>                                 (
>                                   if
>                                   (
>                                     safe
>                                     (
>                                         z
>                                         y
>                                     )
>                                   )
>                                   then
>                                   (
>                                     ifthenelse
>                                     (
>                                       if
>                                       (
>                                         =
>                                         (
>                                             col
>                                             10
>                                         )
>                                       )
>                                       then
>                                       (
>                                         let
>                                         (
>                                           (
>                                             row
>                                               +
>                                               (
>                                                   row
>                                                   10
>                                               )
>                                           )
>                                         in
>                                           sequence
>                                           (
>                                             printf
>                                             (
>                                                 "\t:%i\n%s"
>                                                 row
>                                                 string_of_big_int
>                                                 (
>                                                     y
>                                                 )
>                                             )
>                                           ;
>                                             digit
>                                             (
>                                                 k
>                                                 prod
>                                                 (
>                                                     z
>                                                     y
>                                                 )
>                                                 -
>                                                 (
>                                                     n
>                                                     1
>                                                 )
>                                                 row
>                                                 1
>                                             )
>                                           )
>                                         )
>                                       )
>                                       else
>                                       (
>                                           sequence
>                                           (
>                                             print_string
>                                             (
>                                                 string_of_big_int
>                                                 (
>                                                     y
>                                                 )
>                                             )
>                                           ;
>                                             digit
>                                             (
>                                                 k
>                                                 prod
>                                                 (
>                                                     z
>                                                     y
>                                                 )
>                                                 -
>                                                 (
>                                                     n
>                                                     1
>                                                 )
>                                                 row
>                                                 +
>                                                 (
>                                                     col
>                                                     1
>                                                 )
>                                             )
>                                           )
>                                       )
>                                     )
>                                   )
>                                   else
>                                   (
>                                       digit
>                                       (
>                                           +
>                                           (
>                                               k
>                                               1
>                                           )
>                                           cons
>                                           (
>                                               z
>                                               k
>                                           )
>                                           n
>                                           row
>                                           col
>                                       )
>                                   )
>                                 )
>                               )
>                             )
>                             else
>                             (
>                                 printf
>                                 (
>                                     "%*s\t:%i\n"
>                                     -
>                                     (
>                                         10
>                                         col
>                                     )
>                                     ""
>                                     +
>                                     (
>                                         row
>                                         col
>                                     )
>                                 )
>                             )
>                           )
>                         )
>                       )
>                     )
>                   )
>                 )
>               )
>             )
>           )
>         )
>       )
>   )
>   let
>   (
>     digits
>       (
>         case
>         (
>           n
>           digit
>           (
>               1
>               LFT.unit
>               n
>               0
>               0
>           )
>         )
>       )
>   )
>   let
>   (
>     usage
>       (
>         case
>         (
>           ()
>                     sequence
>           (
>             prerr_endline
>             (
>                 "Usage: pi_big_int <number of digits to compute for pi>"
>             )
>           ;
>             exit
>             (
>                 2
>             )
>           )
>         )
>       )
>   )
>   let
>   (
>     main
>       (
>         case
>         (
>           ()
>                     let
>           (
>             (
>               args
>                 Sys.argv
>             )
>           in
>             ifthenelse
>             (
>               if
>               (
>                 <>
>                 (
>                     Array.length
>                     (
>                         args
>                     )
>                     2
>                 )
>               )
>               then
>               (
>                 usage
>                 (
>                     ()
>                                     )
>               )
>               else
>               (
>                   digits
>                   (
>                       int_of_string
>                       (
>                           Array.get
>                           (
>                               Sys.argv
>                               1
>                           )
>                       )
>                   )
>               )
>             )
>           )
>         )
>       )
>   )
>   main
>   (
>       ()
>         )
> )
