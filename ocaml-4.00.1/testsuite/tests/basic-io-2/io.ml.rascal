
(
    								 
  let
  (
   
     test
               	   
   (
    case
        (
     		
     		  msg
     		            	   
     		(
     		 case
     		     (
     		  		
     		  		  funct
     		  		            	   
     		  		(
     		  		 case
     		  		     (
     		  		  		
     		  		  		 f1
     		  		  		(
     		  		  		 case
     		  		  		     (
     		  		  		 	  f2
     		  		  		      
     		  		  		      sequence
     		  		  		      (
     		  		  		        print_string
     		  		  		        (
     		  		  		            msg
     		  		  		        )
     		  		  		      ;
     		  		  		        
     		  		  		        sequence
     		  		  		        (
     		  		  		          print_newline
     		  		  		          (
     		  		  		              ()
     		  		  		          )
     		  		  		        ;
     		  		  		          
     		  		  		          sequence
     		  		  		          (
     		  		  		            funct
     		  		  		            (
     		  		  		                f1
     		  		  		                f2
     		  		  		            )
     		  		  		          ;
     		  		  		            
     		  		  		            sequence
     		  		  		            (
     		  		  		              ifthenelse
     		  		  		              (
     		  		  		               if
     		  		  		               (
     		  		  		                =
     		  		  		                (
     		  		  		                    Sys.command
     		  		  		                    (
     		  		  		                        ^
     		  		  		                        (
     		  		  		                            "cmp "
     		  		  		                            ^
     		  		  		                            (
     		  		  		                                f1
     		  		  		                                ^
     		  		  		                                (
     		  		  		                                    " "
     		  		  		                                    f2
     		  		  		                                )
     		  		  		                            )
     		  		  		                        )
     		  		  		                    )
     		  		  		                    0
     		  		  		                )
     		  		  		               )
     		  		  		               then
     		  		  		               (
     		  		  		                print_string
     		  		  		                (
     		  		  		                    "passed"
     		  		  		                )
     		  		  		               )
     		  		  		               else
     		  		  		               (
     		  		  		                print_string
     		  		  		                (
     		  		  		                    "FAILED"
     		  		  		                )
     		  		  		               ) 
     		  		  		              )
     		  		  		              	    											 
     		  		  		            ;
     		  		  		              print_newline
     		  		  		              (
     		  		  		                  ()
     		  		  		              )
     		  		  		            )
     		  		  		                							
     		  		  		          )
     		  		  		              							
     		  		  		        )
     		  		  		            							
     		  		  		      )
     		  		  		          							
     		  		  		     )
     		  		  		)
     		  		  		    		   
     		  		     )
     		  		)
     		  		            	   
     		     )
     		)
     		            	   
        )
   )
               	    
  )
                                     
  let
  (
   
     copy_file
               	   
   (
    case
        (
     		
     		  sz
     		            	   
     		(
     		 case
     		     (
     		  		
     		  		 infile
     		  		(
     		  		 case
     		  		     (
     		  		 	  ofile
     		  		      
     		  		      let
     		  		      (
     		  		       (
     		  		          									  
     		  		        
     		  		         ic
     		  		         open_in_bin
     		  		         (
     		  		             infile
     		  		         ) 
     		  		        							    		   
     		  		          									  
     		  		       )
     		  		      in
     		  		        
     		  		        let
     		  		        (
     		  		         (
     		  		            									  
     		  		          
     		  		           oc
     		  		           open_out_bin
     		  		           (
     		  		               ofile
     		  		           ) 
     		  		          							    		   
     		  		            									  
     		  		         )
     		  		        in
     		  		          
     		  		          let
     		  		          (
     		  		           (
     		  		              									  
     		  		            
     		  		             buffer
     		  		             String.create
     		  		             (
     		  		                 sz
     		  		             ) 
     		  		            							    		   
     		  		              									  
     		  		           )
     		  		          in
     		  		            
     		  		            let
     		  		            (
     		  		             (
     		  		                									  
     		  		              
     		  		               copy
     		  		              (
     		  		               case
     		  		                   (
     		  		               	  ()
     		  		                    
     		  		                    let
     		  		                    (
     		  		                     (
     		  		                        									  
     		  		                      
     		  		                       n
     		  		                       input
     		  		                       (
     		  		                           ic
     		  		                           buffer
     		  		                           0
     		  		                           sz
     		  		                       ) 
     		  		                      							    		   
     		  		                        									  
     		  		                     )
     		  		                    in
     		  		                      ifthenelse
     		  		                      (
     		  		                       if
     		  		                       (
     		  		                        =
     		  		                        (
     		  		                            n
     		  		                            0
     		  		                        )
     		  		                       )
     		  		                       then
     		  		                       (
     		  		                        ()
     		  		                       )
     		  		                       else
     		  		                       (
     		  		                        
     		  		                        sequence
     		  		                        (
     		  		                          output
     		  		                          (
     		  		                              oc
     		  		                              buffer
     		  		                              0
     		  		                              n
     		  		                          )
     		  		                        ;
     		  		                          copy
     		  		                          (
     		  		                              ()
     		  		                          )
     		  		                        )
     		  		                            							
     		  		                       ) 
     		  		                      )
     		  		                      	    											 
     		  		                    )
     		  		                        									
     		  		                   )
     		  		              )
     		  		                  		   
     		  		                									  
     		  		             )
     		  		            in
     		  		              
     		  		              sequence
     		  		              (
     		  		                copy
     		  		                (
     		  		                    ()
     		  		                )
     		  		              ;
     		  		                
     		  		                sequence
     		  		                (
     		  		                  close_in
     		  		                  (
     		  		                      ic
     		  		                  )
     		  		                ;
     		  		                  close_out
     		  		                  (
     		  		                      oc
     		  		                  )
     		  		                )
     		  		                    							
     		  		              )
     		  		                  							
     		  		            )
     		  		                									
     		  		          )
     		  		              									
     		  		        )
     		  		            									
     		  		      )
     		  		          									
     		  		     )
     		  		)
     		  		    		   
     		     )
     		)
     		            	   
        )
   )
               	    
  )
                                     
  let
  (
   
     copy_random
               	   
   (
    case
        (
     		
     		  sz
     		            	   
     		(
     		 case
     		     (
     		  		
     		  		 infile
     		  		(
     		  		 case
     		  		     (
     		  		 	  ofile
     		  		      
     		  		      let
     		  		      (
     		  		       (
     		  		          									  
     		  		        
     		  		         ic
     		  		         open_in_bin
     		  		         (
     		  		             infile
     		  		         ) 
     		  		        							    		   
     		  		          									  
     		  		       )
     		  		      in
     		  		        
     		  		        let
     		  		        (
     		  		         (
     		  		            									  
     		  		          
     		  		           oc
     		  		           open_out_bin
     		  		           (
     		  		               ofile
     		  		           ) 
     		  		          							    		   
     		  		            									  
     		  		         )
     		  		        in
     		  		          
     		  		          let
     		  		          (
     		  		           (
     		  		              									  
     		  		            
     		  		             buffer
     		  		             String.create
     		  		             (
     		  		                 sz
     		  		             ) 
     		  		            							    		   
     		  		              									  
     		  		           )
     		  		          in
     		  		            
     		  		            let
     		  		            (
     		  		             (
     		  		                									  
     		  		              
     		  		               copy
     		  		              (
     		  		               case
     		  		                   (
     		  		               	  ()
     		  		                    
     		  		                    let
     		  		                    (
     		  		                     (
     		  		                        									  
     		  		                      
     		  		                       s
     		  		                       +
     		  		                       (
     		  		                           1
     		  		                           Random.int
     		  		                           (
     		  		                               sz
     		  		                           )
     		  		                       ) 
     		  		                      							    		   
     		  		                        									  
     		  		                     )
     		  		                    in
     		  		                      
     		  		                      let
     		  		                      (
     		  		                       (
     		  		                          									  
     		  		                        
     		  		                         n
     		  		                         input
     		  		                         (
     		  		                             ic
     		  		                             buffer
     		  		                             0
     		  		                             s
     		  		                         ) 
     		  		                        							    		   
     		  		                          									  
     		  		                       )
     		  		                      in
     		  		                        ifthenelse
     		  		                        (
     		  		                         if
     		  		                         (
     		  		                          =
     		  		                          (
     		  		                              n
     		  		                              0
     		  		                          )
     		  		                         )
     		  		                         then
     		  		                         (
     		  		                          ()
     		  		                         )
     		  		                         else
     		  		                         (
     		  		                          
     		  		                          sequence
     		  		                          (
     		  		                            output
     		  		                            (
     		  		                                oc
     		  		                                buffer
     		  		                                0
     		  		                                n
     		  		                            )
     		  		                          ;
     		  		                            copy
     		  		                            (
     		  		                                ()
     		  		                            )
     		  		                          )
     		  		                              							
     		  		                         ) 
     		  		                        )
     		  		                        	    											 
     		  		                      )
     		  		                          									
     		  		                    )
     		  		                        									
     		  		                   )
     		  		              )
     		  		                  		   
     		  		                									  
     		  		             )
     		  		            in
     		  		              
     		  		              sequence
     		  		              (
     		  		                copy
     		  		                (
     		  		                    ()
     		  		                )
     		  		              ;
     		  		                
     		  		                sequence
     		  		                (
     		  		                  close_in
     		  		                  (
     		  		                      ic
     		  		                  )
     		  		                ;
     		  		                  close_out
     		  		                  (
     		  		                      oc
     		  		                  )
     		  		                )
     		  		                    							
     		  		              )
     		  		                  							
     		  		            )
     		  		                									
     		  		          )
     		  		              									
     		  		        )
     		  		            									
     		  		      )
     		  		          									
     		  		     )
     		  		)
     		  		    		   
     		     )
     		)
     		            	   
        )
   )
               	    
  )
                                     
  let
  (
   
     copy_line
               	   
   (
    case
        (
     		
     		 infile
     		(
     		 case
     		     (
     		 	  ofile
     		      
     		      let
     		      (
     		       (
     		          									  
     		        
     		         ic
     		         open_in_bin
     		         (
     		             infile
     		         ) 
     		        							    		   
     		          									  
     		       )
     		      in
     		        
     		        let
     		        (
     		         (
     		            									  
     		          
     		           oc
     		           open_out_bin
     		           (
     		               ofile
     		           ) 
     		          							    		   
     		            									  
     		         )
     		        in
     		          
     		          try
     		          
     		           while
     		           true
     		           
     		           sequence
     		           (
     		             output_string
     		             (
     		                 oc
     		                 input_line
     		                 (
     		                     ic
     		                 )
     		             )
     		           ;
     		             output_char
     		             (
     		                 oc
     		                 0a
     		             )
     		           )
     		               								 
     		              									 
     		          (
     		          
     		          case
     		          (
     		            End_of_file
     		            
     		            
     		            sequence
     		            (
     		              close_in
     		              (
     		                  ic
     		              )
     		            ;
     		              close_out
     		              (
     		                  oc
     		              )
     		            )
     		                							
     		          ) 
     		          	        											 
     		          	        											 
     		          )
     		              							   
     		        )
     		            									
     		      )
     		          									
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
  let
  (
   
     copy_seek
               	   
   (
    case
        (
     		
     		  chunksize
     		            	   
     		(
     		 case
     		     (
     		  		
     		  		 infile
     		  		(
     		  		 case
     		  		     (
     		  		 	  ofile
     		  		      
     		  		      let
     		  		      (
     		  		       (
     		  		          									  
     		  		        
     		  		         ic
     		  		         open_in_bin
     		  		         (
     		  		             infile
     		  		         ) 
     		  		        							    		   
     		  		          									  
     		  		       )
     		  		      in
     		  		        
     		  		        let
     		  		        (
     		  		         (
     		  		            									  
     		  		          
     		  		           oc
     		  		           open_out_bin
     		  		           (
     		  		               ofile
     		  		           ) 
     		  		          							    		   
     		  		            									  
     		  		         )
     		  		        in
     		  		          
     		  		          let
     		  		          (
     		  		           (
     		  		              									  
     		  		            
     		  		             size
     		  		             in_channel_length
     		  		             (
     		  		                 ic
     		  		             ) 
     		  		            							    		   
     		  		              									  
     		  		           )
     		  		          in
     		  		            
     		  		            let
     		  		            (
     		  		             (
     		  		                									  
     		  		              
     		  		               buffer
     		  		               String.create
     		  		               (
     		  		                   chunksize
     		  		               ) 
     		  		              							    		   
     		  		                									  
     		  		             )
     		  		            in
     		  		              
     		  		              sequence
     		  		              (
     		  		                 for i
     		  		                 /
     		  		                 (
     		  		                     -
     		  		                     (
     		  		                         size
     		  		                         1
     		  		                     )
     		  		                     chunksize
     		  		                 )
     		  		                 0
     		  		                 
     		  		                 sequence
     		  		                 (
     		  		                   seek_in
     		  		                   (
     		  		                       ic
     		  		                       *
     		  		                       (
     		  		                           i
     		  		                           chunksize
     		  		                       )
     		  		                   )
     		  		                 ;
     		  		                   
     		  		                   sequence
     		  		                   (
     		  		                     seek_out
     		  		                     (
     		  		                         oc
     		  		                         *
     		  		                         (
     		  		                             i
     		  		                             chunksize
     		  		                         )
     		  		                     )
     		  		                   ;
     		  		                     
     		  		                     let
     		  		                     (
     		  		                      (
     		  		                         									  
     		  		                       
     		  		                        n
     		  		                        input
     		  		                        (
     		  		                            ic
     		  		                            buffer
     		  		                            0
     		  		                            chunksize
     		  		                        ) 
     		  		                       							    		   
     		  		                         									  
     		  		                      )
     		  		                     in
     		  		                       output
     		  		                       (
     		  		                           oc
     		  		                           buffer
     		  		                           0
     		  		                           n
     		  		                       )
     		  		                     )
     		  		                         									
     		  		                   )
     		  		                       							
     		  		                 )
     		  		                     							
     		  		                    														  
     		  		              ;
     		  		                
     		  		                sequence
     		  		                (
     		  		                  close_in
     		  		                  (
     		  		                      ic
     		  		                  )
     		  		                ;
     		  		                  close_out
     		  		                  (
     		  		                      oc
     		  		                  )
     		  		                )
     		  		                    							
     		  		              )
     		  		                  							
     		  		            )
     		  		                									
     		  		          )
     		  		              									
     		  		        )
     		  		            									
     		  		      )
     		  		          									
     		  		     )
     		  		)
     		  		    		   
     		     )
     		)
     		            	   
        )
   )
               	    
  )
                                     
  let
  (
   
    make_lines
   (
    case
        (
    	  ofile
         
         let
         (
          (
             									  
           
            oc
            open_out_bin
            (
                ofile
            ) 
           							    		   
             									  
          )
         in
           
           sequence
           (
              for i
              1
              256
              
              sequence
              (
                output_string
                (
                    oc
                    String.make
                    (
                        *
                        (
                            i
                            64
                        )
                        2e
                    )
                )
              ;
                output_char
                (
                    oc
                    0a
                )
              )
                  							
                 														  
           ;
             close_out
             (
                 oc
             )
           )
               							
         )
             									
        )
   )
       		    
  )
                                     
  
   
   
   let
   (
    (
       									  
     
      src
      Array.get
      (
       Sys.argv
       1
      )
      												 
     							    		   
       									  
    )
   in
     
     let
     (
      (
         									  
       
        testio
        Filename.temp_file
        (
            "testio"
            ""
        ) 
       							    		   
         									  
      )
     in
       
       let
       (
        (
           									  
         
          lines
          Filename.temp_file
          (
              "lines"
              ""
          ) 
         							    		   
           									  
        )
       in
         
         sequence
         (
           test
           (
               "16-byte chunks"
               copy_file
               (
                   16
               )
               src
               testio
           )
         ;
           
           sequence
           (
             test
             (
                 "256-byte chunks"
                 copy_file
                 (
                     256
                 )
                 src
                 testio
             )
           ;
             
             sequence
             (
               test
               (
                   "4096-byte chunks"
                   copy_file
                   (
                       4096
                   )
                   src
                   testio
               )
             ;
               
               sequence
               (
                 test
                 (
                     "65536-byte chunks"
                     copy_file
                     (
                         65536
                     )
                     src
                     testio
                 )
               ;
                 
                 sequence
                 (
                   test
                   (
                       "19-byte chunks"
                       copy_file
                       (
                           19
                       )
                       src
                       testio
                   )
                 ;
                   
                   sequence
                   (
                     test
                     (
                         "263-byte chunks"
                         copy_file
                         (
                             263
                         )
                         src
                         testio
                     )
                   ;
                     
                     sequence
                     (
                       test
                       (
                           "4011-byte chunks"
                           copy_file
                           (
                               4011
                           )
                           src
                           testio
                       )
                     ;
                       
                       sequence
                       (
                         test
                         (
                             "0...8192 byte chunks"
                             copy_random
                             (
                                 8192
                             )
                             src
                             testio
                         )
                       ;
                         
                         sequence
                         (
                           test
                           (
                               "line per line, short lines"
                               copy_line
                               "/etc/hosts"
                               testio
                           )
                         ;
                           
                           sequence
                           (
                             make_lines
                             (
                                 lines
                             )
                           ;
                             
                             sequence
                             (
                               test
                               (
                                   "line per line, short and long lines"
                                   copy_line
                                   lines
                                   testio
                               )
                             ;
                               
                               sequence
                               (
                                 test
                                 (
                                     "backwards, 4096-byte chunks"
                                     copy_seek
                                     (
                                         4096
                                     )
                                     src
                                     testio
                                 )
                               ;
                                 
                                 sequence
                                 (
                                   test
                                   (
                                       "backwards, 64-byte chunks"
                                       copy_seek
                                       (
                                           64
                                       )
                                       src
                                       testio
                                   )
                                 ;
                                   
                                   sequence
                                   (
                                     Sys.remove
                                     (
                                         lines
                                     )
                                   ;
                                     
                                     sequence
                                     (
                                       Sys.remove
                                       (
                                           testio
                                       )
                                     ;
                                       exit
                                       (
                                           0
                                       )
                                     )
                                         							
                                   )
                                       							
                                 )
                                     							
                               )
                                   							
                             )
                                 							
                           )
                               							
                         )
                             							
                       )
                           							
                     )
                         							
                   )
                       							
                 )
                     							
               )
                   							
             )
                 							
           )
               							
         )
             							
       )
           									
     )
         									
   )
       									 
  							    		    
                                     
)