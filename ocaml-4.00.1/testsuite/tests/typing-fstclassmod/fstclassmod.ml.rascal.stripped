(
  let
  (
    sort
   (
    case
        (
     		 s
     		(
     		 case
     		     (
     		  		 set
     		  		(
     		  		 case
     		  		     (
     		  		 	  l
     		  		      let module Set
     		  		        (
     		  		      		moduleExprVal 
     		  		      		(
     		  		      		    set
     		  		      		    <"modTypePath"(["extendedModulePath1"([],"Set")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"S")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],<"typeConstr"([],"elt")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,[]>
     		  		      		)
     		  		        )
     		  		        in
     		  		        (
     		  		           Set.elements
     		  		           (
     		  		               List.fold_right
     		  		               (
     		  		                   Set.add
     		  		                   l
     		  		                   Set.empty
     		  		               )
     		  		           )
     		  		        )
     		  		     )
     		  		)
     		     )
     		)
        )
   )
  )
  let
  (
    make_set
   (
    case
        (
     		 s
     		(
     		 case
     		     (
     		 	  cmp
     		      let module S
     		        (
     		      		 Set.Make
     		      		(
     		      		struct
     		      		(
     		      		type
     		      		(  						
     		      		   t
     		      		   type
     		      		   params=
     		      		   (
     		      		   )
     		      		   cstrs =
     		      		   (
     		      		   )
     		      		   kind =
     		      		   s
     		      		   (
     		      		   )
     		      		)
     		      		let
     		      		(
     		      		  compare
     		      		  cmp 
     		      		)
     		      		)
     		      		)
     		        )
     		        in
     		        (
     		           <"modExpModPath"("modulePath"([],"S")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<"modTypePath"(["extendedModulePath1"([],"Set")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"S")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],<"typeConstr"([],"elt")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"s")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>,[]>]>
     		        )
     		     )
     		)
        )
   )
  )
  let
  (
    both
   (
    case
        (
    	  l
         List.map
         (
             (
              case
              (
              set
              sort
              (
                  set
                  l
              )
              )
             )
             ::
              (
              make_set
              (
                  compare
              )
              ::
              (
              make_set
              (
                  (
                   case
                   (
                     x
                     (
                     case
                     (
                     y
                     compare
                     (
                         y
                         x
                     )
                     )
                     )
                   )													
                  )
              )
              []
              ) 
              ) 
         )
        )
   )
  )
  let
  (
    ()
    print_endline
    (
        String.concat
        (
            "  "
            List.map
            (
                String.concat
                (
                    "/"
                )
                both
                (
                    ::
                     (
                     "abc"
                     ::
                     (
                     "xyz"
                     ::
                     (
                     "def"
                     []
                     ) 
                     ) 
                     ) 
                )
            )
        )
    ) 
  )
  module type S
   signature
   (
    type
    (  						
       t
       type
       params=
       (
       )
       cstrs =
       (
       )
       kind =
    )
    sig_value to_string
    value_description
    arrow
    t
    (
    )
    string
    (
    )
    (
    )
    sig_value apply
    value_description
    arrow
    t
    (
    )
    t
    (
    )
    (
    )
    sig_value x
    value_description
    t
    (
    )
    (
    )
   )    								
  let
  (
    create
   (
    case
        (
     		 s
     		(
     		 case
     		     (
     		  		 to_string
     		  		(
     		  		 case
     		  		     (
     		  		  		 apply
     		  		  		(
     		  		  		 case
     		  		  		     (
     		  		  		 	  x
     		  		  		      let module M
     		  		  		        (
     		  		  		      		struct
     		  		  		      		(
     		  		  		      		type
     		  		  		      		(  						
     		  		  		      		   t
     		  		  		      		   type
     		  		  		      		   params=
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		   cstrs =
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		   kind =
     		  		  		      		   s
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		)
     		  		  		      		let
     		  		  		      		(
     		  		  		      		  to_string
     		  		  		      		  to_string 
     		  		  		      		)
     		  		  		      		let
     		  		  		      		(
     		  		  		      		  apply
     		  		  		      		  apply 
     		  		  		      		)
     		  		  		      		let
     		  		  		      		(
     		  		  		      		  x
     		  		  		      		  x 
     		  		  		      		)
     		  		  		      		)
     		  		  		        )
     		  		  		        in
     		  		  		        (
     		  		  		           <"modExpModPath"("modulePath"([],"M")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],[<"modTypePath"([],"S")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],<"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>,[]>]>
     		  		  		        )
     		  		  		     )
     		  		  		)
     		  		     )
     		  		)
     		     )
     		)
        )
   )
  )
  let
  (
    forget
   (
    case
        (
     		 s
     		(
     		 case
     		     (
     		 	  x
     		      let module M
     		        (
     		      		moduleExprVal 
     		      		(
     		      		    x
     		      		    <"modTypePath"([],"S")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],<"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>,[]>
     		      		)
     		        )
     		        in
     		        (
     		           <"modExpModPath"("modulePath"([],"M")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["modTypePath"([],"S")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
     		        )
     		     )
     		)
        )
   )
  )
  let
  (
    print
   (
    case
        (
    	  x
         let module M
           (
         		moduleExprVal 
         		(
         		    x
         		    S
         		)
           )
           in
           (
              print_endline
              (
                  M.to_string
                  (
                      M.x
                  )
              )
           )
        )
   )
  )
  let
  (
    apply
   (
    case
        (
    	  x
         let module M
           (
         		moduleExprVal 
         		(
         		    x
         		    S
         		)
           )
           in
           (
              let module N
                (
              		struct
              		(
              		include
              		(
              		  M
              		)
              		let
              		(
              		  x
              		  apply
              		  (
              		      x
              		  ) 
              		)
              		)
                )
                in
                (
                   <"modExpModPath"("modulePath"([],"N")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],["modTypePath"([],"S")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
                )
           )
        )
   )
  )
  let
  (
    ()
    let
    (
     (
       int
       forget
       (
           create
           (
               string_of_int
               succ
               0
           )
       ) 
     )
    in
      let
      (
       (
         str
         forget
         (
             create
             (
                 (
                  case
                  (
                  s
                  s
                  )
                 )
                 (
                  case
                  (
                  s
                  ^
                  (
                      s
                      s
                  )
                  )
                 )
                 "X"
             )
         ) 
       )
      in
        List.iter
        (
            print
            List.map
            (
                apply
                ::
                 (
                 int
                 ::
                 (
                 apply
                 (
                     int
                 )
                 ::
                 (
                 apply
                 (
                     apply
                     (
                         str
                     )
                 )
                 []
                 ) 
                 ) 
                 ) 
            )
        )
      )
    )
  )
  module  TypEq
   struct
   (
   type
   (  						
      t
      type
      params=
      (
        a
        b
      )
      cstrs =
      (
      )
      kind =
      unit
      (
      )
   )
   let
   (
     apply
    (
     case
         (
     	  _
          Obj.magic
         )
    )
   )
   let
   (
     refl
     () 
   )
   let
   (
     sym
    (
     case
         (
     	  ()
          ()
         )
    )
   )
   )
  modRec1 
  (
      Typ
      signature
      (
       module type PAIR
        signature
        (
         type
         (  						
            t
            type
            params=
            (
            )
            cstrs =
            (
            )
            kind =
         )
         type
         (  						
            t1
            type
            params=
            (
            )
            cstrs =
            (
            )
            kind =
         )
         type
         (  						
            t2
            type
            params=
            (
            )
            cstrs =
            (
            )
            kind =
         )
         sig_value eq
         value_description
         <["typexprConstr2"("typeConstr"([],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],"star"("typexprConstr2"("typeConstr"([],"t1")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr2"("typeConstr"([],"t2")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"typeConstr"(["extendedModulePath1"([],"TypEq")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         (
         )
         sig_value t1
         value_description
          "extendedModulePath1"([],"Typ")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()].typ
          (
            t1
            (
            )
          )
         (
         )
         sig_value t2
         value_description
          "extendedModulePath1"([],"Typ")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()].typ
          (
            t2
            (
            )
          )
         (
         )
        )    								
       type
       (  						
          typ
          type
          params=
          (
           a
          )
          cstrs =
          (
          )
          kind =
          (
          Int
          (
           <["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"typeConstr"(["extendedModulePath1"([],"TypEq")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
          )
          String
          (
           <["tagg"("a")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],"typexprConstr2"("typeConstr"([],"string")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"typeConstr"(["extendedModulePath1"([],"TypEq")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          )
          Pair
          (
           <"modTypePath"([],"PAIR")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],<"typeConstr"([],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],"tagg"("a")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>,[]>
          )
          )
       )
      )
      struct
      (
      module type PAIR
       signature
       (
        type
        (  						
           t
           type
           params=
           (
           )
           cstrs =
           (
           )
           kind =
        )
        type
        (  						
           t1
           type
           params=
           (
           )
           cstrs =
           (
           )
           kind =
        )
        type
        (  						
           t2
           type
           params=
           (
           )
           cstrs =
           (
           )
           kind =
        )
        sig_value eq
        value_description
        <["typexprConstr2"("typeConstr"([],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],"star"("typexprConstr2"("typeConstr"([],"t1")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],["typexprConstr2"("typeConstr"([],"t2")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"typeConstr"(["extendedModulePath1"([],"TypEq")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
        (
        )
        sig_value t1
        value_description
         "extendedModulePath1"([],"Typ")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)].typ
         (
           t1
           (
           )
         )
        (
        )
        sig_value t2
        value_description
         "extendedModulePath1"([],"Typ")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()].typ
         (
           t2
           (
           )
         )
        (
        )
       )    								
      type
      (  						
         typ
         type
         params=
         (
          a
         )
         cstrs =
         (
         )
         kind =
         (
         Int
         (
          <["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"int")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"typeConstr"(["extendedModulePath1"([],"TypEq")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         )
         String
         (
          <["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"string")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"typeConstr"(["extendedModulePath1"([],"TypEq")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
         )
         Pair
         (
          <"modTypePath"([],"PAIR")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],<"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,[]>
         )
         )
      )
      )
  )
  open Typ
  let
  (
    int
     Int
     TypEq.refl
  )
  let
  (
    str
     String
     TypEq.refl
  )
  let
  (
    pair
   (
    case
        (
     		 s1
     		(
     		 case
     		     (
     		  		 s2
     		  		(
     		  		 case
     		  		     (
     		  		  		 t1
     		  		  		(
     		  		  		 case
     		  		  		     (
     		  		  		 	  t2
     		  		  		      let module P
     		  		  		        (
     		  		  		      		struct
     		  		  		      		(
     		  		  		      		type
     		  		  		      		(  						
     		  		  		      		   t
     		  		  		      		   type
     		  		  		      		   params=
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		   cstrs =
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		   kind =
     		  		  		      		   tuple
     		  		  		      		   (
     		  		  		      		    s1
     		  		  		      		    (
     		  		  		      		    )
     		  		  		      		     s2
     		  		  		      		     (
     		  		  		      		     )
     		  		  		      		   )
     		  		  		      		)
     		  		  		      		type
     		  		  		      		(  						
     		  		  		      		   t1
     		  		  		      		   type
     		  		  		      		   params=
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		   cstrs =
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		   kind =
     		  		  		      		   s1
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		)
     		  		  		      		type
     		  		  		      		(  						
     		  		  		      		   t2
     		  		  		      		   type
     		  		  		      		   params=
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		   cstrs =
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		   kind =
     		  		  		      		   s2
     		  		  		      		   (
     		  		  		      		   )
     		  		  		      		)
     		  		  		      		let
     		  		  		      		(
     		  		  		      		  eq
     		  		  		      		  TypEq.refl 
     		  		  		      		)
     		  		  		      		let
     		  		  		      		(
     		  		  		      		  t1
     		  		  		      		  t1 
     		  		  		      		)
     		  		  		      		let
     		  		  		      		(
     		  		  		      		  t2
     		  		  		      		  t2 
     		  		  		      		)
     		  		  		      		)
     		  		  		        )
     		  		  		        in
     		  		  		        (
     		  		  		           let
     		  		  		           (
     		  		  		            (
     		  		  		              pair
     		  		  		              <"modExpModPath"("modulePath"([],"P")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],[<"modTypePath"([],"PAIR")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],<"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"star"("typexprConstr2"("typeConstr"([],"s1")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr2"("typeConstr"([],"s2")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,[]>]> 
     		  		  		            )
     		  		  		           in
     		  		  		              Pair
     		  		  		              pair
     		  		  		           )
     		  		  		        )
     		  		  		     )
     		  		  		)
     		  		     )
     		  		)
     		     )
     		)
        )
   )
  )
  modRec1 
  (
      Print
      signature
      (
       sig_value to_string
       value_description
       arrow
        "extendedModulePath1"([],"Typ")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)].typ
        (
          a
        )
       arrow
       a
       string
       (
       )
       (
       )
      )
      struct
      (
      let
      (
        to_string
       (
        case
            (
         		 s
         		(
         		 case
         		     (
         		  		 t
         		  		(
         		  		 case
         		  		     (
         		  		 	  x
         		  		      match
         		  		      t
         		  		      (
         		  		      case
         		  		      (
         		  		        Int
         		  		        eq
         		  		        string_of_int
         		  		        (
         		  		            TypEq.apply
         		  		            (
         		  		                eq
         		  		                x
         		  		            )
         		  		        )
         		  		      ) 
         		  		        case
         		  		        (
         		  		         String
         		  		         eq
         		  		         Printf.sprintf
         		  		         (
         		  		             "%S"
         		  		             TypEq.apply
         		  		             (
         		  		                 eq
         		  		                 x
         		  		             )
         		  		         )
         		  		        )
         		  		        case
         		  		        (
         		  		         Pair
         		  		         p
         		  		         let module P
         		  		           (
         		  		         		moduleExprVal 
         		  		         		(
         		  		         		    p
         		  		         		    <"modTypePath"([],"PAIR")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],<"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"s")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,[]>
         		  		         		)
         		  		           )
         		  		           in
         		  		           (
         		  		              let
         		  		              (
         		  		               (
         		  		                 (
         		  		                  x1
         		  		                 	x2
         		  		                 )
         		  		                 TypEq.apply
         		  		                 (
         		  		                     P.eq
         		  		                     x
         		  		                 ) 
         		  		               )
         		  		              in
         		  		                Printf.sprintf
         		  		                (
         		  		                    "(%s,%s)"
         		  		                    Print.to_string
         		  		                    (
         		  		                        P.t1
         		  		                        x1
         		  		                    )
         		  		                    Print.to_string
         		  		                    (
         		  		                        P.t2
         		  		                        x2
         		  		                    )
         		  		                )
         		  		              )
         		  		           )
         		  		        )
         		  		      )
         		  		     )
         		  		)
         		     )
         		)
            )
       )
      )
      )
  )
  let
  (
    ()
    sequence
    (
      print_endline
      (
          Print.to_string
          (
              int
              10
          )
      )
    ;
      print_endline
      (
          Print.to_string
          (
              pair
              (
                  int
                  pair
                  (
                      str
                      int
                  )
              )
              (
                  					 123
              	(
              	    					 "A"
              		456
              	)
              )
          )
      )
    )
  )
)
