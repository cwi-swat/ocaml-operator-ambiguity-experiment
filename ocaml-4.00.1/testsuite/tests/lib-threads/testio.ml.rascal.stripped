(
  let
  (
    test
   (
    case
        (
     		 msg
     		(
     		 case
     		     (
     		  		 producer
     		  		(
     		  		 case
     		  		     (
     		  		  		 consumer
     		  		  		(
     		  		  		 case
     		  		  		     (
     		  		  		  		 src
     		  		  		  		(
     		  		  		  		 case
     		  		  		  		     (
     		  		  		  		 	  dst
     		  		  		  		      sequence
     		  		  		  		      (
     		  		  		  		        print_string
     		  		  		  		        (
     		  		  		  		            msg
     		  		  		  		        )
     		  		  		  		      ;
     		  		  		  		        sequence
     		  		  		  		        (
     		  		  		  		          print_newline
     		  		  		  		          (
     		  		  		  		              ()
     		  		  		  		          )
     		  		  		  		        ;
     		  		  		  		          let
     		  		  		  		          (
     		  		  		  		           (
     		  		  		  		             ic
     		  		  		  		             open_in_bin
     		  		  		  		             (
     		  		  		  		                 src
     		  		  		  		             ) 
     		  		  		  		           )
     		  		  		  		          in
     		  		  		  		            let
     		  		  		  		            (
     		  		  		  		             (
     		  		  		  		               oc
     		  		  		  		               open_out_bin
     		  		  		  		               (
     		  		  		  		                   dst
     		  		  		  		               ) 
     		  		  		  		             )
     		  		  		  		            in
     		  		  		  		              let
     		  		  		  		              (
     		  		  		  		               (
     		  		  		  		                 (
     		  		  		  		                  in_fd
     		  		  		  		                 	out_fd
     		  		  		  		                 )
     		  		  		  		                 Unix.pipe
     		  		  		  		                 (
     		  		  		  		                     ()
     		  		  		  		                 ) 
     		  		  		  		               )
     		  		  		  		              in
     		  		  		  		                let
     		  		  		  		                (
     		  		  		  		                 (
     		  		  		  		                   ipipe
     		  		  		  		                   Unix.in_channel_of_descr
     		  		  		  		                   (
     		  		  		  		                       in_fd
     		  		  		  		                   ) 
     		  		  		  		                 )
     		  		  		  		                in
     		  		  		  		                  let
     		  		  		  		                  (
     		  		  		  		                   (
     		  		  		  		                     opipe
     		  		  		  		                     Unix.out_channel_of_descr
     		  		  		  		                     (
     		  		  		  		                         out_fd
     		  		  		  		                     ) 
     		  		  		  		                   )
     		  		  		  		                  in
     		  		  		  		                    let
     		  		  		  		                    (
     		  		  		  		                     (
     		  		  		  		                       prod
     		  		  		  		                       Thread.create
     		  		  		  		                       (
     		  		  		  		                           producer
     		  		  		  		                           (
     		  		  		  		                               					 ic
     		  		  		  		                           	opipe
     		  		  		  		                           )
     		  		  		  		                       ) 
     		  		  		  		                     )
     		  		  		  		                    in
     		  		  		  		                      let
     		  		  		  		                      (
     		  		  		  		                       (
     		  		  		  		                         cons
     		  		  		  		                         Thread.create
     		  		  		  		                         (
     		  		  		  		                             consumer
     		  		  		  		                             (
     		  		  		  		                                 					 ipipe
     		  		  		  		                             	oc
     		  		  		  		                             )
     		  		  		  		                         ) 
     		  		  		  		                       )
     		  		  		  		                      in
     		  		  		  		                        sequence
     		  		  		  		                        (
     		  		  		  		                          Thread.join
     		  		  		  		                          (
     		  		  		  		                              prod
     		  		  		  		                          )
     		  		  		  		                        ;
     		  		  		  		                          sequence
     		  		  		  		                          (
     		  		  		  		                            Thread.join
     		  		  		  		                            (
     		  		  		  		                                cons
     		  		  		  		                            )
     		  		  		  		                          ;
     		  		  		  		                            sequence
     		  		  		  		                            (
     		  		  		  		                              ifthenelse
     		  		  		  		                              (
     		  		  		  		                               if
     		  		  		  		                               (
     		  		  		  		                                =
     		  		  		  		                                (
     		  		  		  		                                    Unix.system
     		  		  		  		                                    (
     		  		  		  		                                        ^
     		  		  		  		                                        (
     		  		  		  		                                            "cmp "
     		  		  		  		                                            ^
     		  		  		  		                                            (
     		  		  		  		                                                src
     		  		  		  		                                                ^
     		  		  		  		                                                (
     		  		  		  		                                                    " "
     		  		  		  		                                                    dst
     		  		  		  		                                                )
     		  		  		  		                                            )
     		  		  		  		                                        )
     		  		  		  		                                    )
     		  		  		  		                                     Unix.WEXITED
     		  		  		  		                                     0
     		  		  		  		                                )
     		  		  		  		                               )
     		  		  		  		                               then
     		  		  		  		                               (
     		  		  		  		                                print_string
     		  		  		  		                                (
     		  		  		  		                                    "passed"
     		  		  		  		                                )
     		  		  		  		                               )
     		  		  		  		                               else
     		  		  		  		                               (
     		  		  		  		                                print_string
     		  		  		  		                                (
     		  		  		  		                                    "FAILED"
     		  		  		  		                                )
     		  		  		  		                               ) 
     		  		  		  		                              )
     		  		  		  		                            ;
     		  		  		  		                              print_newline
     		  		  		  		                              (
     		  		  		  		                                  ()
     		  		  		  		                              )
     		  		  		  		                            )
     		  		  		  		                          )
     		  		  		  		                        )
     		  		  		  		                      )
     		  		  		  		                    )
     		  		  		  		                  )
     		  		  		  		                )
     		  		  		  		              )
     		  		  		  		            )
     		  		  		  		          )
     		  		  		  		        )
     		  		  		  		      )
     		  		  		  		     )
     		  		  		  		)
     		  		  		     )
     		  		  		)
     		  		     )
     		  		)
     		     )
     		)
        )
   )
  )
  let
  (
    copy_file
   (
    case
        (
     		 sz
     		(
     		 case
     		     (
     		 	  (
     		 	   ic
     		 	  	oc
     		 	  )
     		      let
     		      (
     		       (
     		         buffer
     		         String.create
     		         (
     		             sz
     		         ) 
     		       )
     		      in
     		        let
     		        (
     		         (
     		           copy
     		          (
     		           case
     		               (
     		           	  ()
     		                let
     		                (
     		                 (
     		                   n
     		                   input
     		                   (
     		                       ic
     		                       buffer
     		                       0
     		                       sz
     		                   ) 
     		                 )
     		                in
     		                  ifthenelse
     		                  (
     		                   if
     		                   (
     		                    =
     		                    (
     		                        n
     		                        0
     		                    )
     		                   )
     		                   then
     		                   (
     		                    ()
     		                   )
     		                   else
     		                   (
     		                    beginEnd 
     		                    (
     		                        sequence
     		                        (
     		                          output
     		                          (
     		                              oc
     		                              buffer
     		                              0
     		                              n
     		                          )
     		                        ;
     		                          copy
     		                          (
     		                              ()
     		                          )
     		                        )
     		                    )
     		                   ) 
     		                  )
     		                )
     		               )
     		          )
     		         )
     		        in
     		          sequence
     		          (
     		            copy
     		            (
     		                ()
     		            )
     		          ;
     		            sequence
     		            (
     		              close_in
     		              (
     		                  ic
     		              )
     		            ;
     		              close_out
     		              (
     		                  oc
     		              )
     		            )
     		          )
     		        )
     		      )
     		     )
     		)
        )
   )
  )
  let
  (
    copy_random
   (
    case
        (
     		 sz
     		(
     		 case
     		     (
     		 	  (
     		 	   ic
     		 	  	oc
     		 	  )
     		      let
     		      (
     		       (
     		         buffer
     		         String.create
     		         (
     		             sz
     		         ) 
     		       )
     		      in
     		        let
     		        (
     		         (
     		           copy
     		          (
     		           case
     		               (
     		           	  ()
     		                let
     		                (
     		                 (
     		                   s
     		                   +
     		                   (
     		                       1
     		                       Random.int
     		                       (
     		                           sz
     		                       )
     		                   ) 
     		                 )
     		                in
     		                  let
     		                  (
     		                   (
     		                     n
     		                     input
     		                     (
     		                         ic
     		                         buffer
     		                         0
     		                         s
     		                     ) 
     		                   )
     		                  in
     		                    ifthenelse
     		                    (
     		                     if
     		                     (
     		                      =
     		                      (
     		                          n
     		                          0
     		                      )
     		                     )
     		                     then
     		                     (
     		                      ()
     		                     )
     		                     else
     		                     (
     		                      beginEnd 
     		                      (
     		                          sequence
     		                          (
     		                            output
     		                            (
     		                                oc
     		                                buffer
     		                                0
     		                                n
     		                            )
     		                          ;
     		                            copy
     		                            (
     		                                ()
     		                            )
     		                          )
     		                      )
     		                     ) 
     		                    )
     		                  )
     		                )
     		               )
     		          )
     		         )
     		        in
     		          sequence
     		          (
     		            copy
     		            (
     		                ()
     		            )
     		          ;
     		            sequence
     		            (
     		              close_in
     		              (
     		                  ic
     		              )
     		            ;
     		              close_out
     		              (
     		                  oc
     		              )
     		            )
     		          )
     		        )
     		      )
     		     )
     		)
        )
   )
  )
  let
  (
    copy_line
   (
    case
        (
    	  (
    	   ic
    	  	oc
    	  )
         try
         whileloop 
         (
             true
             sequence
             (
               output_string
               (
                   oc
                   input_line
                   (
                       ic
                   )
               )
             ;
               output_char
               (
                   oc
                   0a
               )
             )
         )
         (
         case
         (
           End_of_file
           sequence
           (
             close_in
             (
                 ic
             )
           ;
             close_out
             (
                 oc
             )
           )
         ) 
         )
        )
   )
  )
  let
  (
    make_lines
   (
    case
        (
    	  ofile
         let
         (
          (
            oc
            open_out
            (
                ofile
            ) 
          )
         in
           sequence
           (
             forloop 
             (
                 i
                 1
                 <>
                 256
                 sequence
                 (
                   output_string
                   (
                       oc
                       String.make
                       (
                           *
                           (
                               i
                               16
                           )
                           2e
                       )
                   )
                 ;
                   output_char
                   (
                       oc
                       0a
                   )
                 )
             )
           ;
             close_out
             (
                 oc
             )
           )
         )
        )
   )
  )
  let
  (
    test_trunc_line
   (
    case
        (
    	  ofile
         sequence
         (
           print_string
           (
               "truncated line"
           )
         ;
           sequence
           (
             print_newline
             (
                 ()
             )
           ;
             let
             (
              (
                oc
                open_out
                (
                    ofile
                ) 
              )
             in
               sequence
               (
                 output_string
                 (
                     oc
                     "A line without newline!"
                 )
               ;
                 sequence
                 (
                   close_out
                   (
                       oc
                   )
                 ;
                   try
                   let
                   (
                    (
                      ic
                      open_in
                      (
                          ofile
                      ) 
                    )
                   in
                     let
                     (
                      (
                        s
                        input_line
                        (
                            ic
                        ) 
                      )
                     in
                       sequence
                       (
                         close_in
                         (
                             ic
                         )
                       ;
                         sequence
                         (
                           ifthenelse
                           (
                            if
                            (
                             =
                             (
                                 s
                                 "A line without newline!"
                             )
                            )
                            then
                            (
                             print_string
                             (
                                 "passed"
                             )
                            )
                            else
                            (
                             print_string
                             (
                                 "FAILED"
                             )
                            ) 
                           )
                         ;
                           print_newline
                           (
                               ()
                           )
                         )
                       )
                     )
                   )
                   (
                   case
                   (
                     End_of_file
                     sequence
                     (
                       print_string
                       (
                           "FAILED"
                       )
                     ;
                       print_newline
                       (
                           ()
                       )
                     )
                   ) 
                   )
                 )
               )
             )
           )
         )
        )
   )
  )
  let
  (
    main
   (
    case
        (
    	  ()
         let
         (
          (
            ifile
            try
            Array.get
            (
             Sys.argv
             1
            )
            (
            case
            (
              _
              "testio.ml"
            ) 
            )
          )
         in
           let
           (
            (
              ofile
              Filename.temp_file
              (
                  "testio"
                  ""
              ) 
            )
           in
             sequence
             (
               test
               (
                   "256-byte chunks, 256-byte chunks"
                   copy_file
                   (
                       256
                   )
                   copy_file
                   (
                       256
                   )
                   ifile
                   ofile
               )
             ;
               sequence
               (
                 test
                 (
                     "4096-byte chunks, 4096-byte chunks"
                     copy_file
                     (
                         4096
                     )
                     copy_file
                     (
                         4096
                     )
                     ifile
                     ofile
                 )
               ;
                 sequence
                 (
                   test
                   (
                       "65536-byte chunks, 65536-byte chunks"
                       copy_file
                       (
                           65536
                       )
                       copy_file
                       (
                           65536
                       )
                       ifile
                       ofile
                   )
                 ;
                   sequence
                   (
                     test
                     (
                         "256-byte chunks, 4096-byte chunks"
                         copy_file
                         (
                             256
                         )
                         copy_file
                         (
                             4096
                         )
                         ifile
                         ofile
                     )
                   ;
                     sequence
                     (
                       test
                       (
                           "4096-byte chunks, 256-byte chunks"
                           copy_file
                           (
                               4096
                           )
                           copy_file
                           (
                               256
                           )
                           ifile
                           ofile
                       )
                     ;
                       sequence
                       (
                         test
                         (
                             "4096-byte chunks, 65536-byte chunks"
                             copy_file
                             (
                                 4096
                             )
                             copy_file
                             (
                                 65536
                             )
                             ifile
                             ofile
                         )
                       ;
                         sequence
                         (
                           test
                           (
                               "263-byte chunks, 4011-byte chunks"
                               copy_file
                               (
                                   263
                               )
                               copy_file
                               (
                                   4011
                               )
                               ifile
                               ofile
                           )
                         ;
                           sequence
                           (
                             test
                             (
                                 "613-byte chunks, 1027-byte chunks"
                                 copy_file
                                 (
                                     613
                                 )
                                 copy_file
                                 (
                                     1027
                                 )
                                 ifile
                                 ofile
                             )
                           ;
                             sequence
                             (
                               test
                               (
                                   "0...8192 byte chunks"
                                   copy_random
                                   (
                                       8192
                                   )
                                   copy_random
                                   (
                                       8192
                                   )
                                   ifile
                                   ofile
                               )
                             ;
                               sequence
                               (
                                 test
                                 (
                                     "line per line, short lines"
                                     copy_line
                                     copy_line
                                     "/etc/hosts"
                                     ofile
                                 )
                               ;
                                 let
                                 (
                                  (
                                    linesfile
                                    Filename.temp_file
                                    (
                                        "lines"
                                        ""
                                    ) 
                                  )
                                 in
                                   sequence
                                   (
                                     make_lines
                                     (
                                         linesfile
                                     )
                                   ;
                                     sequence
                                     (
                                       test
                                       (
                                           "line per line, short and long lines"
                                           copy_line
                                           copy_line
                                           linesfile
                                           ofile
                                       )
                                     ;
                                       sequence
                                       (
                                         test_trunc_line
                                         (
                                             ofile
                                         )
                                       ;
                                         sequence
                                         (
                                           Sys.remove
                                           (
                                               linesfile
                                           )
                                         ;
                                           sequence
                                           (
                                             Sys.remove
                                             (
                                                 ofile
                                             )
                                           ;
                                             exit
                                             (
                                                 0
                                             )
                                           )
                                         )
                                       )
                                     )
                                   )
                                 )
                               )
                             )
                           )
                         )
                       )
                     )
                   )
                 )
               )
             )
           )
         )
        )
   )
  )
   sequence
   (
     Unix.handle_unix_error
     (
         main
         ()
     )
   ;
     exit
     (
         0
     )
   )
)
