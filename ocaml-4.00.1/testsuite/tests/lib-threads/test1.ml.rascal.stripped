(
  type
  (  						
     prodcons
     type
     params=
     (
      a
     )
     cstrs =
     (
     )
     kind =
      buffer
      polytype1 
      (
           array
           (
             a
           )
      )
      lock
      polytype1 
      (
          "extendedModulePath1"([],"Mutex")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()].t
          (
          )
      )
      readpos
      polytype1 
      (
          int
          (
          )
      )
      writepos
      polytype1 
      (
          int
          (
          )
      )
      notempty
      polytype1 
      (
          "extendedModulePath1"([],"Condition")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()].t
          (
          )
      )
      notfull
      polytype1 
      (
          "extendedModulePath1"([],"Condition")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()].t
          (
          )
      )
  )
  let
  (
    create
   (
    case
        (
     		 size
     		(
     		 case
     		     (
     		 	  init
     		      record
     		      (
     		       buffer
     		       Array.create
     		       (
     		           size
     		           init
     		       )
     		         lock
     		         Mutex.create
     		         (
     		             ()
     		         )
     		         readpos
     		         0
     		         writepos
     		         0
     		         notempty
     		         Condition.create
     		         (
     		             ()
     		         )
     		         notfull
     		         Condition.create
     		         (
     		             ()
     		         )
     		      )
     		     )
     		)
        )
   )
  )
  let
  (
    output_lock
    Mutex.create
    (
        ()
    ) 
  )
  let
  (
    put
   (
    case
        (
     		 p
     		(
     		 case
     		     (
     		 	  data
     		      sequence
     		      (
     		        Mutex.lock
     		        (
     		            field
     		            (
     		            p
     		            lock
     		            )
     		        )
     		      ;
     		        sequence
     		        (
     		          whileloop 
     		          (
     		              =
     		              (
     		                  mod
     		                  (
     		                      +
     		                      (
     		                          field
     		                          (
     		                          p
     		                          writepos
     		                          )
     		                          1
     		                      )
     		                      Array.length
     		                      (
     		                          field
     		                          (
     		                          p
     		                          buffer
     		                          )
     		                      )
     		                  )
     		                  field
     		                  (
     		                  p
     		                  readpos
     		                  )
     		              )
     		              Condition.wait
     		              (
     		                  field
     		                  (
     		                  p
     		                  notfull
     		                  )
     		                  field
     		                  (
     		                  p
     		                  lock
     		                  )
     		              )
     		          )
     		        ;
     		          sequence
     		          (
     		            Array.set
     		            (
     		             field
     		             (
     		             p
     		             buffer
     		             )
     		             field
     		             (
     		             p
     		             writepos
     		             )
     		             data
     		            )
     		          ;
     		            sequence
     		            (
     		              setfield
     		              (
     		              p
     		              writepos
     		              mod
     		              (
     		                  +
     		                  (
     		                      field
     		                      (
     		                      p
     		                      writepos
     		                      )
     		                      1
     		                  )
     		                  Array.length
     		                  (
     		                      field
     		                      (
     		                      p
     		                      buffer
     		                      )
     		                  )
     		              )
     		              )
     		            ;
     		              sequence
     		              (
     		                Condition.signal
     		                (
     		                    field
     		                    (
     		                    p
     		                    notempty
     		                    )
     		                )
     		              ;
     		                Mutex.unlock
     		                (
     		                    field
     		                    (
     		                    p
     		                    lock
     		                    )
     		                )
     		              )
     		            )
     		          )
     		        )
     		      )
     		     )
     		)
        )
   )
  )
  let
  (
    get
   (
    case
        (
    	  p
         sequence
         (
           Mutex.lock
           (
               field
               (
               p
               lock
               )
           )
         ;
           sequence
           (
             whileloop 
             (
                 =
                 (
                     field
                     (
                     p
                     writepos
                     )
                     field
                     (
                     p
                     readpos
                     )
                 )
                 Condition.wait
                 (
                     field
                     (
                     p
                     notempty
                     )
                     field
                     (
                     p
                     lock
                     )
                 )
             )
           ;
             let
             (
              (
                data
                Array.get
                (
                 field
                 (
                 p
                 buffer
                 )
                 field
                 (
                 p
                 readpos
                 )
                )
              )
             in
               sequence
               (
                 setfield
                 (
                 p
                 readpos
                 mod
                 (
                     +
                     (
                         field
                         (
                         p
                         readpos
                         )
                         1
                     )
                     Array.length
                     (
                         field
                         (
                         p
                         buffer
                         )
                     )
                 )
                 )
               ;
                 sequence
                 (
                   Condition.signal
                   (
                       field
                       (
                       p
                       notfull
                       )
                   )
                 ;
                   sequence
                   (
                     Mutex.unlock
                     (
                         field
                         (
                         p
                         lock
                         )
                     )
                   ;
                     data
                   )
                 )
               )
             )
           )
         )
        )
   )
  )
  let
  (
    buff
    create
    (
        20
        0
    ) 
  )
  let
  (
    produce
   (
    case
        (
    	  n
         sequence
         (
           Mutex.lock
           (
               output_lock
           )
         ;
           sequence
           (
             print_int
             (
                 n
             )
           ;
             sequence
             (
               print_string
               (
                   "-->"
               )
             ;
               sequence
               (
                 print_newline
                 (
                     ()
                 )
               ;
                 sequence
                 (
                   Mutex.unlock
                   (
                       output_lock
                   )
                 ;
                   sequence
                   (
                     put
                     (
                         buff
                         n
                     )
                   ;
                     ifthenelse
                     (
                      if
                      (
                       <
                       (
                           n
                           10000
                       )
                      )
                      then
                      (
                       produce
                       (
                           +
                           (
                               n
                               1
                           )
                       )
                      )
                      else
                      (
                      )
                     )
                   )
                 )
               )
             )
           )
         )
        )
   )
  )
  let
  (
    consume
   (
    case
        (
    	  ()
         let
         (
          (
            n
            get
            (
                buff
            ) 
          )
         in
           sequence
           (
             Mutex.lock
             (
                 output_lock
             )
           ;
             sequence
             (
               print_string
               (
                   "-->"
               )
             ;
               sequence
               (
                 print_int
                 (
                     n
                 )
               ;
                 sequence
                 (
                   print_newline
                   (
                       ()
                   )
                 ;
                   sequence
                   (
                     Mutex.unlock
                     (
                         output_lock
                     )
                   ;
                     ifthenelse
                     (
                      if
                      (
                       <
                       (
                           n
                           10000
                       )
                      )
                      then
                      (
                       consume
                       (
                           ()
                       )
                      )
                      else
                      (
                      )
                     )
                   )
                 )
               )
             )
           )
         )
        )
   )
  )
  let
  (
    t1
    Thread.create
    (
        produce
        0
    ) 
  )
   consume
   (
       ()
   ) 
)
