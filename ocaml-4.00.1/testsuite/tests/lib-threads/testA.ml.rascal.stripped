(
  let
  (
    private_data
    (
    Hashtbl.create
    (
        17
    )
    :
    <["typexprConstr2"("typeConstr"(["extendedModulePath1"([],"Thread")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"string")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"typeConstr"(["extendedModulePath1"([],"Hashtbl")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
    )
  )
  let
  (
    private_data_lock
    Mutex.create
    (
        ()
    ) 
  )
  let
  (
    output_lock
    Mutex.create
    (
        ()
    ) 
  )
  let
  (
    set_private_data
   (
    case
        (
    	  data
         sequence
         (
           Mutex.lock
           (
               private_data_lock
           )
         ;
           sequence
           (
             Hashtbl.add
             (
                 private_data
                 Thread.self
                 (
                     ()
                 )
                 data
             )
           ;
             Mutex.unlock
             (
                 private_data_lock
             )
           )
         )
        )
   )
  )
  let
  (
    get_private_data
   (
    case
        (
    	  ()
         Hashtbl.find
         (
             private_data
             Thread.self
             (
                 ()
             )
         )
        )
   )
  )
  let
  (
    process
   (
    case
        (
     		 id
     		(
     		 case
     		     (
     		 	  data
     		      sequence
     		      (
     		        set_private_data
     		        (
     		            data
     		        )
     		      ;
     		        sequence
     		        (
     		          Mutex.lock
     		          (
     		              output_lock
     		          )
     		        ;
     		          sequence
     		          (
     		            print_int
     		            (
     		                id
     		            )
     		          ;
     		            sequence
     		            (
     		              print_string
     		              (
     		                  " --> "
     		              )
     		            ;
     		              sequence
     		              (
     		                print_string
     		                (
     		                    get_private_data
     		                    (
     		                        ()
     		                    )
     		                )
     		              ;
     		                sequence
     		                (
     		                  Mutex.unlock
     		                  (
     		                      output_lock
     		                  )
     		                ;
     		                  print_newline
     		                  (
     		                      ()
     		                  )
     		                )
     		              )
     		            )
     		          )
     		        )
     		      )
     		     )
     		)
        )
   )
  )
   let
   (
    (
      t1
      Thread.create
      (
          process
          (
              1
          )
          "un"
      ) 
    )
   in
     let
     (
      (
        t2
        Thread.create
        (
            process
            (
                2
            )
            "deux"
        ) 
      )
     in
       let
       (
        (
          t3
          Thread.create
          (
              process
              (
                  3
              )
              "trois"
          ) 
        )
       in
         let
         (
          (
            t4
            Thread.create
            (
                process
                (
                    4
                )
                "quatre"
            ) 
          )
         in
           let
           (
            (
              t5
              Thread.create
              (
                  process
                  (
                      5
                  )
                  "cinq"
              ) 
            )
           in
             List.iter
             (
                 Thread.join
                 ::
                  (
                  t1
                  ::
                  (
                  t2
                  ::
                  (
                  t3
                  ::
                  (
                  t4
                  ::
                  (
                  t5
                  []
                  ) 
                  ) 
                  ) 
                  ) 
                  ) 
             )
           )
         )
       )
     )
   )
)
