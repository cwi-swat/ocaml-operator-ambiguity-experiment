
(
    								 
  open Event
                                     
  type
  (  						
      							    	 
     buffer_channel
     type
     params=
     (
     
      
      a
     										 
     )
     cstrs =
     (
     )
     kind =
     
     
     							     
      
      input
      polytype1 
      (
          
           channel
           (
             a
           )
           
              									
      )
     							     
      
      output
      polytype1 
      (
          
           channel
           (
             a
           )
           
              									
      )
     							     
     	                           
     														  
     														 
    											   
  								        
  )
                                     
  let
  (
   
    new_buffer_channel
   (
    case
        (
    	  ()
         
         let
         (
          (
             									  
           
            ic
            new_channel
            (
                ()
            ) 
           							    		   
             									  
          )
         in
           
           let
           (
            (
               									  
             
              oc
              new_channel
              (
                  ()
              ) 
             							    		   
               									  
            )
           in
             
             let
             (
              (
                 									  
               
                buff
                Queue.create
                (
                    ()
                ) 
               							    		   
                 									  
              )
             in
               
               let
               (
                (
                   									  
                 
                  buffer_process
                 (
                  case
                      (
                   		
                   		 front
                   		(
                   		 case
                   		     (
                   		 	  rear
                   		      match
                   		      
                   		      (
                   		          					 front
                   		          					 
                   		      	rear
                   		          					 
                   		      )
                   		          					 
                   		      (
                   		      
                   		      case
                   		      (
                   		        
                   		        (
                   		         []
                   		             						 
                   		        	[]
                   		        
                   		        )
                   		        
                   		        buffer_process
                   		        (
                   		            ::
                   		             (
                   		             sync
                   		             (
                   		                 receive
                   		                 (
                   		                     ic
                   		                 )
                   		             )
                   		             []
                   		             ) 
                   		                						  
                   		            []
                   		        )
                   		      ) 
                   		      	        											 
                   		        
                   		        case
                   		        (
                   		         
                   		         (
                   		          
                   		          ::
                   		          (
                   		              hd
                   		              tl
                   		          )
                   		              						 
                   		         	_
                   		         
                   		         )
                   		         
                   		         select
                   		         (
                   		             ::
                   		              (
                   		              wrap
                   		              (
                   		                  receive
                   		                  (
                   		                      ic
                   		                  )
                   		                  (
                   		                   
                   		                   case
                   		                   (
                   		                   x
                   		                   
                   		                   buffer_process
                   		                   (
                   		                       front
                   		                       ::
                   		                       (
                   		                           x
                   		                           rear
                   		                       )
                   		                   )
                   		                   )
                   		                   													 
                   		                  )
                   		                     						  
                   		              )
                   		              ::
                   		              (
                   		              wrap
                   		              (
                   		                  send
                   		                  (
                   		                      oc
                   		                      hd
                   		                  )
                   		                  (
                   		                   
                   		                   case
                   		                   (
                   		                   ()
                   		                   
                   		                   buffer_process
                   		                   (
                   		                       tl
                   		                       rear
                   		                   )
                   		                   )
                   		                   													 
                   		                  )
                   		                     						  
                   		              )
                   		              []
                   		              ) 
                   		                 						  
                   		              ) 
                   		                 						  
                   		         )
                   		        )
                   		        													    
                   		      	        											 
                   		        
                   		        case
                   		        (
                   		         
                   		         (
                   		          []
                   		              						 
                   		         	_
                   		         
                   		         )
                   		         
                   		         buffer_process
                   		         (
                   		             List.rev
                   		             (
                   		                 rear
                   		             )
                   		             []
                   		         )
                   		        )
                   		        													    
                   		      	        											 
                   		      	        											 
                   		      )
                   		      			   
                   		     )
                   		)
                   		    		   
                      )
                 )
                     		   
                   									  
                )
               in
                 
                 sequence
                 (
                   Thread.create
                   (
                       buffer_process
                       (
                           []
                       )
                       []
                   )
                 ;
                   record
                   (
                    input
                    ic
                   										   	     
                     
                      output
                      oc
                     										   
                   											   	 
                   )
                 )
                     							
               )
                   									
             )
                 									
           )
               									
         )
             									
        )
   )
       		    
  )
                                     
  let
  (
   
    buffer_send
   (
    case
        (
     		
     		 bc
     		(
     		 case
     		     (
     		 	  data
     		      sync
     		      (
     		          send
     		          (
     		              field
     		              (
     		              bc
     		              input
     		              )
     		                  									 
     		              data
     		          )
     		      )
     		     )
     		)
     		    		   
        )
   )
       		    
  )
                                     
  let
  (
   
    buffer_receive
   (
    case
        (
    	  bc
         receive
         (
             field
             (
             bc
             output
             )
                 									 
         )
        )
   )
       		    
  )
                                     
  let
  (
   
    box
    new_buffer_channel
    (
        ()
    ) 
   							    		    
  )
                                     
  let
  (
   
    ch
    new_channel
    (
        ()
    ) 
   							    		    
  )
                                     
  let
  (
   
    f
   (
    case
        (
    	  ()
         
         sequence
         (
           buffer_send
           (
               box
               "un"
           )
         ;
           
           sequence
           (
             buffer_send
             (
                 box
                 "deux"
             )
           ;
             sync
             (
                 send
                 (
                     ch
                     3
                 )
             )
           )
               							
         )
             							
        )
   )
       		    
  )
                                     
  let
  (
   
    g
   (
    case
        (
    	  ()
         
         sequence
         (
           print_int
           (
               sync
               (
                   receive
                   (
                       ch
                   )
               )
           )
         ;
           
           sequence
           (
             print_newline
             (
                 ()
             )
           ;
             
             sequence
             (
               print_string
               (
                   sync
                   (
                       buffer_receive
                       (
                           box
                       )
                   )
               )
             ;
               
               sequence
               (
                 print_newline
                 (
                     ()
                 )
               ;
                 
                 sequence
                 (
                   print_string
                   (
                       sync
                       (
                           buffer_receive
                           (
                               box
                           )
                       )
                   )
                 ;
                   print_newline
                   (
                       ()
                   )
                 )
                     							
               )
                   							
             )
                 							
           )
               							
         )
             							
        )
   )
       		    
  )
                                     
  
   
   
   sequence
   (
     Thread.create
     (
         f
         ()
     )
   ;
     g
     (
         ()
     )
   )
       							 
  							    		    
                                     
)