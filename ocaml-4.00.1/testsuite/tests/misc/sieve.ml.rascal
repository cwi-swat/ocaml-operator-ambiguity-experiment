
(
    								 
  let
  (
   
    interval
   (
    case
        (
     		
     		 min
     		(
     		 case
     		     (
     		 	  max
     		      ifthenelse
     		      (
     		       if
     		       (
     		        >
     		        (
     		            min
     		            max
     		        )
     		       )
     		       then
     		       (
     		        []
     		       )
     		       else
     		       (
     		        ::
     		        (
     		            min
     		            interval
     		            (
     		                +
     		                (
     		                    min
     		                    1
     		                )
     		                max
     		            )
     		        )
     		       ) 
     		      )
     		      		    											 
     		     )
     		)
     		    		   
        )
   )
       		    
  )
                                     
  let
  (
   
    filter
   (
    case
        (
    	  p
         (
          
          case
          (
            []
            
            []
          ) 
          	        											 
            
            case
            (
             
             ::
             (
                 a
                 r
             )
             
             ifthenelse
             (
              if
              (
               p
               (
                   a
               )
              )
              then
              (
               ::
               (
                   a
                   filter
                   (
                       p
                       r
                   )
               )
              )
              else
              (
               filter
               (
                   p
                   r
               )
              ) 
             )
             		    											 
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    remove_multiples_of
   (
    case
        (
    	  n
         filter
         (
             (
              
              case
              (
              m
              
              <>
              (
                  mod
                  (
                      m
                      n
                  )
                  0
              )
              )
              													 
             )
                						  
         )
        )
   )
       		    
  )
                                     
  let
  (
   
    sieve
   (
    case
        (
    	  max
         
         let
         (
          (
             									  
           
            filter_again
            (
             
             case
             (
               []
               
               []
             ) 
             	        											 
               
               case
               (
                patternAs 
                (
                    
                    ::
                    (
                        n
                        r
                    )
                    l
                )
                
                ifthenelse
                (
                 if
                 (
                  >
                  (
                      *
                      (
                          n
                          n
                      )
                      max
                  )
                 )
                 then
                 (
                  l
                 )
                 else
                 (
                  ::
                  (
                      n
                      filter_again
                      (
                          remove_multiples_of
                          (
                              n
                              r
                          )
                      )
                  )
                 ) 
                )
                		    											 
               )
               													    
             	        											 
             	        											 
            )
               							    
           							    		   
             									  
          )
         in
           filter_again
           (
               interval
               (
                   2
                   max
               )
           )
         )
             									
        )
   )
       		    
  )
                                     
  let
  (
   
    do_list
   (
    case
        (
    	  f
         (
          
          case
          (
            []
            
            ()
          ) 
          	        											 
            
            case
            (
             
             ::
             (
                 a
                 l
             )
             
             
             sequence
             (
               f
               (
                   a
               )
             ;
               do_list
               (
                   f
                   l
               )
             )
                 							
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  
   
   
   sequence
   (
     do_list
     (
         (
          
          case
          (
          n
          
          
          sequence
          (
            print_string
            (
                " "
            )
          ;
            print_int
            (
                n
            )
          )
              							
          )
          													 
         )
            						  
         sieve
         (
             50000
         )
     )
   ;
     
     sequence
     (
       print_newline
       (
           ()
       )
     ;
       exit
       (
           0
       )
     )
         							
   )
       							 
  							    		    
                                     
)