
(
    								 
  type
  (  						
      							    	 
     bdd
       type
       params=
       (
       
       )
       cstrs =
       (
    											   
    											   	  
    											   
       )
       kind =
       
       
       (
       								  
       One
       (
       									
       )
       								    
       								  
       Zero
       (
       									
       )
       								    
       								  
       Node
       (
       									
        
        bdd
        (
        )
        								  
       								     
        
        int
        (
        )
        								  
       								     
        
        int
        (
        )
        								  
       								     
        
        bdd
        (
        )
        								  
       								     
       )
       								    
       								  
       )
       								   
       
       														 
    											   
  								        
  )
                                     
  let
  (
   
     eval
               	   
   (
    case
        (
     		
     		 bdd
     		(
     		 case
     		     (
     		 	  vars
     		      match
     		      bdd
     		      (
     		      
     		      case
     		      (
     		        Zero
     		        
     		        false
     		      ) 
     		      	        											 
     		        
     		        case
     		        (
     		         One
     		         
     		         true
     		        )
     		        													   
     		        
     		        case
     		        (
     		         
     		         Node
     		         
     		         (
     		          l
     		              						 
     		         	v
     		         
     		         	_
     		         
     		         	h
     		         
     		         )
     		         									  
     		         
     		         ifthenelse
     		         (
     		          if
     		          (
     		           Array.get
     		           (
     		            vars
     		            v
     		           )
     		           												
     		          )
     		          then
     		          (
     		           eval
     		           (
     		               h
     		               vars
     		           )
     		          )
     		          else
     		          (
     		           eval
     		           (
     		               l
     		               vars
     		           )
     		          ) 
     		         )
     		         	    											 
     		        )
     		        													    
     		      	        											 
     		      	        											 
     		      )
     		      			   
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
  let
  (
   
    getId
   (
    case
        (
    	  bdd
         match
         bdd
         (
         
         case
         (
           
           Node
           
           (
            _
                						 
           	_
           
           	id
           
           	_
           
           )
           									  
           
           id
         ) 
         	        											 
           
           case
           (
            Zero
            
            0
           )
           													   
           
           case
           (
            One
            
            1
           )
           													    
         	        											 
         	        											 
         )
         			   
        )
   )
       		    
  )
                                     
  let
  (
   
    initSize_1
    -
    (
        *
        (
            8
            1024
        )
        1
    ) 
   							    		    
  )
                                     
  let
  (
   
    nodeC
    ref
    (
        1
    ) 
   							    		    
  )
                                     
  let
  (
   
    sz_1
    ref
    (
        initSize_1
    ) 
   							    		    
  )
                                     
  let
  (
   
    htab
    ref
    (
        Array.create
        (
            +
            (
                
                 !
                 (
                 sz_1
                 )
                    							 
                1
            )
            []
        )
    ) 
   							    		    
  )
                                     
  let
  (
   
    n_items
    ref
    (
        0
    ) 
   							    		    
  )
                                     
  let
  (
   
     hashVal
               	   
   (
    case
        (
     		
     		  x
     		            	   
     		(
     		 case
     		     (
     		  		
     		  		 y
     		  		(
     		  		 case
     		  		     (
     		  		 	  v
     		  		      +
     		  		      (
     		  		          +
     		  		          (
     		  		              lsl
     		  		              (
     		  		                  x
     		  		                  1
     		  		              )
     		  		              y
     		  		          )
     		  		          lsl
     		  		          (
     		  		              v
     		  		              2
     		  		          )
     		  		      )
     		  		     )
     		  		)
     		  		    		   
     		     )
     		)
     		            	   
        )
   )
               	    
  )
                                     
  let
  (
   
    resize
   (
    case
        (
    	  newSize
         
         let
         (
          (
             									  
           
            arr
            
             !
             (
             htab
             )
                							  
           							    		   
             									  
          )
         in
           
           let
           (
            (
               									  
             
              newSz_1
              -
              (
                  newSize
                  1
              ) 
             							    		   
               									  
            )
           in
             
             let
             (
              (
                 									  
               
                newArr
                Array.create
                (
                    newSize
                    []
                ) 
               							    		   
                 									  
              )
             in
               
               let
               (
                (
                   									  
                 
                  copyBucket
                 (
                  case
                      (
                  	  bucket
                       match
                       bucket
                       (
                       
                       case
                       (
                         []
                         
                         ()
                       ) 
                       	        											 
                         
                         case
                         (
                          
                          ::
                          (
                              n
                              ns
                          )
                          
                          match
                          n
                          (
                          
                          case
                          (
                            
                            Node
                            
                            (
                             l
                                 						 
                            	v
                            
                            	_
                            
                            	h
                            
                            )
                            									  
                            
                            
                            let
                            (
                             (
                                									  
                              
                               ind
                               land
                               (
                                   hashVal
                                   (
                                       getId
                                       (
                                           l
                                       )
                                       getId
                                       (
                                           h
                                       )
                                       v
                                   )
                                   newSz_1
                               ) 
                              							    		   
                                									  
                             )
                            in
                              
                              sequence
                              (
                                Array.set
                                (
                                 newArr
                                 ind
                                 ::
                                 (
                                     n
                                     Array.get
                                     (
                                      newArr
                                      ind
                                     )
                                     												
                                 )
                                )
                                    									
                              ;
                                copyBucket
                                (
                                    ns
                                )
                              )
                                  							
                            )
                                									
                          ) 
                          	        											 
                            
                            case
                            (
                             _
                             
                             assert false
                            )
                            													    
                          	        											 
                          	        											 
                          )
                          			   
                         )
                         													    
                       	        											 
                       	        											 
                       )
                       			   
                      )
                 )
                     		   
                   									  
                )
               in
                 
                 sequence
                 (
                    for n
                    0
                    
                     !
                     (
                     sz_1
                     )
                        							 
                    copyBucket
                    (
                        Array.get
                        (
                         arr
                         n
                        )
                        												
                    )
                       														  
                 ;
                   
                   sequence
                   (
                     :=
                     (
                         htab
                         newArr
                     )
                   ;
                     :=
                     (
                         sz_1
                         newSz_1
                     )
                   )
                       							
                 )
                     							
               )
                   									
             )
                 									
           )
               									
         )
             									
        )
   )
       		    
  )
                                     
  let
  (
   
     insert
               	   
   (
    case
        (
     		
     		  idl
     		            	   
     		(
     		 case
     		     (
     		  		
     		  		  idh
     		  		            	   
     		  		(
     		  		 case
     		  		     (
     		  		  		
     		  		  		  v
     		  		  		            	   
     		  		  		(
     		  		  		 case
     		  		  		     (
     		  		  		  		
     		  		  		  		  ind
     		  		  		  		            	   
     		  		  		  		(
     		  		  		  		 case
     		  		  		  		     (
     		  		  		  		  		
     		  		  		  		  		 bucket
     		  		  		  		  		(
     		  		  		  		  		 case
     		  		  		  		  		     (
     		  		  		  		  		 	  newNode
     		  		  		  		  		      ifthenelse
     		  		  		  		  		      (
     		  		  		  		  		       if
     		  		  		  		  		       (
     		  		  		  		  		        <=
     		  		  		  		  		        (
     		  		  		  		  		            
     		  		  		  		  		             !
     		  		  		  		  		             (
     		  		  		  		  		             n_items
     		  		  		  		  		             )
     		  		  		  		  		                							 
     		  		  		  		  		            
     		  		  		  		  		             !
     		  		  		  		  		             (
     		  		  		  		  		             sz_1
     		  		  		  		  		             )
     		  		  		  		  		                							 
     		  		  		  		  		        )
     		  		  		  		  		       )
     		  		  		  		  		       then
     		  		  		  		  		       (
     		  		  		  		  		        
     		  		  		  		  		        sequence
     		  		  		  		  		        (
     		  		  		  		  		          Array.set
     		  		  		  		  		          (
     		  		  		  		  		           
     		  		  		  		  		            !
     		  		  		  		  		            (
     		  		  		  		  		            htab
     		  		  		  		  		            )
     		  		  		  		  		               							 
     		  		  		  		  		           ind
     		  		  		  		  		           ::
     		  		  		  		  		           (
     		  		  		  		  		               newNode
     		  		  		  		  		               bucket
     		  		  		  		  		           )
     		  		  		  		  		          )
     		  		  		  		  		              									
     		  		  		  		  		        ;
     		  		  		  		  		          incr
     		  		  		  		  		          (
     		  		  		  		  		              n_items
     		  		  		  		  		          )
     		  		  		  		  		        )
     		  		  		  		  		            							
     		  		  		  		  		       )
     		  		  		  		  		       else
     		  		  		  		  		       (
     		  		  		  		  		        
     		  		  		  		  		        sequence
     		  		  		  		  		        (
     		  		  		  		  		          resize
     		  		  		  		  		          (
     		  		  		  		  		              +
     		  		  		  		  		              (
     		  		  		  		  		                  +
     		  		  		  		  		                  (
     		  		  		  		  		                      
     		  		  		  		  		                       !
     		  		  		  		  		                       (
     		  		  		  		  		                       sz_1
     		  		  		  		  		                       )
     		  		  		  		  		                          							 
     		  		  		  		  		                      
     		  		  		  		  		                       !
     		  		  		  		  		                       (
     		  		  		  		  		                       sz_1
     		  		  		  		  		                       )
     		  		  		  		  		                          							 
     		  		  		  		  		                  )
     		  		  		  		  		                  2
     		  		  		  		  		              )
     		  		  		  		  		          )
     		  		  		  		  		        ;
     		  		  		  		  		          
     		  		  		  		  		          let
     		  		  		  		  		          (
     		  		  		  		  		           (
     		  		  		  		  		              									  
     		  		  		  		  		            
     		  		  		  		  		             ind
     		  		  		  		  		             land
     		  		  		  		  		             (
     		  		  		  		  		                 hashVal
     		  		  		  		  		                 (
     		  		  		  		  		                     idl
     		  		  		  		  		                     idh
     		  		  		  		  		                     v
     		  		  		  		  		                 )
     		  		  		  		  		                 
     		  		  		  		  		                  !
     		  		  		  		  		                  (
     		  		  		  		  		                  sz_1
     		  		  		  		  		                  )
     		  		  		  		  		                     							 
     		  		  		  		  		             ) 
     		  		  		  		  		            							    		   
     		  		  		  		  		              									  
     		  		  		  		  		           )
     		  		  		  		  		          in
     		  		  		  		  		            Array.set
     		  		  		  		  		            (
     		  		  		  		  		             
     		  		  		  		  		              !
     		  		  		  		  		              (
     		  		  		  		  		              htab
     		  		  		  		  		              )
     		  		  		  		  		                 							 
     		  		  		  		  		             ind
     		  		  		  		  		             ::
     		  		  		  		  		             (
     		  		  		  		  		                 newNode
     		  		  		  		  		                 Array.get
     		  		  		  		  		                 (
     		  		  		  		  		                  
     		  		  		  		  		                   !
     		  		  		  		  		                   (
     		  		  		  		  		                   htab
     		  		  		  		  		                   )
     		  		  		  		  		                      							 
     		  		  		  		  		                  ind
     		  		  		  		  		                 )
     		  		  		  		  		                 												
     		  		  		  		  		             )
     		  		  		  		  		            )
     		  		  		  		  		                									
     		  		  		  		  		          )
     		  		  		  		  		              									
     		  		  		  		  		        )
     		  		  		  		  		            							
     		  		  		  		  		       ) 
     		  		  		  		  		      )
     		  		  		  		  		      	    											 
     		  		  		  		  		     )
     		  		  		  		  		)
     		  		  		  		  		    		   
     		  		  		  		     )
     		  		  		  		)
     		  		  		  		            	   
     		  		  		     )
     		  		  		)
     		  		  		            	   
     		  		     )
     		  		)
     		  		            	   
     		     )
     		)
     		            	   
        )
   )
               	    
  )
                                     
  let
  (
   
    resetUnique
   (
    case
        (
    	  ()
         
         sequence
         (
           :=
           (
               sz_1
               initSize_1
           )
         ;
           
           sequence
           (
             :=
             (
                 htab
                 Array.create
                 (
                     +
                     (
                         
                          !
                          (
                          sz_1
                          )
                             							 
                         1
                     )
                     []
                 )
             )
           ;
             
             sequence
             (
               :=
               (
                   n_items
                   0
               )
             ;
               :=
               (
                   nodeC
                   1
               )
             )
                 							
           )
               							
         )
             							
        )
   )
       		    
  )
                                     
  let
  (
   
     mkNode
               	   
   (
    case
        (
     		
     		  low
     		            	   
     		(
     		 case
     		     (
     		  		
     		  		 v
     		  		(
     		  		 case
     		  		     (
     		  		 	  high
     		  		      
     		  		      let
     		  		      (
     		  		       (
     		  		          									  
     		  		        
     		  		         idl
     		  		         getId
     		  		         (
     		  		             low
     		  		         ) 
     		  		        							    		   
     		  		          									  
     		  		       )
     		  		      in
     		  		        
     		  		        let
     		  		        (
     		  		         (
     		  		            									  
     		  		          
     		  		           idh
     		  		           getId
     		  		           (
     		  		               high
     		  		           ) 
     		  		          							    		   
     		  		            									  
     		  		         )
     		  		        in
     		  		          ifthenelse
     		  		          (
     		  		           if
     		  		           (
     		  		            =
     		  		            (
     		  		                idl
     		  		                idh
     		  		            )
     		  		           )
     		  		           then
     		  		           (
     		  		            low
     		  		           )
     		  		           else
     		  		           (
     		  		            
     		  		            let
     		  		            (
     		  		             (
     		  		                									  
     		  		              
     		  		               ind
     		  		               land
     		  		               (
     		  		                   hashVal
     		  		                   (
     		  		                       idl
     		  		                       idh
     		  		                       v
     		  		                   )
     		  		                   
     		  		                    !
     		  		                    (
     		  		                    sz_1
     		  		                    )
     		  		                       							 
     		  		               ) 
     		  		              							    		   
     		  		                									  
     		  		             )
     		  		            in
     		  		              
     		  		              let
     		  		              (
     		  		               (
     		  		                  									  
     		  		                
     		  		                 bucket
     		  		                 Array.get
     		  		                 (
     		  		                  
     		  		                   !
     		  		                   (
     		  		                   htab
     		  		                   )
     		  		                      							 
     		  		                  ind
     		  		                 )
     		  		                 												 
     		  		                							    		   
     		  		                  									  
     		  		               )
     		  		              in
     		  		                
     		  		                let
     		  		                (
     		  		                 (
     		  		                    									  
     		  		                  
     		  		                   lookup
     		  		                  (
     		  		                   case
     		  		                       (
     		  		                   	  b
     		  		                        match
     		  		                        b
     		  		                        (
     		  		                        
     		  		                        case
     		  		                        (
     		  		                          []
     		  		                          
     		  		                          
     		  		                          let
     		  		                          (
     		  		                           (
     		  		                              									  
     		  		                            
     		  		                             n
     		  		                             
     		  		                             Node
     		  		                                
     		  		                                (
     		  		                                 low
     		  		                                    					   
     		  		                                	v
     		  		                                    					   
     		  		                                	
     		  		                                	sequence
     		  		                                	(
     		  		                                	  incr
     		  		                                	  (
     		  		                                	      nodeC
     		  		                                	  )
     		  		                                	;
     		  		                                	  
     		  		                                	   !
     		  		                                	   (
     		  		                                	   nodeC
     		  		                                	   )
     		  		                                	      							 
     		  		                                	)
     		  		                                	    							
     		  		                                    					   
     		  		                                	high
     		  		                                    					   
     		  		                                )
     		  		                                 								  
     		  		                            							    		   
     		  		                              									  
     		  		                           )
     		  		                          in
     		  		                            
     		  		                            sequence
     		  		                            (
     		  		                              insert
     		  		                              (
     		  		                                  getId
     		  		                                  (
     		  		                                      low
     		  		                                  )
     		  		                                  getId
     		  		                                  (
     		  		                                      high
     		  		                                  )
     		  		                                  v
     		  		                                  ind
     		  		                                  bucket
     		  		                                  n
     		  		                              )
     		  		                            ;
     		  		                              n
     		  		                            )
     		  		                                							
     		  		                          )
     		  		                              									
     		  		                        ) 
     		  		                        	        											 
     		  		                          
     		  		                          case
     		  		                          (
     		  		                           
     		  		                           ::
     		  		                           (
     		  		                               n
     		  		                               ns
     		  		                           )
     		  		                           
     		  		                           match
     		  		                           n
     		  		                           (
     		  		                           
     		  		                           case
     		  		                           (
     		  		                             
     		  		                             Node
     		  		                             
     		  		                             (
     		  		                              l
     		  		                                  						 
     		  		                             	v'
     		  		                             
     		  		                             	id
     		  		                             
     		  		                             	h
     		  		                             
     		  		                             )
     		  		                             									  
     		  		                             
     		  		                             ifthenelse
     		  		                             (
     		  		                              if
     		  		                              (
     		  		                               &&
     		  		                               (
     		  		                                   =
     		  		                                   (
     		  		                                       v
     		  		                                       v'
     		  		                                   )
     		  		                                   &&
     		  		                                   (
     		  		                                       =
     		  		                                       (
     		  		                                           idl
     		  		                                           getId
     		  		                                           (
     		  		                                               l
     		  		                                           )
     		  		                                       )
     		  		                                       =
     		  		                                       (
     		  		                                           idh
     		  		                                           getId
     		  		                                           (
     		  		                                               h
     		  		                                           )
     		  		                                       )
     		  		                                   )
     		  		                               )
     		  		                              )
     		  		                              then
     		  		                              (
     		  		                               n
     		  		                              )
     		  		                              else
     		  		                              (
     		  		                               lookup
     		  		                               (
     		  		                                   ns
     		  		                               )
     		  		                              ) 
     		  		                             )
     		  		                             	    											 
     		  		                           ) 
     		  		                           	        											 
     		  		                             
     		  		                             case
     		  		                             (
     		  		                              _
     		  		                              
     		  		                              assert false
     		  		                             )
     		  		                             													    
     		  		                           	        											 
     		  		                           	        											 
     		  		                           )
     		  		                           			   
     		  		                          )
     		  		                          													    
     		  		                        	        											 
     		  		                        	        											 
     		  		                        )
     		  		                        			   
     		  		                       )
     		  		                  )
     		  		                      		   
     		  		                    									  
     		  		                 )
     		  		                in
     		  		                  lookup
     		  		                  (
     		  		                      bucket
     		  		                  )
     		  		                )
     		  		                    									
     		  		              )
     		  		                  									
     		  		            )
     		  		                									
     		  		           ) 
     		  		          )
     		  		          	    											 
     		  		        )
     		  		            									
     		  		      )
     		  		          									
     		  		     )
     		  		)
     		  		    		   
     		     )
     		)
     		            	   
        )
   )
               	    
  )
                                     
  type
  (  						
      							    	 
     ordering
       type
       params=
       (
       
       )
       cstrs =
       (
    											   
    											   	  
    											   
       )
       kind =
       
       
       (
       								  
       LESS
       (
       									
       )
       								    
       								  
       EQUAL
       (
       									
       )
       								    
       								  
       GREATER
       (
       									
       )
       								    
       								  
       )
       								   
       
       														 
    											   
  								        
  )
                                     
  let
  (
   
     cmpVar
               	   
   (
    case
        (
     		
     		 
     		 x
     		 
     		 int
     		 (
     		 )
     		 								  
     		     										   
     		(
     		 case
     		     (
     		 	  
     		 	  y
     		 	  
     		 	  int
     		 	  (
     		 	  )
     		 	  								  
     		 	      										   
     		      ifthenelse
     		      (
     		       if
     		       (
     		        <
     		        (
     		            x
     		            y
     		        )
     		       )
     		       then
     		       (
     		        LESS
     		       )
     		       else
     		       (
     		        ifthenelse
     		        (
     		         if
     		         (
     		          >
     		          (
     		              x
     		              y
     		          )
     		         )
     		         then
     		         (
     		          GREATER
     		         )
     		         else
     		         (
     		          EQUAL
     		         ) 
     		        )
     		        	    											 
     		       ) 
     		      )
     		      	    											 
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
  let
  (
   
    zero
    Zero 
   							    		    
  )
                                     
  let
  (
   
    one
    One 
   							    		    
  )
                                     
  let
  (
   
    mkVar
   (
    case
        (
    	  x
         mkNode
         (
             zero
             x
             one
         )
        )
   )
       		    
  )
                                     
  let
  (
   
    cacheSize
    1999 
   							    		    
  )
                                     
  let
  (
   
    andslot1
    Array.create
    (
        cacheSize
        0
    ) 
   							    		    
  )
                                     
  let
  (
   
    andslot2
    Array.create
    (
        cacheSize
        0
    ) 
   							    		    
  )
                                     
  let
  (
   
    andslot3
    Array.create
    (
        cacheSize
        zero
    ) 
   							    		    
  )
                                     
  let
  (
   
    xorslot1
    Array.create
    (
        cacheSize
        0
    ) 
   							    		    
  )
                                     
  let
  (
   
    xorslot2
    Array.create
    (
        cacheSize
        0
    ) 
   							    		    
  )
                                     
  let
  (
   
    xorslot3
    Array.create
    (
        cacheSize
        zero
    ) 
   							    		    
  )
                                     
  let
  (
   
    notslot1
    Array.create
    (
        cacheSize
        0
    ) 
   							    		    
  )
                                     
  let
  (
   
    notslot2
    Array.create
    (
        cacheSize
        one
    ) 
   							    		    
  )
                                     
  let
  (
   
     hash
               	   
   (
    case
        (
     		
     		 x
     		(
     		 case
     		     (
     		 	  y
     		      mod
     		      (
     		          +
     		          (
     		              lsl
     		              (
     		                  x
     		                  1
     		              )
     		              y
     		          )
     		          cacheSize
     		      )
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
  let
  (
   
    not
   (
    case
        (
    	  n
         match
         n
         (
         
         case
         (
           Zero
           
           One
         ) 
         	        											 
           
           case
           (
            One
            
            Zero
           )
           													   
           
           case
           (
            
            Node
            
            (
             l
                 						 
            	v
            
            	id
            
            	r
            
            )
            									  
            
            
            let
            (
             (
                									  
              
               h
               mod
               (
                   id
                   cacheSize
               ) 
              							    		   
                									  
             )
            in
              ifthenelse
              (
               if
               (
                =
                (
                    id
                    Array.get
                    (
                     notslot1
                     h
                    )
                    												
                )
               )
               then
               (
                Array.get
                (
                 notslot2
                 h
                )
                												
               )
               else
               (
                
                let
                (
                 (
                    									  
                  
                   f
                   mkNode
                   (
                       not
                       (
                           l
                       )
                       v
                       not
                       (
                           r
                       )
                   ) 
                  							    		   
                    									  
                 )
                in
                  
                  sequence
                  (
                    Array.set
                    (
                     notslot1
                     h
                     id
                    )
                        									
                  ;
                    
                    sequence
                    (
                      Array.set
                      (
                       notslot2
                       h
                       f
                      )
                          									
                    ;
                      f
                    )
                        							
                  )
                      							
                )
                    									
               ) 
              )
              	    											 
            )
                									
           )
           													    
         	        											 
         	        											 
         )
         			   
        )
   )
       		    
  )
                                     
  let
  (
   
     and2
               	   
   (
    case
        (
     		
     		 n1
     		(
     		 case
     		     (
     		 	  n2
     		      match
     		      n1
     		      (
     		      
     		      case
     		      (
     		        
     		        Node
     		        
     		        (
     		         l1
     		             						 
     		        	v1
     		        
     		        	i1
     		        
     		        	r1
     		        
     		        )
     		        									  
     		        
     		        match
     		        n2
     		        (
     		        
     		        case
     		        (
     		          
     		          Node
     		          
     		          (
     		           l2
     		               						 
     		          	v2
     		          
     		          	i2
     		          
     		          	r2
     		          
     		          )
     		          									  
     		          
     		          
     		          let
     		          (
     		           (
     		              									  
     		            
     		             h
     		             hash
     		             (
     		                 i1
     		                 i2
     		             ) 
     		            							    		   
     		              									  
     		           )
     		          in
     		            ifthenelse
     		            (
     		             if
     		             (
     		              &&
     		              (
     		                  =
     		                  (
     		                      i1
     		                      Array.get
     		                      (
     		                       andslot1
     		                       h
     		                      )
     		                      												
     		                  )
     		                  =
     		                  (
     		                      i2
     		                      Array.get
     		                      (
     		                       andslot2
     		                       h
     		                      )
     		                      												
     		                  )
     		              )
     		             )
     		             then
     		             (
     		              Array.get
     		              (
     		               andslot3
     		               h
     		              )
     		              												
     		             )
     		             else
     		             (
     		              
     		              let
     		              (
     		               (
     		                  									  
     		                
     		                 f
     		                 match
     		                 cmpVar
     		                 (
     		                     v1
     		                     v2
     		                 )
     		                 (
     		                 
     		                 case
     		                 (
     		                   EQUAL
     		                   
     		                   mkNode
     		                   (
     		                       and2
     		                       (
     		                           l1
     		                           l2
     		                       )
     		                       v1
     		                       and2
     		                       (
     		                           r1
     		                           r2
     		                       )
     		                   )
     		                 ) 
     		                 	        											 
     		                   
     		                   case
     		                   (
     		                    LESS
     		                    
     		                    mkNode
     		                    (
     		                        and2
     		                        (
     		                            l1
     		                            n2
     		                        )
     		                        v1
     		                        and2
     		                        (
     		                            r1
     		                            n2
     		                        )
     		                    )
     		                   )
     		                   													   
     		                   
     		                   case
     		                   (
     		                    GREATER
     		                    
     		                    mkNode
     		                    (
     		                        and2
     		                        (
     		                            n1
     		                            l2
     		                        )
     		                        v2
     		                        and2
     		                        (
     		                            n1
     		                            r2
     		                        )
     		                    )
     		                   )
     		                   													    
     		                 	        											 
     		                 	        											 
     		                 )
     		                 			    
     		                							    		   
     		                  									  
     		               )
     		              in
     		                
     		                sequence
     		                (
     		                  Array.set
     		                  (
     		                   andslot1
     		                   h
     		                   i1
     		                  )
     		                      									
     		                ;
     		                  
     		                  sequence
     		                  (
     		                    Array.set
     		                    (
     		                     andslot2
     		                     h
     		                     i2
     		                    )
     		                        									
     		                  ;
     		                    
     		                    sequence
     		                    (
     		                      Array.set
     		                      (
     		                       andslot3
     		                       h
     		                       f
     		                      )
     		                          									
     		                    ;
     		                      f
     		                    )
     		                        							
     		                  )
     		                      							
     		                )
     		                    							
     		              )
     		                  									
     		             ) 
     		            )
     		            	    											 
     		          )
     		              									
     		        ) 
     		        	        											 
     		          
     		          case
     		          (
     		           Zero
     		           
     		           Zero
     		          )
     		          													   
     		          
     		          case
     		          (
     		           One
     		           
     		           n1
     		          )
     		          													    
     		        	        											 
     		        	        											 
     		        )
     		        			   
     		      ) 
     		      	        											 
     		        
     		        case
     		        (
     		         Zero
     		         
     		         Zero
     		        )
     		        													   
     		        
     		        case
     		        (
     		         One
     		         
     		         n2
     		        )
     		        													    
     		      	        											 
     		      	        											 
     		      )
     		      			   
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
  let
  (
   
     xor
               	   
   (
    case
        (
     		
     		 n1
     		(
     		 case
     		     (
     		 	  n2
     		      match
     		      n1
     		      (
     		      
     		      case
     		      (
     		        
     		        Node
     		        
     		        (
     		         l1
     		             						 
     		        	v1
     		        
     		        	i1
     		        
     		        	r1
     		        
     		        )
     		        									  
     		        
     		        match
     		        n2
     		        (
     		        
     		        case
     		        (
     		          
     		          Node
     		          
     		          (
     		           l2
     		               						 
     		          	v2
     		          
     		          	i2
     		          
     		          	r2
     		          
     		          )
     		          									  
     		          
     		          
     		          let
     		          (
     		           (
     		              									  
     		            
     		             h
     		             hash
     		             (
     		                 i1
     		                 i2
     		             ) 
     		            							    		   
     		              									  
     		           )
     		          in
     		            ifthenelse
     		            (
     		             if
     		             (
     		              &&
     		              (
     		                  =
     		                  (
     		                      i1
     		                      Array.get
     		                      (
     		                       andslot1
     		                       h
     		                      )
     		                      												
     		                  )
     		                  =
     		                  (
     		                      i2
     		                      Array.get
     		                      (
     		                       andslot2
     		                       h
     		                      )
     		                      												
     		                  )
     		              )
     		             )
     		             then
     		             (
     		              Array.get
     		              (
     		               andslot3
     		               h
     		              )
     		              												
     		             )
     		             else
     		             (
     		              
     		              let
     		              (
     		               (
     		                  									  
     		                
     		                 f
     		                 match
     		                 cmpVar
     		                 (
     		                     v1
     		                     v2
     		                 )
     		                 (
     		                 
     		                 case
     		                 (
     		                   EQUAL
     		                   
     		                   mkNode
     		                   (
     		                       xor
     		                       (
     		                           l1
     		                           l2
     		                       )
     		                       v1
     		                       xor
     		                       (
     		                           r1
     		                           r2
     		                       )
     		                   )
     		                 ) 
     		                 	        											 
     		                   
     		                   case
     		                   (
     		                    LESS
     		                    
     		                    mkNode
     		                    (
     		                        xor
     		                        (
     		                            l1
     		                            n2
     		                        )
     		                        v1
     		                        xor
     		                        (
     		                            r1
     		                            n2
     		                        )
     		                    )
     		                   )
     		                   													   
     		                   
     		                   case
     		                   (
     		                    GREATER
     		                    
     		                    mkNode
     		                    (
     		                        xor
     		                        (
     		                            n1
     		                            l2
     		                        )
     		                        v2
     		                        xor
     		                        (
     		                            n1
     		                            r2
     		                        )
     		                    )
     		                   )
     		                   													    
     		                 	        											 
     		                 	        											 
     		                 )
     		                 			    
     		                							    		   
     		                  									  
     		               )
     		              in
     		                
     		                sequence
     		                (
     		                  Array.set
     		                  (
     		                   andslot1
     		                   h
     		                   i1
     		                  )
     		                      									
     		                ;
     		                  
     		                  sequence
     		                  (
     		                    Array.set
     		                    (
     		                     andslot2
     		                     h
     		                     i2
     		                    )
     		                        									
     		                  ;
     		                    
     		                    sequence
     		                    (
     		                      Array.set
     		                      (
     		                       andslot3
     		                       h
     		                       f
     		                      )
     		                          									
     		                    ;
     		                      f
     		                    )
     		                        							
     		                  )
     		                      							
     		                )
     		                    							
     		              )
     		                  									
     		             ) 
     		            )
     		            	    											 
     		          )
     		              									
     		        ) 
     		        	        											 
     		          
     		          case
     		          (
     		           Zero
     		           
     		           n1
     		          )
     		          													   
     		          
     		          case
     		          (
     		           One
     		           
     		           not
     		           (
     		               n1
     		           )
     		          )
     		          													    
     		        	        											 
     		        	        											 
     		        )
     		        			   
     		      ) 
     		      	        											 
     		        
     		        case
     		        (
     		         Zero
     		         
     		         n2
     		        )
     		        													   
     		        
     		        case
     		        (
     		         One
     		         
     		         not
     		         (
     		             n2
     		         )
     		        )
     		        													    
     		      	        											 
     		      	        											 
     		      )
     		      			   
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
  let
  (
   
    hwb
   (
    case
        (
    	  n
         
         let
         (
          (
             									  
           
             h
                       	   
           (
            case
                (
             		
             		 i
             		(
             		 case
             		     (
             		 	  j
             		      ifthenelse
             		      (
             		       if
             		       (
             		        =
             		        (
             		            i
             		            j
             		        )
             		       )
             		       then
             		       (
             		        mkVar
             		        (
             		            i
             		        )
             		       )
             		       else
             		       (
             		        xor
             		        (
             		            and2
             		            (
             		                not
             		                (
             		                    mkVar
             		                    (
             		                        j
             		                    )
             		                )
             		                h
             		                (
             		                    i
             		                    -
             		                    (
             		                        j
             		                        1
             		                    )
             		                )
             		            )
             		            and2
             		            (
             		                mkVar
             		                (
             		                    j
             		                )
             		                g
             		                (
             		                    i
             		                    -
             		                    (
             		                        j
             		                        1
             		                    )
             		                )
             		            )
             		        )
             		       ) 
             		      )
             		      	    											 
             		     )
             		)
             		    		   
                )
           )
                       	   
             									  
           
             g
                       	   
           (
            case
                (
             		
             		 i
             		(
             		 case
             		     (
             		 	  j
             		      ifthenelse
             		      (
             		       if
             		       (
             		        =
             		        (
             		            i
             		            j
             		        )
             		       )
             		       then
             		       (
             		        mkVar
             		        (
             		            i
             		        )
             		       )
             		       else
             		       (
             		        xor
             		        (
             		            and2
             		            (
             		                not
             		                (
             		                    mkVar
             		                    (
             		                        i
             		                    )
             		                )
             		                h
             		                (
             		                    +
             		                    (
             		                        i
             		                        1
             		                    )
             		                    j
             		                )
             		            )
             		            and2
             		            (
             		                mkVar
             		                (
             		                    i
             		                )
             		                g
             		                (
             		                    +
             		                    (
             		                        i
             		                        1
             		                    )
             		                    j
             		                )
             		            )
             		        )
             		       ) 
             		      )
             		      	    											 
             		     )
             		)
             		    		   
                )
           )
                       	   
             									  
          )
         in
           h
           (
               0
               -
               (
                   n
                   1
               )
           )
         )
             									
        )
   )
       		    
  )
                                     
  let
  (
   
    seed
    ref
    (
        0
    ) 
   							    		    
  )
                                     
  let
  (
   
    random
   (
    case
        (
    	  ()
         
         sequence
         (
           :=
           (
               seed
               +
               (
                   *
                   (
                       
                        !
                        (
                        seed
                        )
                           							 
                       25173
                   )
                   17431
               )
           )
         ;
           >
           (
               land
               (
                   
                    !
                    (
                    seed
                    )
                       							 
                   1
               )
               0
           )
         )
             							
        )
   )
       		    
  )
                                     
  let
  (
   
    random_vars
   (
    case
        (
    	  n
         
         let
         (
          (
             									  
           
            vars
            Array.create
            (
                n
                false
            ) 
           							    		   
             									  
          )
         in
           
           sequence
           (
              for i
              0
              -
              (
                  n
                  1
              )
              Array.set
              (
               vars
               i
               random
               (
                   ()
               )
              )
                  									
                 														  
           ;
             vars
           )
               							
         )
             									
        )
   )
       		    
  )
                                     
  let
  (
   
     test_hwb
               	   
   (
    case
        (
     		
     		 bdd
     		(
     		 case
     		     (
     		 	  vars
     		      
     		      let
     		      (
     		       (
     		          									  
     		        
     		         ntrue
     		         ref
     		         (
     		             0
     		         ) 
     		        							    		   
     		          									  
     		       )
     		      in
     		        
     		        sequence
     		        (
     		           for i
     		           0
     		           -
     		           (
     		               Array.length
     		               (
     		                   vars
     		               )
     		               1
     		           )
     		           ifthenelse
     		           (
     		            if
     		            (
     		             Array.get
     		             (
     		              vars
     		              i
     		             )
     		             												
     		            )
     		            then
     		            (
     		             incr
     		             (
     		                 ntrue
     		             )
     		            )
     		            else
     		            (
     		            )
     		           )
     		               									   
     		              														  
     		        ;
     		          =
     		          (
     		              eval
     		              (
     		                  bdd
     		                  vars
     		              )
     		              ifthenelse
     		              (
     		               if
     		               (
     		                >
     		                (
     		                    
     		                     !
     		                     (
     		                     ntrue
     		                     )
     		                        							 
     		                    0
     		                )
     		               )
     		               then
     		               (
     		                Array.get
     		                (
     		                 vars
     		                 -
     		                 (
     		                     
     		                      !
     		                      (
     		                      ntrue
     		                      )
     		                         							 
     		                     1
     		                 )
     		                )
     		                												
     		               )
     		               else
     		               (
     		                false
     		               ) 
     		              )
     		              	    											 
     		          )
     		        )
     		            							
     		      )
     		          									
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
  let
  (
   
    main
   (
    case
        (
    	  ()
         
         let
         (
          (
             									  
           
            n
            ifthenelse
            (
             if
             (
              >=
              (
                  Array.length
                  (
                      Sys.argv
                  )
                  2
              )
             )
             then
             (
              int_of_string
              (
                  Array.get
                  (
                   Sys.argv
                   1
                  )
                  												
              )
             )
             else
             (
              22
             ) 
            )
            	    											  
           							    		   
             									  
          )
         in
           
           let
           (
            (
               									  
             
              ntests
              ifthenelse
              (
               if
               (
                >=
                (
                    Array.length
                    (
                        Sys.argv
                    )
                    3
                )
               )
               then
               (
                int_of_string
                (
                    Array.get
                    (
                     Sys.argv
                     2
                    )
                    												
                )
               )
               else
               (
                100
               ) 
              )
              	    											  
             							    		   
               									  
            )
           in
             
             let
             (
              (
                 									  
               
                bdd
                hwb
                (
                    n
                ) 
               							    		   
                 									  
              )
             in
               
               let
               (
                (
                   									  
                 
                  succeeded
                  ref
                  (
                      true
                  ) 
                 							    		   
                   									  
                )
               in
                 
                 sequence
                 (
                    for i
                    1
                    ntests
                    :=
                    (
                        succeeded
                        &&
                        (
                            
                             !
                             (
                             succeeded
                             )
                                							 
                            test_hwb
                            (
                                bdd
                                random_vars
                                (
                                    n
                                )
                            )
                        )
                    )
                       														  
                 ;
                   
                   sequence
                   (
                     ifthenelse
                     (
                      if
                      (
                       
                        !
                        (
                        succeeded
                        )
                           							 
                      )
                      then
                      (
                       print_string
                       (
                           "OK\n"
                       )
                      )
                      else
                      (
                       print_string
                       (
                           "FAILED\n"
                       )
                      ) 
                     )
                     	    											 
                   ;
                     exit
                     (
                         0
                     )
                   )
                       							
                 )
                     							
               )
                   									
             )
                 									
           )
               									
         )
             									
        )
   )
       		    
  )
                                     
  
   
   main
   (
       ()
   ) 
  							    		    
                                     
)