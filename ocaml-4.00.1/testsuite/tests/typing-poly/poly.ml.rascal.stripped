(
   open StdLabels
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        (
         t
         poly
         a
        )
   )
   type
   (  						
      fold
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        (
         fold
         poly
                               				 'b 
          arrow2 
          (
              f
              arrow
              b
              arrow
              a
              b
              arrow2 
              (
                  init
                  b
                  b
              )
          )
        )
   )
   let
   (
     f
    (
     case
         (
     	  l
          record
          (
           fold
           List.fold_left
           (
               l
           )
          )
         )
    )
   )
  field
  (
  f
  (
      ::
       (
       1
       ::
       (
       2
       ::
       (
       3
       []
       ) 
       ) 
       ) 
  )
  fold
  )
  (
      <"~f:","valuePath"("valuePath"([],["+"])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      <"~init:","constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
  )
   class
   (
     params = 
     (
     l
     )
     class name = ilist
     class expr = 
                 class_structure
                 (
                     l
                     l
                    method add
                      brackets4 
                      (
                          l
                          ::
                          (
                              x
                              l
                          )
                      )
                    method fold
                    	List.fold_left
                    	(
                    	    l
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow2 
                    	 (
                    	     f
                    	     arrow
                    	     a
                    	     arrow
                    	     b
                    	     a
                    	     arrow2 
                    	     (
                    	         init
                    	         a
                    	         a
                    	     )
                    	 )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = vlist
     class expr = 
                 class_structure
                 (
                    method add
                       poly
                       arrow
                       a
                       self
                    method fold
                       poly
                                             				 'b 
                        arrow2 
                        (
                            f
                            arrow
                            b
                            arrow
                            a
                            b
                            arrow2 
                            (
                                init
                                b
                                b
                            )
                        )
                 )
   )
   class
   (
     params = 
     (
     l
     )
     class name = ilist2
     class expr = 
                 class_structure
                 (
                    inherit
                     constr <"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"vlist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                     (
                     )
                     l
                     l
                    method add
                      brackets4 
                      (
                          l
                          ::
                          (
                              x
                              l
                          )
                      )
                    method fold
                      List.fold_left
                      (
                          l
                      )
                 )
   )
   let
   (
     ilist2
    (
     case
         (
     	  l
          class_structure
          (
             inherit
              constr <<>,[],"classPath"([],"vlist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
              (
              )
              l
              l
             method add
               brackets4 
               (
                   l
                   ::
                   (
                       x
                       l
                   )
               )
             method fold
               List.fold_left
               (
                   l
               )
          )
         )
    )
   )
   class
   (
     params = 
     (
     l
     )
     class name = ilist3
     class expr = 
                 class_structure
                 (
                    inherit
                     constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"vlist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                     (
                     )
                     l
                     l
                    method add
                      brackets4 
                      (
                          l
                          ::
                          (
                              x
                              l
                          )
                      )
                    method fold
                      List.fold_left
                      (
                          l
                      )
                 )
   )
   class
   (
     params = 
     (
     l
      list
      (
        a
      )
     )
     class name = ilist4
     class expr = 
                 class_structure
                 (
                     l
                     l
                    method add
                       poly
                       <>
                    method add
                      brackets4 
                      (
                          l
                          ::
                          (
                              x
                              l
                          )
                      )
                    method fold
                       poly
                                             				 'b 
                        arrow2 
                        (
                            f
                            arrow
                            b
                            arrow
                            a
                            b
                            arrow2 
                            (
                                init
                                b
                                b
                            )
                        )
                    method fold
                      List.fold_left
                      (
                          l
                      )
                 )
   )
   class
   (
     params = 
     (
     l
      list
      (
        a
      )
     )
     class name = ilist5
     class expr = 
                 class_structure
                 (
                     l
                     l
                    method add
                      brackets4 
                      (
                          l
                          ::
                          (
                              x
                              l
                          )
                      )
                    method fold
                       poly
                                             				 'b 
                        arrow2 
                        (
                            f
                            arrow
                            b
                            arrow
                            a
                            b
                            arrow2 
                            (
                                init
                                b
                                b
                            )
                        )
                    method fold2
                       poly
                                             				 'b 
                        arrow2 
                        (
                            f
                            arrow
                            b
                            arrow
                            a
                            b
                            arrow2 
                            (
                                init
                                b
                                b
                            )
                        )
                    method fold2
                      send fold
                      (
                       self
                      )
                      (
                          f
                          <"~init:","brackets"("functionApplication"("hash"("valuePath"("valuePath"([],"self")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"fold")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["f","init"])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                      )
                    method fold
                      List.fold_left
                      (
                          l
                      )
                 )
   )
   class
   (
     params = 
     (
     l
     )
     class name = ilist6
     class expr = 
                 class_structure
                 (
                    inherit
                     constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"vlist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                     (
                     )
                     l
                     l
                    method add
                      brackets4 
                      (
                          l
                          ::
                          (
                              x
                              l
                          )
                      )
                    method fold2
                       poly
                                             				 'b 
                        arrow2 
                        (
                            f
                            arrow
                            b
                            arrow
                            a
                            b
                            arrow2 
                            (
                                init
                                b
                                b
                            )
                        )
                    method fold2
                      send fold
                      (
                       self
                      )
                      (
                          f
                          <"~init:","brackets"("functionApplication"("hash"("valuePath"("valuePath"([],"self")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"fold")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["f","init"])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                      )
                    method fold
                      List.fold_left
                      (
                          l
                      )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = olist
     class expr = 
                 class_structure
                 (
                    method fold
                       poly
                                             				 'c 
                        arrow2 
                        (
                            f
                            arrow
                            a
                            arrow
                            c
                            c
                            arrow2 
                            (
                                init
                                c
                                c
                            )
                        )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = onil
     class expr = 
                 class_structure
                 (
                    inherit
                     constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                     (
                     )
                    method fold
                      init
                 )
   )
   class
   (
     params = 
     (
     hd
     tl
     )
     class name = ocons
     class expr = 
                 class_structure
                 (
                    inherit
                     constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                     (
                     )
                     hd
                     hd
                     tl
                     tl
                    method fold
                      f
                      (
                          hd
                          send fold
                          (
                           tl
                          )
                          (
                              f
                              init
                          )
                      )
                 )
   )
   class
   (
     params = 
     (
     hd
     tl
     )
     class name = ostream
     class expr = 
                 class_structure
                 (
                    inherit
                     constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                     (
                     )
                     hd
                     hd
                     tl
                     (
                     tl
                     :
                      ostream
                      (
                        a
                      )
                     )
                    method fold
                      f
                      (
                          hd
                          send fold
                          (
                           tl
                          )
                          (
                              f
                              init
                          )
                      )
                    method empty
                      false
                 )
   )
   class
   (
     params = 
     (
     hd
     tl
     )
     class name = ostream1
     class expr = 
                 class_structure
                 (
                    inherit
                     constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                     (
                     )
                     hd
                     hd
                     tl
                     tl
                    method hd
                      hd
                    method tl
                      tl
                    method fold
                      send fold
                      (
                       send tl
                       (
                        self
                       )
                      )
                      (
                          f
                          <"~init:","brackets"("functionApplication"("valuePath"("valuePath"([],"f")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["hash"("valuePath"("valuePath"([],"self")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"hd")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"valuePath"("valuePath"([],"init")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                      )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = vari
     class expr = 
                 class_structure
                 (
                    method m
                       poly
                                             				 'a 
                        arrow
                        <<[],[<"A",[],[]>,<"B",[],[]>,<"C",[],[]>],[]>,"a">
                        int
                        (
                        )
                    method m
                      (
                       case
                       (
                         A
                         1
                       ) 
                         case
                         (
                          pat_or
                          (
                           B
                           C
                          )
                          0
                         )
                      )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = vari
     class expr = 
                 class_structure
                 (
                    method m
                    	(
                    	 case
                    	 (
                    	   A
                    	   1
                    	 ) 
                    	   case
                    	   (
                    	    pat_or
                    	    (
                    	     B
                    	     C
                    	    )
                    	    0
                    	   )
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	 <<[],[<"A",[],[]>,<"B",[],[]>,<"C",[],[]>],[]>,"a">
                    	 int
                    	 (
                    	 )
                 )
   )
   module  V
    struct
    (
    type
    (  						
       v
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         <[],[<"A",[]>,<"B",[]>,<"C",[]>]>
    )
    let
    (
      m
      (
       (
        case
        (
          A
          1
        ) 
          case
          (
           v
           0
          )
       )
       :
       arrow
       <[],["typexprConstr2"("typeConstr"([],"v")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>
       int
       (
       )
      )
    )
    )
   class
   (
     params = 
     (
     )
     class name = varj
     class expr = 
                 class_structure
                 (
                    method m
                       poly
                                             				 'a 
                        arrow
                        <<[],["typexprConstr2"("typeConstr"(["extendedModulePath1"([],"V")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"v")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>,"a">
                        int
                        (
                        )
                    method m
                      V.m
                 )
   )
   module type T
    signature
    (
       sig_class
        (
       	class_description
       	params = 
       		(
       		)
       	name = vari
       	expr =
       	class_type
       	 fun
       		class_type
       		signature
       		class_signature
       		(
       		 fieldSpec3 
       		 (
       		     m
       		     poly
       		                           				 'a 
       		      arrow
       		      <<[],[<"A",[],[]>,<"B",[],[]>,<"C",[],[]>],[]>,"a">
       		      int
       		      (
       		      )
       		 )
       		)
        )
    )    								
   module  M0
    struct
    (
    class
    (
      params = 
      (
      )
      class name = vari
      class expr = 
                  class_structure
                  (
                     method m
                        poly
                                              				 'a 
                         arrow
                         <<[],[<"A",[],[]>,<"B",[],[]>,<"C",[],[]>],[]>,"a">
                         int
                         (
                         )
                     method m
                       (
                        case
                        (
                          A
                          1
                        ) 
                          case
                          (
                           pat_or
                           (
                            B
                            C
                           )
                           0
                          )
                       )
                  )
    )
    )
   module  M
    M0
    T
   let
   (
     v
     new M.vari 
   )
  send m
  (
   v
  )
  (
      A
  )
   class
   (
     params = 
     (
     x
     y
     )
     class name = point
     class expr = 
                 class_structure
                 (
                     x
                     x
                     y
                     y
                    method x
                      x
                    method y
                      y
                 )
   )
   class
   (
     params = 
     (
     x
     y
     color
     )
     class name = color_point
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                point
                                x
                                y
                            )
                     (
                     )
                     color
                     color
                    method color
                      color
                 )
   )
   class
   (
     params = 
     (
     p
     point
     r
     )
     class name = circle
     class expr = 
                 class_structure
                 (
                     p
                     brackets2 
                     (
                         p
                         point
                         (
                         )
                     )
                     r
                     r
                    method distance
                       poly
                                             				 'a 
                        arrow
                        <"classPath"([],"point")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
                        float
                        (
                        )
                    method distance
                      let
                      (
                       (
                         dx
                         -
                         (
                             send x
                             (
                              p
                             )
                             send x
                             (
                              p'
                             )
                         ) 
                         dy
                         -
                         (
                             send y
                             (
                              p
                             )
                             send y
                             (
                              p'
                             )
                         ) 
                       )
                      in
                        let
                        (
                         (
                           d
                           -.
                           (
                               sqrt
                               (
                                   float
                                   (
                                       +
                                       (
                                           *
                                           (
                                               dx
                                               dx
                                           )
                                           *
                                           (
                                               dy
                                               dy
                                           )
                                       )
                                   )
                               )
                               float
                               (
                                   r
                               )
                           ) 
                         )
                        in
                          ifthenelse
                          (
                           if
                           (
                            <
                            (
                                d
                                0.
                            )
                           )
                           then
                           (
                            0.
                           )
                           else
                           (
                            d
                           ) 
                          )
                        )
                      )
                 )
   )
   let
   (
     p0
     new point
     (
         <"~x:","constant"("posInt"("3")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         <"~y:","constant"("posInt"("5")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     ) 
   )
   let
   (
     p1
     new point
     (
         <"~x:","constant"("posInt"("10")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         <"~y:","constant"("posInt"("13")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     ) 
   )
   let
   (
     cp
     new color_point
     (
         <"~x:","constant"("posInt"("12")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         <"~y:","brackets"("constant"("negInt"("-5")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         <"~color:","constant"("stringLiteral"("\"green\"")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     ) 
   )
   let
   (
     c
     new circle
     (
         p0
         <"~r:","constant"("posInt"("2")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     ) 
   )
   let
   (
     d
     send distance
     (
      c
     )
     (
         cp
     ) 
   )
   let
   (
     f
    (
     case
         (
     	  x
     	  <[<"m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          (
          x
          :
          <[<"m","polytype2"(["b"],"arrow1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  x
     	  <[<"m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"list")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          (
          x
          :
          <[<"m","polytype2"(["b"],"arrow1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          )
         )
    )
   )
   class
   (
     params = 
     (
     )
     class name = id
     class expr = 
                 class_structure
                 (
                    method id
                       poly
                                             				 'a 
                        arrow
                        a
                        a
                    method id
                      x
                 )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
     ) 
     name = id_spec
     expr =
      class_type
      signature
      class_signature
      (
       fieldSpec3 
       (
           id
           poly
           arrow
           a
           a
       )
      )
   )
   class
   (
     params = 
     (
     )
     class name = id_impl
     class expr = 
                 class_structure
                 (
                    method id
                      x
                 )
   )
   class
   (
     params = 
     (
     )
     class name = a
     class expr = 
                 class_structure
                 (
                    method m
                      send id
                      (
                       (
                       new b
                       :
                       id_spec
                       (
                       )
                       )
                      )
                      (
                          true
                      )
                 )
     params = 
     (
     )
     class name = b
     class expr = 
                 class_structure
                 (
                    method id
                      x
                 )
   )
   class
   (
     params = 
     (
     )
     class name = id1
     class expr = 
                 class_structure
                 (
                    method id
                       poly
                                             				 'b 
                        arrow
                        b
                        a
                    method id
                      x
                 )
   )
   class
   (
     params = 
     (
     x
     a
     )
     class name = id2
     class expr = 
                 class_structure
                 (
                    method id
                       poly
                                             				 'b 
                        arrow
                        b
                        a
                    method id
                      x
                 )
   )
   class
   (
     params = 
     (
     x
     )
     class name = id3
     class expr = 
                 class_structure
                 (
                     x
                     x
                    method id
                       poly
                                             				 'a 
                        arrow
                        a
                        a
                    method id
                      x
                 )
   )
   class
   (
     params = 
     (
     ()
     )
     class name = id4
     class expr = 
                 class_structure
                 (
                     r
                     None
                    method id
                       poly
                                             				 'a 
                        arrow
                        a
                        a
                    method id
                      match
                      r
                      (
                      case
                      (
                        None
                        sequence
                        (
                          Array.set
                          (
                           r
                           Some
                              x
                          )
                        ;
                          x
                        )
                      ) 
                        case
                        (
                         Some
                         y
                         y
                        )
                      )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                       poly
                                             				 'a  'b 
                        arrow
                        a
                        arrow
                        b
                        a
                    method m
                      x
                 )
   )
   let
   (
     f1
    (
     case
         (
     	  f
     	  id
     	  (
     	  )
          (
           send id
           (
            f
           )
           (
               1
           )
          	send id
          	(
          	 f
          	)
          	(
          	    true
          	)
          )
         )
    )
   )
   let
   (
     f2
    (
     case
         (
     	  f
          (
           send id
           (
            (
            f
            :
            id
            (
            )
            )
           )
           (
               1
           )
          	send id
          	(
          	 (
          	 f
          	 :
          	 id
          	 (
          	 )
          	 )
          	)
          	(
          	    true
          	)
          )
         )
    )
   )
   let
   (
     f3
    (
     case
         (
     	  f
          (
           send id
           (
            f
           )
           (
               1
           )
          	send id
          	(
          	 f
          	)
          	(
          	    true
          	)
          )
         )
    )
   )
   let
   (
     f4
    (
     case
         (
     	  f
          sequence
          (
            ignore
            (
                (
                f
                :
                id
                (
                )
                )
            )
          ;
            (
             send id
             (
              f
             )
             (
                 1
             )
            	send id
            	(
            	 f
            	)
            	(
            	    true
            	)
            )
          )
         )
    )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                       poly
                                             				 'a 
                        arrow
                        <"classPath"([],"id")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
                        tuple
                        (
                         int
                         (
                         )
                          bool
                          (
                          )
                        )
                    method m
                      (
                       send id
                       (
                        f
                       )
                       (
                           1
                       )
                      	send id
                      	(
                      	 f
                      	)
                      	(
                      	    true
                      	)
                      )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = id2
     class expr = 
                 class_structure
                 (
                    method id
                       poly
                                             				 'a 
                        arrow
                        a
                        a
                    method id
                      x
                    method mono
                      x
                 )
   )
   let
   (
     app
     send m
     (
      new c
     )
     (
         new id2
     ) 
   )
   type
   (  						
      foo
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         list
         (
            foo
            (
              a
            )
         )
   )
   class
   (
     params = 
     (
     x
     a
     )
     class name = bar
     class expr = 
                 class_structure
                 (
                 )
   )
   type
   (  						
      foo
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         bar
         (
            foo
            (
              a
            )
         )
   )
  (
   case
   (
   x
   send m
   (
    (
    x
    :
    <<[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"b">
    )
   )
   )
  )
  (
   case
   (
   x
   send m
   (
    (
    x
    :
    <<[<"m","polytype2"(["a"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"list")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"b">
    )
   )
   )
  )
   let
   (
     f
    (
     case
         (
     	  x
          send m
          (
           (
           x
           :
           <<[<"m","polytype2"(["a"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<<[<"n","polytype1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"b">
           )
          )
         )
    )
   )
  (
   case
   (
   x
   <<[<"p","polytype2"(["a"],<<[<"m","polytype1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,<"n","polytype1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"b">
   send p
   (
    x
   )
   )
  )
  (
   case
   (
   x
   <<[<"m","polytype2"(["a"],<"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"p","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("d")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"c">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"d">
   send m
   (
    x
   )
   )
  )
  (
   case
   (
   x
   <[<"m","polytype2"(["a"],<[<"p","polytype1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   send m
   (
    x
   )
   )
  )
   type
   (  						
      sum
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
        T
        (
         <[<"id","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
        )
        )
   )
  (
   case
   (
   T
   x
   send id
   (
    x
   )
   )
  )
   type
   (  						
      record
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         r
         poly
         <[<"id","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
        )
   )
  (
   case
   (
   x
   send id
   (
    field
    (
    x
    r
    )
   )
   )
  )
  (
   case
   (
   patternRec 
   (
       r
       x
   )
   send id
   (
    x
   )
   )
  )
   class
   (
     params = 
     (
     )
     class name = myself
     class expr = 
                 class_structure
                 (
                    method self
                    	(
                    	 case
                    	 (
                    	 _
                    	 self
                    	 )
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	 a
                    	 b
                 )
   )
   class
   (
     params = 
     (
     )
     class name = number
     class expr = 
                 class_structure
                 (
                     num
                     0
                    method num
                      num
                    method succ
                      brackets4 
                      (
                          num
                          +
                          (
                              num
                              1
                          )
                      )
                    method prev
                      send switch
                      (
                       self
                      )
                      (
                          <"~zero:","brackets"("fun"("multipleMatching"(["patternConstant"("emptyParenthesis"()[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"functionApplication"("valuePath"("valuePath"([],"failwith")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["constant"("stringLiteral"("\"zero\"")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                          <"~prev:","brackets"("fun"("multipleMatching"(["patternValueName"("x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"valuePath"("valuePath"([],"x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                      )
                    method switch
                    	(
                    	 case
                    	 (
                    	   zero
                    	   (
                    	   case
                    	   (
                    	   prev
                    	   ifthenelse
                    	   (
                    	    if
                    	    (
                    	     =
                    	     (
                    	         num
                    	         0
                    	     )
                    	    )
                    	    then
                    	    (
                    	     zero
                    	     (
                    	         ()
                    	     )
                    	    )
                    	    else
                    	    (
                    	     prev
                    	     (
                    	         brackets4 
                    	         (
                    	             num
                    	             -
                    	             (
                    	                 num
                    	                 1
                    	             )
                    	         )
                    	     )
                    	    ) 
                    	   )
                    	   )
                    	   )
                    	 )													
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow2 
                    	 (
                    	     zero
                    	     arrow
                    	     unit
                    	     (
                    	     )
                    	     a
                    	     arrow2 
                    	     (
                    	         prev
                    	         arrow
                    	         self
                    	         a
                    	         a
                    	     )
                    	 )
                 )
   )
   let
   (
     id
    (
     case
         (
     	  x
          x
         )
    )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method id
                    	id
                    	poly
                    	                      				 'a 
                    	 arrow
                    	 a
                    	 a
                 )
   )
   class
   (
     params = 
     (
     )
     class name = c'
     class expr = 
                 class_structure
                 (
                    inherit
                     constr c
                     (
                     )
                    method id
                      id
                 )
   )
   class
   (
     params = 
     (
     )
     class name = d
     class expr = 
                 class_structure
                 (
                    inherit
                     constr c
                     (
                     )
                     count
                     0
                    method id
                      sequence
                      (
                        Array.set
                        (
                         count
                         +
                         (
                             count
                             1
                         )
                        )
                      ;
                        x
                      )
                    method count
                      count
                    method old
                    	send id
                    	(
                    	 c
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	 a
                    	 a
                 )
   )
   class
   (
     params = 
     (
     l
     )
     class name = olist
     class expr = 
                 class_structure
                 (
                     l
                     l
                    method fold
                    	List.fold_right
                    	(
                    	    l
                    	)
                    	poly
                    	                      				 'b 
                    	 arrow2 
                    	 (
                    	     f
                    	     arrow
                    	     a
                    	     arrow
                    	     b
                    	     b
                    	     arrow2 
                    	     (
                    	         init
                    	         b
                    	         b
                    	     )
                    	 )
                    method cons
                      brackets4 
                      (
                          l
                          ::
                          (
                              a
                              l
                          )
                      )
                 )
   )
   let
   (
     sum
    (
     case
         (
     	  l
     	  <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          send fold
          (
           l
          )
          (
              <"~f:","brackets"("fun"("multipleMatching"(["patternValueName"("x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"patternValueName"("acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"infix3"("valuePath"("valuePath"([],"x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"+","valuePath"("valuePath"([],"acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
              <"~init:","constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          )
         )
    )
   )
   let
   (
     count
    (
     case
         (
     	  l
     	  <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          send fold
          (
           l
          )
          (
              <"~f:","brackets"("fun"("multipleMatching"(["anyPattern"()[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"patternValueName"("acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"infix3"("valuePath"("valuePath"([],"acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"+","constant"("posInt"("1")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
              <"~init:","constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          )
         )
    )
   )
   let
   (
      append
    (
     case
         (
      		 l
      		 <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      		(
      		 case
      		     (
      		 	  l'
      		 	  <"tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      		      send fold
      		      (
      		       l
      		      )
      		      (
      		          <"~init:","valuePath"("valuePath"([],"l\'")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      		          <"~f:","brackets"("fun"("multipleMatching"(["patternValueName"("x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"patternValueName"("acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"functionApplication"("hash"("valuePath"("valuePath"([],"acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"cons")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["valuePath"("valuePath"([],"x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      		      )
      		     )
      		)
         )
    )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        unit
        (
        )
   )
   class
   (
     params = 
     (
     )
     class name = o
     class expr = 
                 class_structure
                 (
                    method x
                    	(
                    	 case
                    	 (
                    	 _
                    	 ()
                    	 )
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	  t
                    	  (
                    	    <[<"A",[]>],"a">
                    	  )
                    	 unit
                    	 (
                    	 )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                      new d
                      (
                          ()
                      )
                 )
     params = 
     (
     <"x",[],["constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
     ()
     )
     class name = d
     class expr = 
                 class_structure
                 (
                 )
   )
   class
   (
     params = 
     (
     <"x",[],["constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
     ()
     )
     class name = d
     class expr = 
                 class_structure
                 (
                 )
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                      new d
                      (
                          ()
                      )
                 )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
     ) 
     name = numeral
     expr =
      class_type
      signature
      class_signature
      (
       fieldSpec3 
       (
           fold
           poly
           arrow
           arrow
           a
           a
           arrow
           a
           a
       )
      )
   )
   class
   (
     params = 
     (
     )
     class name = zero
     class expr = 
                 class_structure
                 (
                    method fold
                      x
                 )
   )
   class
   (
     params = 
     (
     n
     numeral
     )
     class name = next
     class expr = 
                 class_structure
                 (
                    method fold
                      send fold
                      (
                       n
                      )
                      (
                          f
                          f
                          (
                              x
                          )
                      )
                 )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
     ) 
     name = node_type
     expr =
      class_type
      signature
      class_signature
      (
       fieldSpec3 
       (
           as_variant
           poly
           <"Node",["typexprConstr2"("typeConstr"([],"node_type")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
       )
      )
   )
   class
   (
     params = 
     (
     )
     class name = node
     class expr = 
                 class_structure
                 (
                    method as_variant
                    	Node
                    	   brackets2 
                    	   (
                    	       self
                    	       node_type
                    	       (
                    	       )
                    	   )
                    	poly
                    	                      				 'a 
                    	 <[<"Node",["typexprConstr2"("typeConstr"([],"node_type")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>],"a">
                 )
   )
   class
   (
     params = 
     (
     )
     class name = node
     class expr = 
                 class_structure
                 (
                    method as_variant
                      Node
                         brackets2 
                         (
                             self
                             node_type
                             (
                             )
                         )
                 )
   )
   type
   (  						
      bad
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         bad
         poly
                               				 'a 
           ref
           (
              option
              (
                a
              )
           )
        )
   )
   let
   (
     bad
     record
     (
      bad
      ref
      (
          None
      )
     ) 
   )
   type
   (  						
      bad2
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         bad2
         poly
                               				 'a 
           option
           (
              ref
              (
                 option
                 (
                   a
                 )
              )
           )
        )
   )
   let
   (
     bad2
     record
     (
      bad2
      None
     ) 
   )
  setfield
  (
  bad2
  bad2
  Some
     ref
     (
         None
     )
  )
   let
   (
      f
    (
     case
         (
      		 x
      		 <[<"m","polytype2"(["a"],<<[<"p","polytype1"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"b">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
      		(
      		 case
      		     (
      		 	  y
      		 	  b
      		      ()
      		     )
      		)
         )
    )
   )
   let
   (
      f
    (
     case
         (
      		 x
      		 <[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<<[<"p","polytype1"("star"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"b">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
      		(
      		 case
      		     (
      		 	  y
      		 	  b
      		      ()
      		     )
      		)
         )
    )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        <[],[<"A",["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>]>
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                    	(
                    	 case
                    	 (
                    	 x
                    	 send m
                    	 (
                    	  self
                    	 )
                    	 (
                    	     x
                    	 )
                    	 )
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	 <["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"a">
                    	 unit
                    	 (
                    	 )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                    	(
                    	 case
                    	 (
                    	   A
                    	   x'
                    	   send m
                    	   (
                    	    self
                    	   )
                    	   (
                    	       x'
                    	   )
                    	 ) 
                    	   case
                    	   (
                    	    _
                    	    failwith
                    	    (
                    	        "c#m"
                    	    )
                    	   )
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	 <["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"a">
                    	 unit
                    	 (
                    	 )
                 )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                    	(
                    	 case
                    	 (
                    	 x
                    	 send m
                    	 (
                    	  self
                    	 )
                    	 (
                    	     x
                    	 )
                    	 )
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	 <["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"a">
                    	 a
                 )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                    	(
                    	 case
                    	 (
                    	 x
                    	 A
                    	 )
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	  option
                    	  (
                    	    a
                    	  )
                    	 <[<"A",[]>],"a">
                 )
   )
   class
   (
     params = 
     (
     )
     class name = visitor
     class expr = 
                 class_structure
                 (
                    method caseNil
                       poly
                       a
                 )
     params = 
     (
     )
     class name = int_list
     class expr = 
                 class_structure
                 (
                    method visit
                       poly
                                             				 'a 
                        arrow
                         visitor
                         (
                           a
                         )
                        a
                 )
   )
   type
   (  						
      list_visitor
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
        <[<"caseNil","polytype1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,<"caseCons","polytype1"("arrow1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"arrow1"("typexprConstr1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"list")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   type
   (  						
      alist
        type
        params=
        (
         b
        )
        cstrs =
        (
        )
        kind =
        <[<"visit","polytype2"(["a"],"arrow1"("typeExprBrackets2"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"typeConstr"([],"list_visitor")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   class_type
   (
     class_type_declaration
     params = 
     (
     ) 
     name = ct
     expr =
      class_type
       s
       fieldSpec3 
       (
           fold
           poly
           arrow
           arrow
           b
           arrow
           s
           b
           arrow
           b
           b
       )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         f
         poly
                               				 'a  'b 
          arrow
          arrow
          b
          arrow
          <"classPath"([],"ct")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
          b
          b
        )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        u
        (
        )
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        t
        (
        )
   )
   class
   (
     params = 
     (
     )
     class name = a
     class expr = 
                 class_structure
                 (
                    classConstraint 
                    (
                        t
                        <"A",["typexprConstr1"("tagg"("t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
                    )
                 )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <[],[<"A",["typexprConstr1"("typexprConstr2"("typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>]>
   )
   type
   (  						
      t
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
         typeConstraint 
         (
             a
             b
         )
      u
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
         t
            (
             a
        	 b				
            ) 
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        a
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         t
         (
           int
           (
           )
         )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         typeConstraint 
         (
             a
             int
             (
             )
         )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        a
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         t
         (
            u
            (
              a
            )
         )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        a
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         t
         (
            u
            (
              a
            )
         )
         typeConstraint 
         (
             a
             int
             (
             )
         )
   )
   type
   (  						
      g
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        int
        (
        )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        unit
        (
        )
         typeConstraint 
         (
             a
             g
             (
             )
         )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        a
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         t
         (
            u
            (
              a
            )
         )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        a
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         t
         (
            u
            (
              a
            )
         )
         typeConstraint 
         (
             a
             int
             (
             )
         )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        <[<"m","polytype1"("typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"v")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         u
         (
            list
            (
              a
            )
         )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        a
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        (
        A
        (
          t
          (
            a
          )
        )
        )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        <[<"a","polytype1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
  (
   case
   (
   x
   <"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
   (
   x
   :
    t
    (
      b
    )
   )
   )
  )
   type
   (  						
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
        A
        (
        )
        B
        (
        )
        )
   )
  (
   case
   (
     (
      A
     	_
     )
     1
   ) 
     case
     (
      (
       _
      	A
      )
      2
     )
     case
     (
      (
       _
      	B
      )
      3
     )
  )
  (
   case
   (
     (
      A
     	_
     )
     1
   ) 
     case
     (
      (
       _
      	pat_or
      	(
      	 A
      	 B
      	)
      )
      2
     )
  )
  (
   case
   (
     (
      Some
      A
     	_
     )
     1
   ) 
     case
     (
      (
       Some
       _
      	A
      )
      2
     )
     case
     (
      (
       None
      	A
      )
      3
     )
     case
     (
      (
       _
      	B
      )
      4
     )
  )
  (
   case
   (
     (
      Some
      A
     	A
     )
     1
   ) 
     case
     (
      (
       Some
       A
      	B
      )
      1
     )
     case
     (
      (
       Some
       _
      	A
      )
      2
     )
     case
     (
      (
       None
      	A
      )
      3
     )
     case
     (
      (
       _
      	B
      )
      4
     )
  )
  (
   case
   (
     (
      A
     	A
     )
     1
   ) 
     case
     (
      (
       A
      	B
      )
      2
     )
     case
     (
      (
       B
      	_
      )
      3
     )
  )
  (
   case
   (
     (
      A
     	A
     )
     1
   ) 
     case
     (
      (
       B
      	A
      )
      2
     )
     case
     (
      (
       _
      	B
      )
      3
     )
  )
  (
   case
   (
     (
      pat_or
      (
       A
       B
      )
     	_
     )
     0
   ) 
     case
     (
      (
       _
      	pat_or
      	(
      	 A
      	 B
      	)
      )
      1
     )
  )
  (
   case
   (
     (
      B
     	1
     )
     1
   ) 
     case
     (
      (
       _
      	1
      )
      2
     )
  )
  (
   case
   (
     (
      1
     	B
     )
     1
   ) 
     case
     (
      (
       1
      	_
      )
      2
     )
  )
   type
   (  						
      a
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
        arrow
        a
        unit
        (
        )
         typeConstraint 
         (
             a
             <"B",[<"typeExprBrackets2"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"typeConstr"([],"b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">]>
         )
      b
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
        arrow
        b
        unit
        (
        )
         typeConstraint 
         (
             b
             <"A",[<"typeExprBrackets2"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"typeConstr"([],"a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">]>
         )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
       "a"
       "b"
     ) 
     name = a
     expr =
      class_type
      signature
      class_signature
      (
       fieldSpec3 
       (
           b
           poly
           <<["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"classPath"([],"b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,"b">
       )
       fieldSpec3 
       (
           as_a
           poly
            a
               (
                a
           	 b				
               ) 
       )
      )
     class_type_declaration
     params = 
     (
       "a"
       "b"
     ) 
     name = b
     expr =
      class_type
      signature
      class_signature
      (
       fieldSpec3 
       (
           a
           poly
           <<["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"classPath"([],"a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,"a">
       )
       fieldSpec3 
       (
           as_b
           poly
            b
               (
                a
           	 b				
               ) 
       )
      )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
       "b"
     ) 
     name = ca
     expr =
      class_type
       s
       fieldSpec1 
       (
           class_type
            fun
           	class_type
           	constr a
           	(
           	 s
           		b
           	)
       )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
       "a"
     ) 
     name = cb
     expr =
      class_type
       s
       fieldSpec1 
       (
           class_type
            fun
           	class_type
           	constr b
           	(
           	 a
           		s
           	)
       )
   )
   type
   (  						
      bt
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <"typexprConstr1"("typexprConstr1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"ca")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"cb")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method m
                      1
                 )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             method m
               1
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             method n
               1
             method m
               send n
               (
                self
               )
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             method n
               1
             method m
               send n
               (
               )
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             method n
               1
             method m
               2
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             classConstraint 
             (
                 s
                 <[<"n","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
             )
             method m
               1
          )
         )
    )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method x
                      1
                    method m
                      class_structure
                      (
                         method x
                           3
                         method m
                           self
                      )
                 )
   )
   let
   (
     o
     class_structure
     (
        method x
          1
        method m
          class_structure
          (
             method x
               3
             method m
               self
          )
     )
   )
  (
   case
   (
   x
   <<[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["b"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"foo">
   (
   x
   :
   <[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<<[<"m","polytype2"(["b"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"bar">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   )
  )
   type
   (  						
      foo
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        <[<"m","polytype2"(["b"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   type
   (  						
      foo'
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   type
   (  						
      bar
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        <[<"m","polytype2"(["b"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   type
   (  						
      bar'
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   let
   (
     f
    (
     case
         (
     	  x
     	  foo'
     	  (
     	  )
          (
          x
          :
          bar'
          (
          )
          )
         )
    )
   )
  (
   case
   (
   x
   <[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   (
   x
   :
   <<[<"m","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"bar">
   )
   )
  )
  (
   case
   (
   x
   <[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   (
   x
   :
   <<[<"m","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"bar">
   )
   )
  )
  (
   case
   (
   x
   <<[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"foo">
   (
   x
   :
   <[<"m","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   )
  )
   let
   (
     f
    (
     case
         (
     	  x
          brackets3 
          (
              x
              <[<"m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeExprBrackets"(<"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["c"],"arrow1"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
              <<[<"m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeExprBrackets"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"foo">
          )
         )
    )
   )
   module  M
    struct
    (
    let
    (
      f
     (
      case
          (
      	  x
      	  <<[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"foo">
           ()
          )
     )
    )
    )
    signature
    (
     sig_value f
     value_description
     arrow
     <[<"m","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
     unit
     (
     )
     (
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         <<[<"m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"foo">
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          <[<"m","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<[<"m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
          a
         )
         cstrs =
         (
         )
         kind =
         int
         (
         )
    )
    type
    (  						
       u
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         <[<"m","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
           a
          )
          cstrs =
          (
          )
          kind =
     )
     type
     (  						
        u
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          <[<"m","polytype2"(["a"],"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
          a
         )
         cstrs =
         (
         )
         kind =
         int
         (
         )
    )
    let
    (
      f
     (
      case
          (
      	  x
      	  <[<"m","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
           send m
           (
            x
           )
          )
     )
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
           a
          )
          cstrs =
          (
          )
          kind =
     )
     sig_value f
     value_description
     arrow
     <[<"m","polytype2"(["a"],"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
     int
     (
     )
     (
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
          a
         )
         cstrs =
         (
         )
         kind =
         int
         (
         )
    )
    let
    (
      f
     (
      case
          (
      	  x
           send m
           (
            x
           )
          )
     )
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
           a
          )
          cstrs =
          (
          )
          kind =
     )
     sig_value f
     value_description
     arrow
     <[<"m","polytype2"(["a"],"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
     int
     (
     )
     (
     )
    )
   let
   (
      f
    (
     case
         (
      		 x
      		(
      		 case
      		     (
      		 	  y
      		      sequence
      		      (
      		        ignore
      		        (
      		            brackets2 
      		            (
      		                x
      		                <<[<"m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[[]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"c">
      		            )
      		        )
      		      ;
      		        sequence
      		        (
      		          ignore
      		          (
      		              brackets2 
      		              (
      		                  y
      		                  <<[<"m","polytype2"(["b"],"arrow1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"star"("tagg"("d")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[[]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>,"d">
      		              )
      		          )
      		        ;
      		          =
      		          (
      		              x
      		              y
      		          )
      		        )
      		      )
      		     )
      		)
         )
    )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <[],[<"A",[]>,<"B",[]>]>
   )
   type
   (  						
      v
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        t
        (
        )
   )
  (
   case
   (
   x
   brackets3 
   (
       x
       t
       (
       )
       v
       (
       )
   )
   )
  )
   type
   (  						
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <[],["typexprConstr2"("typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>
   )
  (
   case
   (
   x
   brackets3 
   (
       x
       u
       (
       )
       v
       (
       )
   )
   )
  )
  (
   case
   (
   x
   brackets3 
   (
       x
       v
       (
       )
       u
       (
       )
   )
   )
  )
   type
   (  						
      v
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <[],["typexprConstr2"("typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>
   )
  (
   case
   (
   x
   brackets3 
   (
       x
       u
       (
       )
       v
       (
       )
   )
   )
  )
   type
   (  						
      p
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <[<"x","polytype1"("typexprConstr2"("typeConstr"([],"p")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
   type
   (  						
      q
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        <[<"x","polytype1"("typexprConstr2"("typeConstr"([],"p")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>
   )
  (
   case
   (
   x
   brackets3 
   (
       x
       q
       (
       )
       p
       (
       )
   )
   )
  )
  (
   case
   (
   x
   brackets3 
   (
       x
       p
       (
       )
       q
       (
       )
   )
   )
  )
   let
   (
     f1
    (
     case
         (
     	  x
          brackets3 
          (
              x
              <[<"m","polytype2"(["a"],"arrow1"("typeExprBrackets"(<<[<"p","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
              <[<"m","polytype2"(["b"],"arrow1"("typeExprBrackets"(<<[<"p","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,<"q","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>,"b">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          )
         )
    )
   )
   let
   (
     f2
    (
     case
         (
     	  x
          brackets3 
          (
              x
              <[<"m","polytype2"(["a"],"arrow1"("typeExprBrackets"(<<[<"p","polytype1"(<[<"a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
              <[<"m","polytype2"(["b"],"arrow1"("typeExprBrackets"(<<[<"p","polytype1"(<[<"a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,<"b","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>,"b">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          )
         )
    )
   )
   let
   (
     f3
    (
     case
         (
     	  x
          brackets3 
          (
              x
              <[<"m","polytype2"(["a"],"arrow1"("typeExprBrackets"(<<[<"p","polytype1"(<[<"a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,<"b","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
              <[<"m","polytype2"(["b"],"arrow1"("typeExprBrackets"(<<[<"p","polytype1"(<[<"a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>,"b">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          )
         )
    )
   )
   let
   (
     f4
    (
     case
         (
     	  x
          brackets3 
          (
              x
              <[<"p","polytype1"(<[<"a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,<"b","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>
              <[<"p","polytype1"(<[<"a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>
          )
         )
    )
   )
   let
   (
     f5
    (
     case
         (
     	  x
          brackets3 
          (
              x
              <[<"m","polytype2"(["a"],<<[],[<"A",[<[<"p","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>],[]>],[]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
              <[<"m","polytype2"(["a"],<<[],[<"A",[],[]>],[]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          )
         )
    )
   )
   let
   (
     f6
    (
     case
         (
     	  x
          brackets3 
          (
              x
              <[<"m","polytype2"(["a"],<<[],[<"A",[],[]>],[]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
              <[<"m","polytype2"(["a"],<<[],[<"A",[<[<"p","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>],[]>],[]>,"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  x
          ifthenelse
          (
           if
           (
            true
           )
           then
           (
            (
            x
            :
            <[<"m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
            )
           )
           else
           (
            x
           ) 
          )
         )
    )
   )
  (
   case
   (
   x
   send m
   (
    f
    (
        x
    )
   )
   )
  )
   let
   (
     f
    (
     case
         (
     	  (
     	   x
     	  	y
     	  )
          ifthenelse
          (
           if
           (
            true
           )
           then
           (
            (
            x
            :
            <[<"m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
            )
           )
           else
           (
            x
           ) 
          )
         )
    )
   )
  (
   case
   (
   x
   send m
   (
    f
    (
        (
         x
        	x
        )
    )
   )
   )
  )
   let
   (
     f
    (
     case
         (
     	  x
          ifthenelse
          (
           if
           (
            true
           )
           then
           (
            array
            (
             (
             x
             :
             <[<"m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
             )
            )
           )
           else
           (
            array
            (
             x
            )
           ) 
          )
         )
    )
   )
  (
   case
   (
   x
   send m
   (
    Array.get
    (
     f
     (
         x
     )
     0
    )
   )
   )
  )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
                 class_structure
                 (
                    method id
                    	(
                    	 case
                    	 (
                    	 x
                    	 x
                    	 )
                    	)
                    	poly
                    	                      				 'a 
                    	 arrow
                    	 a
                    	 a
                 )
   )
   type
   (  						
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         option
         (
           c
           (
           )
         )
   )
   let
   (
     just
     (
      case
      (
        None
        failwith
        (
            "just"
        )
      ) 
        case
        (
         Some
         x
         x
        )
     )
   )
   let
   (
     f
    (
     case
         (
     	  x
          let
          (
           (
             l
             ::
              (
              Some
                 x
              ::
              (
              (
              None
              :
              u
              (
              )
              )
              []
              ) 
              ) 
           )
          in
            send id
            (
             just
             (
                 List.hd
                 (
                     l
                 )
             )
            )
          )
         )
    )
   )
   let
   (
     g
    (
     case
         (
     	  x
          let
          (
           (
             none
             (
              case
              (
              y
              sequence
              (
                ignore
                (
                    ::
                     (
                     y
                     ::
                     (
                     (
                     None
                     :
                     u
                     (
                     )
                     )
                     []
                     ) 
                     ) 
                )
              ;
                y
              )
              )
             )
             (
                 None
             ) 
           )
          in
            let
            (
             (
               x
               List.hd
               (
                   ::
                    (
                    Some
                       x
                    ::
                    (
                    none
                    []
                    ) 
                    ) 
               ) 
             )
            in
              send id
              (
               just
               (
                   x
               )
              )
            )
          )
         )
    )
   )
   let
   (
     h
    (
     case
         (
     	  x
          let
          (
           (
             none
             let
             (
              (
                y
                None 
              )
             in
               sequence
               (
                 ignore
                 (
                     ::
                      (
                      y
                      ::
                      (
                      (
                      None
                      :
                      u
                      (
                      )
                      )
                      []
                      ) 
                      ) 
                 )
               ;
                 y
               )
             )
           )
          in
            let
            (
             (
               x
               List.hd
               (
                   ::
                    (
                    Some
                       x
                    ::
                    (
                    none
                    []
                    ) 
                    ) 
               ) 
             )
            in
              send id
              (
               just
               (
                   x
               )
              )
            )
          )
         )
    )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         option
         (
           c
           (
           )
         )
   )
   let
   (
     just
     (
      case
      (
        None
        failwith
        (
            "just"
        )
      ) 
        case
        (
         Some
         x
         x
        )
     )
   )
   let
   (
     f
    (
     case
         (
     	  x
          let
          (
           (
             l
             ::
              (
              Some
                 x
              ::
              (
              (
              None
              :
               u
               (
                 <>
               )
              )
              []
              ) 
              ) 
           )
          in
            send id
            (
             just
             (
                 List.hd
                 (
                     l
                 )
             )
            )
          )
         )
    )
   )
   let
   (
    polyLetBiding 
    (
        f
        poly
                              				 'a 
         arrow
         a
         <>
        (
         case
         (
         x
         1
         )
        )
    )  
    g
   (
    case
        (
    	  x
         f
         (
             x
         )
        )
   )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
        (
        Leaf
        (
         a
        )
        Node
        (
          t
          (
            tuple
            (
             a
              a
            )
          )
        )
        )
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a 
         arrow
          t
          (
            a
          )
         <>
        (
         case
         (
           Leaf
           _
           1
         ) 
           case
           (
            Node
            x
            +
            (
                1
                depth
                (
                    x
                )
            )
           )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a 
         arrow
          t
          (
            a
          )
         <>
        (
         case
         (
           Leaf
           _
           1
         ) 
           case
           (
            Node
            x
            +
            (
                1
                d
                (
                    x
                )
            )
           )
        )
    )  
    d
   (
    case
        (
    	  x
         depth
         (
             x
         )
        )
   )
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a 
         arrow
          t
          (
            a
          )
         <>
        (
         case
         (
           Leaf
           x
           x
         ) 
           case
           (
            Node
            x
            +
            (
                1
                depth
                (
                    x
                )
            )
           )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a 
         arrow
          t
          (
            a
          )
         <>
        (
         case
         (
           Leaf
           x
           x
         ) 
           case
           (
            Node
            x
            depth
            (
                x
            )
           )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a  'b 
         arrow
          t
          (
            a
          )
         b
        (
         case
         (
           Leaf
           x
           x
         ) 
           case
           (
            Node
            x
            depth
            (
                x
            )
           )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        r
        poly
                              				 'a 
         tuple
         (
           list
           (
             a
           )
            ref
            (
               list
               (
                 b
               )
            )
         )
        (
         []
        	ref
        	(
        	    []
        	)
        )
    )  
    q
   (
    case
        (
    	  ()
         r
        )
   )
   )
   let
   (
    polyLetBiding 
    (
        f
        poly
                              				 'a 
         arrow
         <>
         <>
        (
         case
         (
         x
         x
         )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        zero
        poly
                              				 'a 
         <[<"Int",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"B",["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>],"a">
        Int
           0
    ) 
   )
   let
   (
    polyLetBiding 
    (
        zero
        poly
                              				 'a 
         <<[],[<"Int",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>],[]>,"a">
        Int
           0
    ) 
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         f
         poly
                               				 'a 
          <[<"Int",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"B",["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>],"a">
        )
   )
   let
   (
     zero
     record
     (
      f
      Int
         0
     ) 
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         f
         poly
                               				 'a 
          <<[],[<"Int",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>],[]>,"a">
        )
   )
   let
   (
     zero
     record
     (
      f
      Int
         0
     ) 
   )
   let
   (
    polyLetBiding 
    (
        id
        poly
                              				 'a 
         arrow
         a
         a
        (
         case
         (
         x
         x
         )
        )
    )  
     neg
   (
    case
        (
     		 i
     		(
     		 case
     		     (
     		 	  b
     		      (
     		       id
     		       (
     		           ~-
     		           (
     		            i
     		           )
     		       )
     		      	id
     		      	(
     		      	    not
     		      	    (
     		      	        b
     		      	    )
     		      	)
     		      )
     		     )
     		)
        )
   )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
        A
        (
         int
         (
         )
        )
        B
        (
          list
          (
            tuple
            (
             int
             (
             )
              t
              (
              )
            )
          )
        )
        C
        (
          list
          (
            tuple
            (
             string
             (
             )
              t
              (
              )
            )
          )
        )
        )
   )
   let
   (
     transf
    (
     case
         (
     	  f
          (
           case
           (
             A
             x
             f
             (
                 x
             )
           ) 
             case
             (
              B
              l
              B
                 transf_alist
                 (
                     f
                     l
                 )
             )
             case
             (
              C
              l
              C
                 transf_alist
                 (
                     f
                     l
                 )
             )
          )
         )
    )
        		     polyLetBiding 
   (
       transf_alist
       poly
                             				 'a 
        arrow
        <>
        arrow
         list
         (
           tuple
           (
            a
             t
             (
             )
           )
         )
         list
         (
           tuple
           (
            a
             t
             (
             )
           )
         )
       (
        case
        (
        f
        (
         case
         (
           []
           []
         ) 
           case
           (
            ::
            (
                (
                 k
                	v
                )
                tl
            )
            ::
            (
                (
                 k
                	transf
                	(
                	    f
                	    v
                	)
                )
                transf_alist
                (
                    f
                    tl
                )
            )
           )
        )
        )
       )
   ) 
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         f
         poly
                               				 'a 
           Lazy.t
           (
             arrow
              list
              (
                a
              )
             int
             (
             )
           )
        )
   )
   let
   (
     l
     (
      record
      (
       f
       lazy
         raise
         (
             Not_found
         )
      ) 
      :
      t
      (
      )
     )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         f
         poly
                               				 'a 
          arrow
          a
          unit
          (
          )
        )
   )
  let
  (
   (
      f
    (
     case
         (
      		 x
      		(
      		 case
      		     (
      		 	  y
      		      ()
      		     )
      		)
         )
    )
   )
  in
    record
    (
     f
     f
    )
  )
  let
  (
   (
      f
    (
     case
         (
      		 x
      		(
      		 case
      		     (
      		 	  y
      		      y
      		     )
      		)
         )
    )
   )
  in
    record
    (
     f
     f
    )
  )
   module  Polux
    struct
    (
    type
    (  						
       t
         type
         params=
         (
          par
         )
         cstrs =
         (
         )
         kind =
         par
    )
    let
    (
      ident
     (
      case
          (
      	  v
           v
          )
     )
    )
    class
    (
      params = 
      (
      )
      class name = alias
      class expr = 
                  class_structure
                  (
                     method alias
                     	ident
                     	poly
                     	                      				 'a 
                     	 arrow
                     	  t
                     	  (
                     	    a
                     	  )
                     	 a
                  )
    )
    let
    (
      f
     (
      case
          (
      	  x
      	  <[<"m","polytype2"(["a"],"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
           (
           x
           :
           <[<"m","polytype2"(["a"],"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
           )
          )
     )
    )
    )
   let
   (
     (
      a
     	b
     )
     (
     raise
     (
         Exit
     )
     :
     tuple
     (
      int
      (
      )
       int
       (
       )
     )
     )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
         foo
         poly
         int
         (
         )
        )
   )
   let
   (
     patternRec 
     (
         foo
     )
     (
     raise
     (
         Exit
     )
     :
     t
     (
     )
     )
   )
   type
   (  						
      s
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
        (
        A
        (
         int
         (
         )
        )
        )
   )
   let
   (
     A
     x
     (
     raise
     (
         Exit
     )
     :
     s
     (
     )
     )
   )
   type
   (  						
      t
        type
        params=
        (
         x
        )
        cstrs =
        (
        )
        kind =
        <[<"f","polytype2"(["y"],"typexprConstr1"("tagg"("y")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
   )
)
