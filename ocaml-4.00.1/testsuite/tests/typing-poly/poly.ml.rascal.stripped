(
   open StdLabels
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         (
          t
          poly
          a
         )
   )
   type
   (  						
      fold
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         (
          fold
          poly
                                				 'b 
           arrow2 
           (
               f
               arrow
               b
               arrow
               a
               b
               arrow2 
               (
                   init
                   b
                   b
               )
           )
         )
   )
   let
   (
     f
    (
     case
         (
     	  l
          record
          (
           fold
           List.fold_left
           (
               l
           )
          )
         )
    )
   )
  field
  (
  f
  (
      ::
       (
       1
       ::
       (
       2
       ::
       (
       3
       []
       ) 
       ) 
       ) 
  )
  fold
  )
  (
      <"~f:","valuePath"("valuePath"([],["+"])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      <"~init:","constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
  )
   class
   (
     params = 
     (
      "b"
     )
     class name = ilist
     class expr = 
       l
       class_structure
       (
           l
           l
          method add
          (
            case
          	(
          		x
            	brackets4 
            	(
            	    l
            	    ::
            	    (
            	        x
            	        l
            	    )
            	)
          	)
          )
          method fold
          	List.fold_left
          	(
          	    l
          	)
          	poly
          	                      				 'a 
          	 arrow2 
          	 (
          	     f
          	     arrow
          	     a
          	     arrow
          	     b
          	     a
          	     arrow2 
          	     (
          	         init
          	         a
          	         a
          	     )
          	 )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = vlist
     class expr = 
       class_structure
       (
          method add
             poly
             arrow
             a
             self
          method fold
             poly
                                   				 'b 
              arrow2 
              (
                  f
                  arrow
                  b
                  arrow
                  a
                  b
                  arrow2 
                  (
                      init
                      b
                      b
                  )
              )
       )
   )
   class
   (
     params = 
     (
     )
     class name = ilist2
     class expr = 
       l
       class_structure
       (
          inherit
           constr <"typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"vlist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
           (
           )
           l
           l
          method add
          (
            case
          	(
          		x
            	brackets4 
            	(
            	    l
            	    ::
            	    (
            	        x
            	        l
            	    )
            	)
          	)
          )
          method fold
          	  List.fold_left
          	  (
          	      l
          	  )
       )
   )
   let
   (
     ilist2
    (
     case
         (
     	  l
          class_structure
          (
             inherit
              constr <<>,[],"classPath"([],"vlist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
              (
              )
              l
              l
             method add
             (
               case
             	(
             		x
               	brackets4 
               	(
               	    l
               	    ::
               	    (
               	        x
               	        l
               	    )
               	)
             	)
             )
             method fold
             	  List.fold_left
             	  (
             	      l
             	  )
          )
         )
    )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = ilist3
     class expr = 
       l
       class_structure
       (
          inherit
           constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"vlist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
           (
           )
           l
           l
          method add
          (
            case
          	(
          		x
            	brackets4 
            	(
            	    l
            	    ::
            	    (
            	        x
            	        l
            	    )
            	)
          	)
          )
          method fold
          	  List.fold_left
          	  (
          	      l
          	  )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = ilist4
     class expr = 
       l
        list
        (
          a
        )
       class_structure
       (
           l
           l
          method add
             poly
             <>
          method add
          (
            case
          	(
          		x
            	brackets4 
            	(
            	    l
            	    ::
            	    (
            	        x
            	        l
            	    )
            	)
          	)
          )
          method fold
             poly
                                   				 'b 
              arrow2 
              (
                  f
                  arrow
                  b
                  arrow
                  a
                  b
                  arrow2 
                  (
                      init
                      b
                      b
                  )
              )
          method fold
          	  List.fold_left
          	  (
          	      l
          	  )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = ilist5
     class expr = 
       l
        list
        (
          a
        )
       class_structure
       (
           l
           l
          method add
          (
            case
          	(
          		x
            	brackets4 
            	(
            	    l
            	    ::
            	    (
            	        x
            	        l
            	    )
            	)
          	)
          )
          method fold
             poly
                                   				 'b 
              arrow2 
              (
                  f
                  arrow
                  b
                  arrow
                  a
                  b
                  arrow2 
                  (
                      init
                      b
                      b
                  )
              )
          method fold2
             poly
                                   				 'b 
              arrow2 
              (
                  f
                  arrow
                  b
                  arrow
                  a
                  b
                  arrow2 
                  (
                      init
                      b
                      b
                  )
              )
          method fold2
          (
            case
          	(
          		f
          		init
            	send fold
            	(
            	 self
            	)
            	(
            	    f
            	    <"~init:","brackets"("functionApplication"("hash"("valuePath"("valuePath"([],"self")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"fold")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["f","init"])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
            	)
          	)
          )
          method fold
          	  List.fold_left
          	  (
          	      l
          	  )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = ilist6
     class expr = 
       l
       class_structure
       (
          inherit
           constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"vlist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
           (
           )
           l
           l
          method add
          (
            case
          	(
          		x
            	brackets4 
            	(
            	    l
            	    ::
            	    (
            	        x
            	        l
            	    )
            	)
          	)
          )
          method fold2
             poly
                                   				 'b 
              arrow2 
              (
                  f
                  arrow
                  b
                  arrow
                  a
                  b
                  arrow2 
                  (
                      init
                      b
                      b
                  )
              )
          method fold2
          (
            case
          	(
          		f
          		init
            	send fold
            	(
            	 self
            	)
            	(
            	    f
            	    <"~init:","brackets"("functionApplication"("hash"("valuePath"("valuePath"([],"self")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"fold")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["f","init"])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
            	)
          	)
          )
          method fold
          	  List.fold_left
          	  (
          	      l
          	  )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = olist
     class expr = 
       class_structure
       (
          method fold
             poly
                                   				 'c 
              arrow2 
              (
                  f
                  arrow
                  a
                  arrow
                  c
                  c
                  arrow2 
                  (
                      init
                      c
                      c
                  )
              )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = onil
     class expr = 
       class_structure
       (
          inherit
           constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
           (
           )
          method fold
          (
            case
          	(
          		f
          		init
            	init
          	)
          )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = ocons
     class expr = 
       hd
       tl
       class_structure
       (
          inherit
           constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
           (
           )
           hd
           hd
           tl
           tl
          method fold
          (
            case
          	(
          		f
          		init
            	f
            	(
            	    hd
            	    send fold
            	    (
            	     tl
            	    )
            	    (
            	        f
            	        init
            	    )
            	)
          	)
          )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = ostream
     class expr = 
       hd
       tl
       class_structure
       (
          inherit
           constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
           (
           )
           hd
           hd
           tl
           (
           tl
           :
            ostream
            (
              a
            )
           )
          method fold
          (
            case
          	(
          		f
          		init
            	f
            	(
            	    hd
            	    send fold
            	    (
            	     tl
            	    )
            	    (
            	        f
            	        init
            	    )
            	)
          	)
          )
          method empty
          	  false
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = ostream1
     class expr = 
       hd
       tl
       class_structure
       (
          inherit
           constr <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"olist")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
           (
           )
           hd
           hd
           tl
           tl
          method hd
          	  hd
          method tl
          	  tl
          method fold
          (
            case
          	(
          		f
          		init
            	send fold
            	(
            	 send tl
            	 (
            	  self
            	 )
            	)
            	(
            	    f
            	    <"~init:","brackets"("functionApplication"("valuePath"("valuePath"([],"f")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["hash"("valuePath"("valuePath"([],"self")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"hd")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"valuePath"("valuePath"([],"init")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
            	)
          	)
          )
       )
   )
   class
   (
     params = 
     (
     )
     class name = vari
     class expr = 
       class_structure
       (
          method m
             poly
                                   				 'a 
              arrow
              <<[],[<"A",[],[]>,<"B",[],[]>,<"C",[],[]>],[]>,"a">
              int
              (
              )
          method m
          	  (
          	   case
          	   (
          	     A
          	     1
          	   ) 
          	     case
          	     (
          	      pat_or
          	      (
          	       B
          	       C
          	      )
          	      0
          	     )
          	  )
       )
   )
   class
   (
     params = 
     (
     )
     class name = vari
     class expr = 
       class_structure
       (
          method m
          	(
          	 case
          	 (
          	   A
          	   1
          	 ) 
          	   case
          	   (
          	    pat_or
          	    (
          	     B
          	     C
          	    )
          	    0
          	   )
          	)
          	poly
          	                      				 'a 
          	 arrow
          	 <<[],[<"A",[],[]>,<"B",[],[]>,<"C",[],[]>],[]>,"a">
          	 int
          	 (
          	 )
       )
   )
   module  V
    struct
    (
    type
    (  						
       v
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
          <[],[<"A",[]>,<"B",[]>,<"C",[]>]>
    )
    let
    (
      m
      (
       (
        case
        (
          A
          1
        ) 
          case
          (
           v
           0
          )
       )
       :
       arrow
       <[],["typexprConstr2"("typeConstr"([],"v")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>
       int
       (
       )
      )
    )
    )
   class
   (
     params = 
     (
     )
     class name = varj
     class expr = 
       class_structure
       (
          method m
             poly
                                   				 'a 
              arrow
              <<[],["typexprConstr2"("typeConstr"(["extendedModulePath1"([],"V")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"v")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>,"a">
              int
              (
              )
          method m
          	  V.m
       )
   )
   module type T
    signature
    (
       sig_class
        (
       	class_description
       	params = 
       		(
       		)
       	name = vari
       	expr =
       		class_type
       		signature
       		class_signature
       		(
       		 poly
       		                       				 'a 
       		  arrow
       		  <<[],[<"A",[],[]>,<"B",[],[]>,<"C",[],[]>],[]>,"a">
       		  int
       		  (
       		  )
       		)
        )
    )    								
   module  M0
    struct
    (
    class
    (
      params = 
      (
      )
      class name = vari
      class expr = 
        class_structure
        (
           method m
              poly
                                    				 'a 
               arrow
               <<[],[<"A",[],[]>,<"B",[],[]>,<"C",[],[]>],[]>,"a">
               int
               (
               )
           method m
           	  (
           	   case
           	   (
           	     A
           	     1
           	   ) 
           	     case
           	     (
           	      pat_or
           	      (
           	       B
           	       C
           	      )
           	      0
           	     )
           	  )
        )
    )
    )
   module  M
    M0
    T
   let
   (
     v
     new M.vari 
   )
  send m
  (
   v
  )
  (
      A
  )
   class
   (
     params = 
     (
     )
     class name = point
     class expr = 
       x
       y
       class_structure
       (
           x
           x
           y
           y
          method x
          	  x
          method y
          	  y
       )
   )
   class
   (
     params = 
     (
     )
     class name = color_point
     class expr = 
       x
       y
       color
       class_structure
       (
          inherit
           constr classArgs 
                  (
                      point
                      x
                      y
                  )
           (
           )
           color
           color
          method color
          	  color
       )
   )
   class
   (
     params = 
     (
     )
     class name = circle
     class expr = 
       p
       typexprHash1 
       (
           point
       )
       r
       class_structure
       (
           p
           brackets2 
           (
               p
               point
               (
               )
           )
           r
           r
          method distance
             poly
                                   				 'a 
              arrow
              <"typexprHash1"("classPath"([],"point")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
              float
              (
              )
          method distance
          (
            case
          	(
          		p'
            	let
            	(
            	 (
            	   dx
            	   -
            	   (
            	       send x
            	       (
            	        p
            	       )
            	       send x
            	       (
            	        p'
            	       )
            	   ) 
            	   dy
            	   -
            	   (
            	       send y
            	       (
            	        p
            	       )
            	       send y
            	       (
            	        p'
            	       )
            	   ) 
            	 )
            	in
            	  let
            	  (
            	   (
            	     d
            	     -.
            	     (
            	         sqrt
            	         (
            	             float
            	             (
            	                 +
            	                 (
            	                     *
            	                     (
            	                         dx
            	                         dx
            	                     )
            	                     *
            	                     (
            	                         dy
            	                         dy
            	                     )
            	                 )
            	             )
            	         )
            	         float
            	         (
            	             r
            	         )
            	     ) 
            	   )
            	  in
            	    ifthenelse
            	    (
            	     if
            	     (
            	      <
            	      (
            	          d
            	          0.
            	      )
            	     )
            	     then
            	     (
            	      0.
            	     )
            	     else
            	     (
            	      d
            	     ) 
            	    )
            	  )
            	)
          	)
          )
       )
   )
   let
   (
     p0
     new point
     (
         <"~x:","constant"("posInt"("3")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         <"~y:","constant"("posInt"("5")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     ) 
   )
   let
   (
     p1
     new point
     (
         <"~x:","constant"("posInt"("10")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         <"~y:","constant"("posInt"("13")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     ) 
   )
   let
   (
     cp
     new color_point
     (
         <"~x:","constant"("posInt"("12")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         <"~y:","brackets"("constant"("negInt"("-5")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         <"~color:","constant"("stringLiteral"("\"green\"")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     ) 
   )
   let
   (
     c
     new circle
     (
         p0
         <"~r:","constant"("posInt"("2")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     ) 
   )
   let
   (
     d
     send distance
     (
      c
     )
     (
         cp
     ) 
   )
   let
   (
     f
    (
     case
         (
     	  x
     	  (
     	   	m
     	   	poly
     	   	                      				 'a 
     	   	 arrow
     	   	 a
     	   	 a
     	  )
          (
          x
          :
          (
           	m
           	poly
           	                      				 'b 
           	 arrow
           	 b
           	 b
          )
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  x
     	  (
     	   	m
     	   	poly
     	   	                      				 'a 
     	   	 arrow
     	   	 a
     	   	  list
     	   	  (
     	   	    a
     	   	  )
     	  )
          (
          x
          :
          (
           	m
           	poly
           	                      				 'b 
           	 arrow
           	 b
           	 c
          )
          )
         )
    )
   )
   class
   (
     params = 
     (
     )
     class name = id
     class expr = 
       class_structure
       (
          method id
             poly
                                   				 'a 
              arrow
              a
              a
          method id
          (
            case
          	(
          		x
            	x
          	)
          )
       )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
     ) 
     name = id_spec
     expr =
      class_type
      signature
      class_signature
      (
       poly
       arrow
       a
       a
      )
   )
   class
   (
     params = 
     (
     )
     class name = id_impl
     class expr = 
       class_structure
       (
          method id
          (
            case
          	(
          		x
            	x
          	)
          )
       )
   )
   class
   (
     params = 
     (
     )
     class name = a
     class expr = 
       class_structure
       (
          method m
          	  send id
          	  (
          	   (
          	   new b
          	   :
          	   id_spec
          	   (
          	   )
          	   )
          	  )
          	  (
          	      true
          	  )
       )
     params = 
     (
     )
     class name = b
     class expr = 
       class_structure
       (
          method id
          (
            case
          	(
          		x
            	x
          	)
          )
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = id1
     class expr = 
       class_structure
       (
          method id
             poly
                                   				 'b 
              arrow
              b
              a
          method id
          (
            case
          	(
          		x
            	x
          	)
          )
       )
   )
   class
   (
     params = 
     (
     )
     class name = id2
     class expr = 
       x
       a
       class_structure
       (
          method id
             poly
                                   				 'b 
              arrow
              b
              a
          method id
          (
            case
          	(
          		x
            	x
          	)
          )
       )
   )
   class
   (
     params = 
     (
     )
     class name = id3
     class expr = 
       x
       class_structure
       (
           x
           x
          method id
             poly
                                   				 'a 
              arrow
              a
              a
          method id
          (
            case
          	(
          		_
            	x
          	)
          )
       )
   )
   class
   (
     params = 
     (
     )
     class name = id4
     class expr = 
       ()
       class_structure
       (
           r
           None
          method id
             poly
                                   				 'a 
              arrow
              a
              a
          method id
          (
            case
          	(
          		x
            	match
            	r
            	(
            	case
            	(
            	  None
            	  sequence
            	  (
            	    Array.set
            	    (
            	     r
            	     Some
            	        x
            	    )
            	  ;
            	    x
            	  )
            	) 
            	  case
            	  (
            	   Some
            	   y
            	   y
            	  )
            	)
          	)
          )
       )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
             poly
                                   				 'a  'b 
              arrow
              a
              arrow
              b
              a
          method m
          (
            case
          	(
          		x
          		y
            	x
          	)
          )
       )
   )
   let
   (
     f1
    (
     case
         (
     	  f
     	  id
     	  (
     	  )
          (
           send id
           (
            f
           )
           (
               1
           )
          	send id
          	(
          	 f
          	)
          	(
          	    true
          	)
          )
         )
    )
   )
   let
   (
     f2
    (
     case
         (
     	  f
          (
           send id
           (
            (
            f
            :
            id
            (
            )
            )
           )
           (
               1
           )
          	send id
          	(
          	 (
          	 f
          	 :
          	 id
          	 (
          	 )
          	 )
          	)
          	(
          	    true
          	)
          )
         )
    )
   )
   let
   (
     f3
    (
     case
         (
     	  f
          (
           send id
           (
            f
           )
           (
               1
           )
          	send id
          	(
          	 f
          	)
          	(
          	    true
          	)
          )
         )
    )
   )
   let
   (
     f4
    (
     case
         (
     	  f
          sequence
          (
            ignore
            (
                (
                f
                :
                id
                (
                )
                )
            )
          ;
            (
             send id
             (
              f
             )
             (
                 1
             )
            	send id
            	(
            	 f
            	)
            	(
            	    true
            	)
            )
          )
         )
    )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
             poly
                                   				 'a 
              arrow
              <"typexprHash1"("classPath"([],"id")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
              tuple
              (
               int
               (
               )
                bool
                (
                )
              )
          method m
          (
            case
          	(
          		f
          		typexprHash1 
          		(
          		    id
          		)
            	(
            	 send id
            	 (
            	  f
            	 )
            	 (
            	     1
            	 )
            		send id
            		(
            		 f
            		)
            		(
            		    true
            		)
            	)
          	)
          )
       )
   )
   class
   (
     params = 
     (
     )
     class name = id2
     class expr = 
       class_structure
       (
          method id
             poly
                                   				 'a 
              arrow
              a
              a
          method id
          (
            case
          	(
          		x
            	x
          	)
          )
          method mono
          (
            case
          	(
          		x
          		int
          		(
          		)
            	x
          	)
          )
       )
   )
   let
   (
     app
     send m
     (
      new c
     )
     (
         new id2
     ) 
   )
   type
   (  						
      foo
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
          list
          (
             foo
             (
               a
             )
          )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = bar
     class expr = 
       x
       a
       class_structure
       (
       )
   )
   type
   (  						
      foo
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
          bar
          (
             foo
             (
               a
             )
          )
   )
  (
   case
   (
   x
   send m
   (
    (
    x
    :
    <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
    )
   )
   )
  )
  (
   case
   (
   x
   send m
   (
    (
    x
    :
    <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"list")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
    )
   )
   )
  )
   let
   (
     f
    (
     case
         (
     	  x
          send m
          (
           (
           x
           :
           <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"(<"typexprAngleBrackets"(["methodType"("n","polytype1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[<>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
           )
          )
         )
    )
   )
  (
   case
   (
   x
   <"typexprAngleBrackets"(["methodType"("p","polytype2"(["a"],<"typexprAngleBrackets"(["methodType"("m","polytype1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"methodType"("n","polytype1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[<>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
   send p
   (
    x
   )
   )
  )
  (
   case
   (
   x
   <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],<"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("p","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("d")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"c">)[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"d">
   send m
   (
    x
   )
   )
  )
  (
   case
   (
   x
   (
    	m
    	poly
    	                      				 'a 
    	 (
    	  	p
    	  	poly
    	  	a
    	 )
   )
   send m
   (
    x
   )
   )
  )
   type
   (  						
      sum
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
         T
         (
          (
           	id
           	poly
           	                      				 'a 
           	 arrow
           	 a
           	 a
          )
         )
         )
   )
  (
   case
   (
   T
   x
   send id
   (
    x
   )
   )
  )
   type
   (  						
      record
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          r
          poly
          (
           	id
           	poly
           	                      				 'a 
           	 arrow
           	 a
           	 a
          )
         )
   )
  (
   case
   (
   x
   send id
   (
    field
    (
    x
    r
    )
   )
   )
  )
  (
   case
   (
   patternRec 
   (
       r
       x
   )
   send id
   (
    x
   )
   )
  )
   class
   (
     params = 
     (
     )
     class name = myself
     class expr = 
       class_structure
       (
          method self
          	(
          	 case
          	 (
          	 _
          	 self
          	 )
          	)
          	poly
          	                      				 'a 
          	 arrow
          	 a
          	 b
       )
   )
   class
   (
     params = 
     (
     )
     class name = number
     class expr = 
       class_structure
       (
           num
           0
          method num
          	  num
          method succ
          	  brackets4 
          	  (
          	      num
          	      +
          	      (
          	          num
          	          1
          	      )
          	  )
          method prev
          	  send switch
          	  (
          	   self
          	  )
          	  (
          	      <"~zero:","brackets"("fun"("multipleMatching"(["patternConstant"("emptyParenthesis"()[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"functionApplication"("valuePath"("valuePath"([],"failwith")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["constant"("stringLiteral"("\"zero\"")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          	      <"~prev:","brackets"("fun"("multipleMatching"(["patternValueName"("x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"valuePath"("valuePath"([],"x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          	  )
          method switch
          	(
          	 case
          	 (
          	   zero
          	   (
          	   case
          	   (
          	   prev
          	   ifthenelse
          	   (
          	    if
          	    (
          	     =
          	     (
          	         num
          	         0
          	     )
          	    )
          	    then
          	    (
          	     zero
          	     (
          	         ()
          	     )
          	    )
          	    else
          	    (
          	     prev
          	     (
          	         brackets4 
          	         (
          	             num
          	             -
          	             (
          	                 num
          	                 1
          	             )
          	         )
          	     )
          	    ) 
          	   )
          	   )
          	   )
          	 )													
          	)
          	poly
          	                      				 'a 
          	 arrow2 
          	 (
          	     zero
          	     arrow
          	     unit
          	     (
          	     )
          	     a
          	     arrow2 
          	     (
          	         prev
          	         arrow
          	         self
          	         a
          	         a
          	     )
          	 )
       )
   )
   let
   (
     id
    (
     case
         (
     	  x
          x
         )
    )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method id
          	id
          	poly
          	                      				 'a 
          	 arrow
          	 a
          	 a
       )
   )
   class
   (
     params = 
     (
     )
     class name = c'
     class expr = 
       class_structure
       (
          inherit
           constr c
           (
           )
          method id
          	  id
       )
   )
   class
   (
     params = 
     (
     )
     class name = d
     class expr = 
       class_structure
       (
          inherit
           constr c
           (
           )
           count
           0
          method id
          (
            case
          	(
          		x
            	sequence
            	(
            	  Array.set
            	  (
            	   count
            	   +
            	   (
            	       count
            	       1
            	   )
            	  )
            	;
            	  x
            	)
          	)
          )
          method count
          	  count
          method old
          	send id
          	(
          	 c
          	)
          	poly
          	                      				 'a 
          	 arrow
          	 a
          	 a
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = olist
     class expr = 
       l
       class_structure
       (
           l
           l
          method fold
          	List.fold_right
          	(
          	    l
          	)
          	poly
          	                      				 'b 
          	 arrow2 
          	 (
          	     f
          	     arrow
          	     a
          	     arrow
          	     b
          	     b
          	     arrow2 
          	     (
          	         init
          	         b
          	         b
          	     )
          	 )
          method cons
          (
            case
          	(
          		a
            	brackets4 
            	(
            	    l
            	    ::
            	    (
            	        a
            	        l
            	    )
            	)
          	)
          )
       )
   )
   let
   (
     sum
    (
     case
         (
     	  l
     	  olist
     	  (
     	    a
     	  )
          send fold
          (
           l
          )
          (
              <"~f:","brackets"("fun"("multipleMatching"(["patternValueName"("x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"patternValueName"("acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"infix3"("valuePath"("valuePath"([],"x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"+","valuePath"("valuePath"([],"acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
              <"~init:","constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          )
         )
    )
   )
   let
   (
     count
    (
     case
         (
     	  l
     	  olist
     	  (
     	    a
     	  )
          send fold
          (
           l
          )
          (
              <"~f:","brackets"("fun"("multipleMatching"(["anyPattern"()[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"patternValueName"("acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"infix3"("valuePath"("valuePath"([],"acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"+","constant"("posInt"("1")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
              <"~init:","constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
          )
         )
    )
   )
   let
   (
      append
    (
     case
         (
      		 l
      		 olist
      		 (
      		   a
      		 )
      		(
      		 case
      		     (
      		 	  l'
      		 	  olist
      		 	  (
      		 	    b
      		 	  )
      		      send fold
      		      (
      		       l
      		      )
      		      (
      		          <"~init:","valuePath"("valuePath"([],"l\'")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      		          <"~f:","brackets"("fun"("multipleMatching"(["patternValueName"("x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"patternValueName"("acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"functionApplication"("hash"("valuePath"("valuePath"([],"acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"cons")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["valuePath"("valuePath"([],"x")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      		      )
      		     )
      		)
         )
    )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         unit
         (
         )
   )
   class
   (
     params = 
     (
     )
     class name = o
     class expr = 
       class_structure
       (
          method x
          	(
          	 case
          	 (
          	 _
          	 ()
          	 )
          	)
          	poly
          	                      				 'a 
          	 arrow
          	  t
          	  (
          	    <[<"A",[]>],"a">
          	  )
          	 unit
          	 (
          	 )
       )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
          	  new d
          	  (
          	      ()
          	  )
       )
     params = 
     (
     )
     class name = d
     class expr = 
       <"x",[],["constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
       ()
       class_structure
       (
       )
   )
   class
   (
     params = 
     (
     )
     class name = d
     class expr = 
       <"x",[],["constant"("posInt"("0")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
       ()
       class_structure
       (
       )
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
          	  new d
          	  (
          	      ()
          	  )
       )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
     ) 
     name = numeral
     expr =
      class_type
      signature
      class_signature
      (
       poly
       arrow
       arrow
       a
       a
       arrow
       a
       a
      )
   )
   class
   (
     params = 
     (
     )
     class name = zero
     class expr = 
       class_structure
       (
          method fold
          (
            case
          	(
          		f
          		x
            	x
          	)
          )
       )
   )
   class
   (
     params = 
     (
     )
     class name = next
     class expr = 
       n
       typexprHash1 
       (
           numeral
       )
       class_structure
       (
          method fold
          (
            case
          	(
          		f
          		x
            	send fold
            	(
            	 n
            	)
            	(
            	    f
            	    f
            	    (
            	        x
            	    )
            	)
          	)
          )
       )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
     ) 
     name = node_type
     expr =
      class_type
      signature
      class_signature
      (
       poly
       <"Node",["typexprConstr2"("typeConstr"([],"node_type")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
      )
   )
   class
   (
     params = 
     (
     )
     class name = node
     class expr = 
       class_structure
       (
          method as_variant
          	Node
          	   brackets2 
          	   (
          	       self
          	       node_type
          	       (
          	       )
          	   )
          	poly
          	                      				 'a 
          	 <[<"Node",["typexprConstr2"("typeConstr"([],"node_type")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>],"a">
       )
   )
   class
   (
     params = 
     (
     )
     class name = node
     class expr = 
       class_structure
       (
          method as_variant
          	  Node
          	     brackets2 
          	     (
          	         self
          	         node_type
          	         (
          	         )
          	     )
       )
   )
   type
   (  						
      bad
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          bad
          poly
                                				 'a 
            ref
            (
               option
               (
                 a
               )
            )
         )
   )
   let
   (
     bad
     record
     (
      bad
      ref
      (
          None
      )
     ) 
   )
   type
   (  						
      bad2
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          bad2
          poly
                                				 'a 
            option
            (
               ref
               (
                  option
                  (
                    a
                  )
               )
            )
         )
   )
   let
   (
     bad2
     record
     (
      bad2
      None
     ) 
   )
  setfield
  (
  bad2
  bad2
  Some
     ref
     (
         None
     )
  )
   let
   (
      f
    (
     case
         (
      		 x
      		 (
      		  	m
      		  	poly
      		  	                      				 'a 
      		  	 <"typexprAngleBrackets"(["methodType"("p","polytype1"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
      		 )
      		(
      		 case
      		     (
      		 	  y
      		 	  b
      		      ()
      		     )
      		)
         )
    )
   )
   let
   (
      f
    (
     case
         (
      		 x
      		 (
      		  	m
      		  	poly
      		  	                      				 'a 
      		  	 tuple
      		  	 (
      		  	  a
      		  	   <"typexprAngleBrackets"(["methodType"("p","polytype1"("star"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
      		  	 )
      		 )
      		(
      		 case
      		     (
      		 	  y
      		 	  b
      		      ()
      		     )
      		)
         )
    )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         <[],[<"A",["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>]>
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
          	(
          	 case
          	 (
          	 x
          	 send m
          	 (
          	  self
          	 )
          	 (
          	     x
          	 )
          	 )
          	)
          	poly
          	                      				 'a 
          	 arrow
          	 <["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"a">
          	 unit
          	 (
          	 )
       )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
          	(
          	 case
          	 (
          	   A
          	   x'
          	   send m
          	   (
          	    self
          	   )
          	   (
          	       x'
          	   )
          	 ) 
          	   case
          	   (
          	    _
          	    failwith
          	    (
          	        "c#m"
          	    )
          	   )
          	)
          	poly
          	                      				 'a 
          	 arrow
          	 <["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"a">
          	 unit
          	 (
          	 )
       )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
          	(
          	 case
          	 (
          	 x
          	 send m
          	 (
          	  self
          	 )
          	 (
          	     x
          	 )
          	 )
          	)
          	poly
          	                      				 'a 
          	 arrow
          	 <["typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"a">
          	 a
       )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
          	(
          	 case
          	 (
          	 x
          	 A
          	 )
          	)
          	poly
          	                      				 'a 
          	 arrow
          	  option
          	  (
          	    a
          	  )
          	 <[<"A",[]>],"a">
       )
   )
   class
   (
     params = 
     (
      "a"
     )
     class name = visitor
     class expr = 
       class_structure
       (
          method caseNil
             poly
             a
       )
     params = 
     (
     )
     class name = int_list
     class expr = 
       class_structure
       (
          method visit
             poly
                                   				 'a 
              arrow
               visitor
               (
                 a
               )
              a
       )
   )
   type
   (  						
      list_visitor
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
         (
          	caseNil
          	poly
          	a
          	caseCons
          	poly
          	arrow
          	b
          	arrow
          	 list
          	 (
          	   b
          	 )
          	a
         )
   )
   type
   (  						
      alist
        type
        params=
        (
         b
        )
        cstrs =
        (
        )
        kind =
         (
          	visit
          	poly
          	                      				 'a 
          	 arrow
          	  list_visitor
          	     (
          	      a
          	 	 b				
          	     ) 
          	 a
         )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
     ) 
     name = ct
     expr =
      class_type
       s
       poly
       arrow
       arrow
       b
       arrow
       s
       b
       arrow
       b
       b
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          f
          poly
                                				 'a  'b 
           arrow
           arrow
           b
           arrow
           <"typexprHash1"("classPath"([],"ct")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
           b
           b
         )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         u
         (
         )
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         t
         (
         )
   )
   class
   (
     params = 
     (
      "t"
     )
     class name = a
     class expr = 
       class_structure
       (
          classConstraint 
          (
              t
              <"A",["typexprConstr1"("tagg"("t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>
          )
       )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         <[],[<"A",["typexprConstr1"("typexprConstr2"("typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>]>
   )
   type
   (  						
      t
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
         typeConstraint 
         (
             a
             b
         )
      u
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
          t
             (
              a
         	 b				
             ) 
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         a
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
          t
          (
            int
            (
            )
          )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         typeConstraint 
         (
             a
             int
             (
             )
         )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         a
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
          t
          (
             u
             (
               a
             )
          )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         a
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
          t
          (
             u
             (
               a
             )
          )
         typeConstraint 
         (
             a
             int
             (
             )
         )
   )
   type
   (  						
      g
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         int
         (
         )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         unit
         (
         )
         typeConstraint 
         (
             a
             g
             (
             )
         )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         a
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
          t
          (
             u
             (
               a
             )
          )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         a
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
          t
          (
             u
             (
               a
             )
          )
         typeConstraint 
         (
             a
             int
             (
             )
         )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         (
          	m
          	poly
          	 v
          	 (
          	   a
          	 )
         )
      v
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
          u
          (
             list
             (
               a
             )
          )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         a
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         (
         A
         (
           t
           (
             a
           )
         )
         )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         (
          	a
          	poly
          	a
         )
   )
  (
   case
   (
   x
   <"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
   (
   x
   :
    t
    (
      b
    )
   )
   )
  )
   type
   (  						
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         <"typexprConstr1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
         A
         (
         )
         B
         (
         )
         )
   )
  (
   case
   (
     (
      A
     	_
     )
     1
   ) 
     case
     (
      (
       _
      	A
      )
      2
     )
     case
     (
      (
       _
      	B
      )
      3
     )
  )
  (
   case
   (
     (
      A
     	_
     )
     1
   ) 
     case
     (
      (
       _
      	pat_or
      	(
      	 A
      	 B
      	)
      )
      2
     )
  )
  (
   case
   (
     (
      Some
      A
     	_
     )
     1
   ) 
     case
     (
      (
       Some
       _
      	A
      )
      2
     )
     case
     (
      (
       None
      	A
      )
      3
     )
     case
     (
      (
       _
      	B
      )
      4
     )
  )
  (
   case
   (
     (
      Some
      A
     	A
     )
     1
   ) 
     case
     (
      (
       Some
       A
      	B
      )
      1
     )
     case
     (
      (
       Some
       _
      	A
      )
      2
     )
     case
     (
      (
       None
      	A
      )
      3
     )
     case
     (
      (
       _
      	B
      )
      4
     )
  )
  (
   case
   (
     (
      A
     	A
     )
     1
   ) 
     case
     (
      (
       A
      	B
      )
      2
     )
     case
     (
      (
       B
      	_
      )
      3
     )
  )
  (
   case
   (
     (
      A
     	A
     )
     1
   ) 
     case
     (
      (
       B
      	A
      )
      2
     )
     case
     (
      (
       _
      	B
      )
      3
     )
  )
  (
   case
   (
     (
      pat_or
      (
       A
       B
      )
     	_
     )
     0
   ) 
     case
     (
      (
       _
      	pat_or
      	(
      	 A
      	 B
      	)
      )
      1
     )
  )
  (
   case
   (
     (
      B
     	1
     )
     1
   ) 
     case
     (
      (
       _
      	1
      )
      2
     )
  )
  (
   case
   (
     (
      1
     	B
     )
     1
   ) 
     case
     (
      (
       1
      	_
      )
      2
     )
  )
   type
   (  						
      a
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
         arrow
         a
         unit
         (
         )
         typeConstraint 
         (
             a
             <"B",[<"typeExprBrackets2"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"typeConstr"([],"b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">]>
         )
      b
        type
        params=
        (
          a
          b
        )
        cstrs =
        (
        )
        kind =
         arrow
         b
         unit
         (
         )
         typeConstraint 
         (
             b
             <"A",[<"typeExprBrackets2"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"typeConstr"([],"a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">]>
         )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
      "ab"
     ) 
     name = a
     expr =
      class_type
      signature
      class_signature
      (
       poly
       <<["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"classPath"([],"b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,"b">
       poly
        a
           (
            a
       	 b				
           ) 
      )
     class_type_declaration
     params = 
     (
      "ab"
     ) 
     name = b
     expr =
      class_type
      signature
      class_signature
      (
       poly
       <<["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"classPath"([],"a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,"a">
       poly
        b
           (
            a
       	 b				
           ) 
      )
   )
   class_type
   (
     class_type_declaration
     params = 
     (
      "b"
     ) 
     name = ca
     expr =
      class_type
       s
       	class_type
       	constr a
       	(
       	 s
       		b
       	)
   )
   class_type
   (
     class_type_declaration
     params = 
     (
      "a"
     ) 
     name = cb
     expr =
      class_type
       s
       	class_type
       	constr b
       	(
       	 a
       		s
       	)
   )
   type
   (  						
      bt
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         <"typexprConstr1"("typexprConstr1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"ca")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeConstr"([],"cb")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method m
          	  1
       )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             method m
             	  1
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             method n
             	  1
             method m
             	  send n
             	  (
             	   self
             	  )
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             method n
             	  1
             method m
             	  send n
             	  (
             	  )
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             method n
             	  1
             method m
             	  2
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  ()
          class_structure
          (
             classConstraint 
             (
                 s
                 (
                  	n
                  	poly
                  	int
                  	(
                  	)
                 )
             )
             method m
             	  1
          )
         )
    )
   )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method x
          	  1
          method m
          	  class_structure
          	  (
          	     method x
          	     	  3
          	     method m
          	     	  self
          	  )
       )
   )
   let
   (
     o
     class_structure
     (
        method x
        	  1
        method m
        	  class_structure
        	  (
        	     method x
        	     	  3
        	     method m
        	     	  self
        	  )
     )
   )
  (
   case
   (
   x
   <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["b"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">
   (
   x
   :
   (
    	m
    	poly
    	                      				 'a 
    	 tuple
    	 (
    	  a
    	   <"typexprAngleBrackets"(["methodType"("m","polytype2"(["b"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">
    	 )
   )
   )
   )
  )
   type
   (  						
      foo
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         (
          	m
          	poly
          	                      				 'b 
          	 tuple
          	 (
          	  a
          	    foo
          	    (
          	      a
          	    )
          	 )
         )
   )
   type
   (  						
      foo'
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          	m
          	poly
          	                      				 'a 
          	 tuple
          	 (
          	  a
          	    foo
          	    (
          	      a
          	    )
          	 )
         )
   )
   type
   (  						
      bar
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         (
          	m
          	poly
          	                      				 'b 
          	 tuple
          	 (
          	  a
          	   (
          	    	m
          	    	poly
          	    	                      				 'c 
          	    	 tuple
          	    	 (
          	    	  c
          	    	    bar
          	    	    (
          	    	      a
          	    	    )
          	    	 )
          	   )
          	 )
         )
   )
   type
   (  						
      bar'
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          	m
          	poly
          	                      				 'a 
          	 tuple
          	 (
          	  a
          	    bar
          	    (
          	      a
          	    )
          	 )
         )
   )
   let
   (
     f
    (
     case
         (
     	  x
     	  foo'
     	  (
     	  )
          (
          x
          :
          bar'
          (
          )
          )
         )
    )
   )
  (
   case
   (
   x
   (
    	m
    	poly
    	                      				 'a 
    	 tuple
    	 (
    	  a
    	   <"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">
    	 )
   )
   (
   x
   :
   <"typexprAngleBrackets"(["methodType"("m","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">
   )
   )
  )
  (
   case
   (
   x
   (
    	m
    	poly
    	                      				 'a 
    	 tuple
    	 (
    	  a
    	   <"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">
    	 )
   )
   (
   x
   :
   <"typexprAngleBrackets"(["methodType"("m","polytype2"(["b"],"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">
   )
   )
  )
  (
   case
   (
   x
   <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">
   (
   x
   :
   (
    	m
    	poly
    	                      				 'b 
    	 tuple
    	 (
    	  b
    	   <"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">
    	 )
   )
   )
   )
  )
   let
   (
     f
    (
     case
         (
     	  x
          (
            x
            :
            (
             	m
             	poly
             	                      				 'a 
             	 arrow
             	 a
             	 <"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["c"],"arrow1"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">
            )
            <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"typeExprBrackets"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">
          )
         )
    )
   )
   module  M
    struct
    (
    let
    (
      f
     (
      case
          (
      	  x
      	  <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">
           ()
          )
     )
    )
    )
    signature
    (
     sig_value f
     value_description
     arrow
     (
      	m
      	poly
      	                      				 'b 
      	 tuple
      	 (
      	  b
      	   <"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">
      	 )
     )
     unit
     (
     )
     (
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
          <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typeExprBrackets"("star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("foo")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"foo">
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
           (
            	m
            	poly
            	                      				 'b 
            	 tuple
            	 (
            	  b
            	   <"star"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprAngleBrackets"(["methodType"("m","polytype2"(["c"],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("bar")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"bar">
            	 )
           )
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
          a
         )
         cstrs =
         (
         )
         kind =
          int
          (
          )
    )
    type
    (  						
       u
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
          (
           	m
           	poly
           	int
           	(
           	)
          )
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
           a
          )
          cstrs =
          (
          )
          kind =
     )
     type
     (  						
        u
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
           (
            	m
            	poly
            	                      				 'a 
            	  t
            	  (
            	    a
            	  )
           )
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
          a
         )
         cstrs =
         (
         )
         kind =
          int
          (
          )
    )
    let
    (
      f
     (
      case
          (
      	  x
      	  (
      	   	m
      	   	poly
      	   	int
      	   	(
      	   	)
      	  )
           send m
           (
            x
           )
          )
     )
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
           a
          )
          cstrs =
          (
          )
          kind =
     )
     sig_value f
     value_description
     arrow
     (
      	m
      	poly
      	                      				 'a 
      	  t
      	  (
      	    a
      	  )
     )
     int
     (
     )
     (
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
          a
         )
         cstrs =
         (
         )
         kind =
          int
          (
          )
    )
    let
    (
      f
     (
      case
          (
      	  x
           send m
           (
            x
           )
          )
     )
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
           a
          )
          cstrs =
          (
          )
          kind =
     )
     sig_value f
     value_description
     arrow
     (
      	m
      	poly
      	                      				 'a 
      	  t
      	  (
      	    a
      	  )
     )
     int
     (
     )
     (
     )
    )
   let
   (
      f
    (
     case
         (
      		 x
      		(
      		 case
      		     (
      		 	  y
      		      sequence
      		      (
      		        ignore
      		        (
      		            brackets2 
      		            (
      		                x
      		                <"typexprAngleBrackets"(["methodType"("m","polytype2"(["a"],"arrow1"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"star"("tagg"("c")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[[]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"c">
      		            )
      		        )
      		      ;
      		        sequence
      		        (
      		          ignore
      		          (
      		              brackets2 
      		              (
      		                  y
      		                  <"typexprAngleBrackets"(["methodType"("m","polytype2"(["b"],"arrow1"("tagg"("b")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"star"("tagg"("d")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[[]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"d">
      		              )
      		          )
      		        ;
      		          =
      		          (
      		              x
      		              y
      		          )
      		        )
      		      )
      		     )
      		)
         )
    )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         <[],[<"A",[]>,<"B",[]>]>
   )
   type
   (  						
      v
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         t
         (
         )
   )
  (
   case
   (
   x
   (
     x
     :
     t
     (
     )
     v
     (
     )
   )
   )
  )
   type
   (  						
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         <[],["typexprConstr2"("typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>
   )
  (
   case
   (
   x
   (
     x
     :
     u
     (
     )
     v
     (
     )
   )
   )
  )
  (
   case
   (
   x
   (
     x
     :
     v
     (
     )
     u
     (
     )
   )
   )
  )
   type
   (  						
      v
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         <[],["typexprConstr2"("typeConstr"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>
   )
  (
   case
   (
   x
   (
     x
     :
     u
     (
     )
     v
     (
     )
   )
   )
  )
   type
   (  						
      p
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          	x
          	poly
          	p
          	(
          	)
         )
   )
   type
   (  						
      q
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          	x
          	poly
          	p
          	(
          	)
         )
   )
  (
   case
   (
   x
   (
     x
     :
     q
     (
     )
     p
     (
     )
   )
   )
  )
  (
   case
   (
   x
   (
     x
     :
     p
     (
     )
     q
     (
     )
   )
   )
  )
   let
   (
     f1
    (
     case
         (
     	  x
          (
            x
            :
            (
             	m
             	poly
             	                      				 'a 
             	 arrow
             	 <"typexprAngleBrackets"(["methodType"("p","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[<>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
             	 int
             	 (
             	 )
            )
            (
             	m
             	poly
             	                      				 'b 
             	 arrow
             	 <"typexprAngleBrackets"(["methodType"("p","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"methodType"("q","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[<>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
             	 int
             	 (
             	 )
            )
          )
         )
    )
   )
   let
   (
     f2
    (
     case
         (
     	  x
          (
            x
            :
            (
             	m
             	poly
             	                      				 'a 
             	 arrow
             	 <"typexprAngleBrackets"(["methodType"("p","polytype1"("typexprAngleBrackets"(["methodType"("a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[<>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
             	 int
             	 (
             	 )
            )
            (
             	m
             	poly
             	                      				 'b 
             	 arrow
             	 <"typexprAngleBrackets"(["methodType"("p","polytype1"("typexprAngleBrackets"(["methodType"("a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"methodType"("b","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[<>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
             	 int
             	 (
             	 )
            )
          )
         )
    )
   )
   let
   (
     f3
    (
     case
         (
     	  x
          (
            x
            :
            (
             	m
             	poly
             	                      				 'a 
             	 arrow
             	 <"typexprAngleBrackets"(["methodType"("p","polytype1"("typexprAngleBrackets"(["methodType"("a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"methodType"("b","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[<>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"a">
             	 int
             	 (
             	 )
            )
            (
             	m
             	poly
             	                      				 'b 
             	 arrow
             	 <"typexprAngleBrackets"(["methodType"("p","polytype1"("typexprAngleBrackets"(["methodType"("a","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[<>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"b">
             	 int
             	 (
             	 )
            )
          )
         )
    )
   )
   let
   (
     f4
    (
     case
         (
     	  x
          (
            x
            :
            (
             	p
             	poly
             	(
             	 	a
             	 	poly
             	 	int
             	 	(
             	 	)
             	 	b
             	 	poly
             	 	int
             	 	(
             	 	)
             	)
            )
            (
             	p
             	poly
             	(
             	 	a
             	 	poly
             	 	int
             	 	(
             	 	)
             	)
            )
          )
         )
    )
   )
   let
   (
     f5
    (
     case
         (
     	  x
          (
            x
            :
            (
             	m
             	poly
             	                      				 'a 
             	 <<[],[<"A",["typexprAngleBrackets"(["methodType"("p","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>],[]>,"a">
            )
            (
             	m
             	poly
             	                      				 'a 
             	 <<[],[<"A",[],[]>],[]>,"a">
            )
          )
         )
    )
   )
   let
   (
     f6
    (
     case
         (
     	  x
          (
            x
            :
            (
             	m
             	poly
             	                      				 'a 
             	 <<[],[<"A",[],[]>],[]>,"a">
            )
            (
             	m
             	poly
             	                      				 'a 
             	 <<[],[<"A",["typexprAngleBrackets"(["methodType"("p","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>],[]>,"a">
            )
          )
         )
    )
   )
   let
   (
     f
    (
     case
         (
     	  x
          ifthenelse
          (
           if
           (
            true
           )
           then
           (
            (
            x
            :
            (
             	m
             	poly
             	                      				 'a 
             	 arrow
             	 a
             	 a
            )
            )
           )
           else
           (
            x
           ) 
          )
         )
    )
   )
  (
   case
   (
   x
   send m
   (
    f
    (
        x
    )
   )
   )
  )
   let
   (
     f
    (
     case
         (
     	  (
     	   x
     	  	y
     	  )
          ifthenelse
          (
           if
           (
            true
           )
           then
           (
            (
            x
            :
            (
             	m
             	poly
             	                      				 'a 
             	 arrow
             	 a
             	 a
            )
            )
           )
           else
           (
            x
           ) 
          )
         )
    )
   )
  (
   case
   (
   x
   send m
   (
    f
    (
        (
         x
        	x
        )
    )
   )
   )
  )
   let
   (
     f
    (
     case
         (
     	  x
          ifthenelse
          (
           if
           (
            true
           )
           then
           (
            array
            (
             (
             x
             :
             (
              	m
              	poly
              	                      				 'a 
              	 arrow
              	 a
              	 a
             )
             )
            )
           )
           else
           (
            array
            (
             x
            )
           ) 
          )
         )
    )
   )
  (
   case
   (
   x
   send m
   (
    Array.get
    (
     f
     (
         x
     )
     0
    )
   )
   )
  )
   class
   (
     params = 
     (
     )
     class name = c
     class expr = 
       class_structure
       (
          method id
          	(
          	 case
          	 (
          	 x
          	 x
          	 )
          	)
          	poly
          	                      				 'a 
          	 arrow
          	 a
          	 a
       )
   )
   type
   (  						
      u
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
          option
          (
            c
            (
            )
          )
   )
   let
   (
     just
     (
      case
      (
        None
        failwith
        (
            "just"
        )
      ) 
        case
        (
         Some
         x
         x
        )
     )
   )
   let
   (
     f
    (
     case
         (
     	  x
          let
          (
           (
             l
             ::
              (
              Some
                 x
              ::
              (
              (
              None
              :
              u
              (
              )
              )
              []
              ) 
              ) 
           )
          in
            send id
            (
             just
             (
                 List.hd
                 (
                     l
                 )
             )
            )
          )
         )
    )
   )
   let
   (
     g
    (
     case
         (
     	  x
          let
          (
           (
             none
             (
              case
              (
              y
              sequence
              (
                ignore
                (
                    ::
                     (
                     y
                     ::
                     (
                     (
                     None
                     :
                     u
                     (
                     )
                     )
                     []
                     ) 
                     ) 
                )
              ;
                y
              )
              )
             )
             (
                 None
             ) 
           )
          in
            let
            (
             (
               x
               List.hd
               (
                   ::
                    (
                    Some
                       x
                    ::
                    (
                    none
                    []
                    ) 
                    ) 
               ) 
             )
            in
              send id
              (
               just
               (
                   x
               )
              )
            )
          )
         )
    )
   )
   let
   (
     h
    (
     case
         (
     	  x
          let
          (
           (
             none
             let
             (
              (
                y
                None 
              )
             in
               sequence
               (
                 ignore
                 (
                     ::
                      (
                      y
                      ::
                      (
                      (
                      None
                      :
                      u
                      (
                      )
                      )
                      []
                      ) 
                      ) 
                 )
               ;
                 y
               )
             )
           )
          in
            let
            (
             (
               x
               List.hd
               (
                   ::
                    (
                    Some
                       x
                    ::
                    (
                    none
                    []
                    ) 
                    ) 
               ) 
             )
            in
              send id
              (
               just
               (
                   x
               )
              )
            )
          )
         )
    )
   )
   type
   (  						
      u
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
          option
          (
            c
            (
            )
          )
   )
   let
   (
     just
     (
      case
      (
        None
        failwith
        (
            "just"
        )
      ) 
        case
        (
         Some
         x
         x
        )
     )
   )
   let
   (
     f
    (
     case
         (
     	  x
          let
          (
           (
             l
             ::
              (
              Some
                 x
              ::
              (
              (
              None
              :
               u
               (
                 <>
               )
              )
              []
              ) 
              ) 
           )
          in
            send id
            (
             just
             (
                 List.hd
                 (
                     l
                 )
             )
            )
          )
         )
    )
   )
   let
   (
    polyLetBiding 
    (
        f
        poly
                              				 'a 
         arrow
         a
         <>
        (
         case
         (
         x
         1
         )
        )
    )  
    g
   (
    case
        (
    	  x
         f
         (
             x
         )
        )
   )
   )
   type
   (  						
      t
        type
        params=
        (
         a
        )
        cstrs =
        (
        )
        kind =
         (
         Leaf
         (
          a
         )
         Node
         (
           t
           (
             tuple
             (
              a
               a
             )
           )
         )
         )
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a 
         arrow
          t
          (
            a
          )
         <>
        (
         case
         (
           Leaf
           _
           1
         ) 
           case
           (
            Node
            x
            +
            (
                1
                depth
                (
                    x
                )
            )
           )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a 
         arrow
          t
          (
            a
          )
         <>
        (
         case
         (
           Leaf
           _
           1
         ) 
           case
           (
            Node
            x
            +
            (
                1
                d
                (
                    x
                )
            )
           )
        )
    )  
    d
   (
    case
        (
    	  x
         depth
         (
             x
         )
        )
   )
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a 
         arrow
          t
          (
            a
          )
         <>
        (
         case
         (
           Leaf
           x
           x
         ) 
           case
           (
            Node
            x
            +
            (
                1
                depth
                (
                    x
                )
            )
           )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a 
         arrow
          t
          (
            a
          )
         <>
        (
         case
         (
           Leaf
           x
           x
         ) 
           case
           (
            Node
            x
            depth
            (
                x
            )
           )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        depth
        poly
                              				 'a  'b 
         arrow
          t
          (
            a
          )
         b
        (
         case
         (
           Leaf
           x
           x
         ) 
           case
           (
            Node
            x
            depth
            (
                x
            )
           )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        r
        poly
                              				 'a 
         tuple
         (
           list
           (
             a
           )
            ref
            (
               list
               (
                 b
               )
            )
         )
        (
         []
        	ref
        	(
        	    []
        	)
        )
    )  
    q
   (
    case
        (
    	  ()
         r
        )
   )
   )
   let
   (
    polyLetBiding 
    (
        f
        poly
                              				 'a 
         arrow
         <>
         <>
        (
         case
         (
         x
         x
         )
        )
    ) 
   )
   let
   (
    polyLetBiding 
    (
        zero
        poly
                              				 'a 
         <[<"Int",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"B",["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>],"a">
        Int
           0
    ) 
   )
   let
   (
    polyLetBiding 
    (
        zero
        poly
                              				 'a 
         <<[],[<"Int",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>],[]>,"a">
        Int
           0
    ) 
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          f
          poly
                                				 'a 
           <[<"Int",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"B",["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>],"a">
         )
   )
   let
   (
     zero
     record
     (
      f
      Int
         0
     ) 
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          f
          poly
                                				 'a 
           <<[],[<"Int",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[]>],[]>,"a">
         )
   )
   let
   (
     zero
     record
     (
      f
      Int
         0
     ) 
   )
   let
   (
    polyLetBiding 
    (
        id
        poly
                              				 'a 
         arrow
         a
         a
        (
         case
         (
         x
         x
         )
        )
    )  
     neg
   (
    case
        (
     		 i
     		(
     		 case
     		     (
     		 	  b
     		      (
     		       id
     		       (
     		           ~-
     		           (
     		            i
     		           )
     		       )
     		      	id
     		      	(
     		      	    not
     		      	    (
     		      	        b
     		      	    )
     		      	)
     		      )
     		     )
     		)
        )
   )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
         A
         (
          int
          (
          )
         )
         B
         (
           list
           (
             tuple
             (
              int
              (
              )
               t
               (
               )
             )
           )
         )
         C
         (
           list
           (
             tuple
             (
              string
              (
              )
               t
               (
               )
             )
           )
         )
         )
   )
   let
   (
     transf
    (
     case
         (
     	  f
          (
           case
           (
             A
             x
             f
             (
                 x
             )
           ) 
             case
             (
              B
              l
              B
                 transf_alist
                 (
                     f
                     l
                 )
             )
             case
             (
              C
              l
              C
                 transf_alist
                 (
                     f
                     l
                 )
             )
          )
         )
    )
        		     polyLetBiding 
   (
       transf_alist
       poly
                             				 'a 
        arrow
        <>
        arrow
         list
         (
           tuple
           (
            a
             t
             (
             )
           )
         )
         list
         (
           tuple
           (
            a
             t
             (
             )
           )
         )
       (
        case
        (
        f
        (
         case
         (
           []
           []
         ) 
           case
           (
            ::
            (
                (
                 k
                	v
                )
                tl
            )
            ::
            (
                (
                 k
                	transf
                	(
                	    f
                	    v
                	)
                )
                transf_alist
                (
                    f
                    tl
                )
            )
           )
        )
        )
       )
   ) 
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          f
          poly
                                				 'a 
            Lazy.t
            (
              arrow
               list
               (
                 a
               )
              int
              (
              )
            )
         )
   )
   let
   (
     l
     (
      record
      (
       f
       lazy
         raise
         (
             Not_found
         )
      ) 
      :
      t
      (
      )
     )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          f
          poly
                                				 'a 
           arrow
           a
           unit
           (
           )
         )
   )
  let
  (
   (
      f
    (
     case
         (
      		 x
      		(
      		 case
      		     (
      		 	  y
      		      ()
      		     )
      		)
         )
    )
   )
  in
    record
    (
     f
     f
    )
  )
  let
  (
   (
      f
    (
     case
         (
      		 x
      		(
      		 case
      		     (
      		 	  y
      		      y
      		     )
      		)
         )
    )
   )
  in
    record
    (
     f
     f
    )
  )
   module  Polux
    struct
    (
    type
    (  						
       t
         type
         params=
         (
          par
         )
         cstrs =
         (
         )
         kind =
          par
    )
    let
    (
      ident
     (
      case
          (
      	  v
           v
          )
     )
    )
    class
    (
      params = 
      (
      )
      class name = alias
      class expr = 
        class_structure
        (
           method alias
           	ident
           	poly
           	                      				 'a 
           	 arrow
           	  t
           	  (
           	    a
           	  )
           	 a
        )
    )
    let
    (
      f
     (
      case
          (
      	  x
      	  (
      	   	m
      	   	poly
      	   	                      				 'a 
      	   	  t
      	   	  (
      	   	    a
      	   	  )
      	  )
           (
           x
           :
           (
            	m
            	poly
            	                      				 'a 
            	 a
           )
           )
          )
     )
    )
    )
   let
   (
     (
      a
     	b
     )
     (
     raise
     (
         Exit
     )
     :
     tuple
     (
      int
      (
      )
       int
       (
       )
     )
     )
   )
   type
   (  						
      t
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
          foo
          poly
          int
          (
          )
         )
   )
   let
   (
     patternRec 
     (
         foo
     )
     (
     raise
     (
         Exit
     )
     :
     t
     (
     )
     )
   )
   type
   (  						
      s
        type
        params=
        (
        )
        cstrs =
        (
        )
        kind =
         (
         A
         (
          int
          (
          )
         )
         )
   )
   let
   (
     A
     x
     (
     raise
     (
         Exit
     )
     :
     s
     (
     )
     )
   )
   type
   (  						
      t
        type
        params=
        (
         x
        )
        cstrs =
        (
        )
        kind =
         (
          	f
          	poly
          	                      				 'y 
          	  t
          	  (
          	    y
          	  )
         )
   )
)
