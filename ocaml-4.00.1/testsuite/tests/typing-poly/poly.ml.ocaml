(
  open StdLabels
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              t
                  poly
                  
                    a
            )
            )
  type
  (
    fold
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              fold
                  poly
                   'b
                    arrow
                    f
                      arrow
                      
                        b
                        arrow
                        
                          a
                          b
                      arrow
                      init
                        b
                        b
            )
            )
  let
  (
    f
      (
        case
        (
          l
          record
          (
            fold
              List.fold_left
              (
                
                  l
              )
          )
                  )
      )
  )
  field
  (
  f
  (
    
      ::
        (
          1
          ::
            (
              2
              ::
                (
                  3
                  []
                                  )
            )
        )
  )
  fold
  )
  (
    f
      +
    init
      0
  )
  class
  (
      params =
          (
            "b"
          )
      class name = ilist
      class expr =
                    l
            class_structure
              (
                l
                  l
                method add
                  (
                    case
                    (
                      x
                      (
                        l
                          ::
                            (
                              x
                              l
                            )
                      )
                    )
                  )
                                  method fold
                  List.fold_left
                  (
                    
                      l
                  )
                      poly
                       'a
                        arrow
                        f
                          arrow
                          
                            a
                            arrow
                            
                              b
                              a
                          arrow
                          init
                            a
                            a
              )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = vlist
      class expr =
          class_structure
            (
              add 
                  poly
                  
                    arrow
                    
                      a
                      self
              fold 
                  poly
                   'b
                    arrow
                    f
                      arrow
                      
                        b
                        arrow
                        
                          a
                          b
                      arrow
                      init
                        b
                        b
            )
  )
  class
  (
      params =
          (
          )
      class name = ilist2
      class expr =
                    l
            class_structure
              (
                inherit
                    constr vlist
                    (
                         int
                        (
                        )
                    )
                l
                  l
                method add
                  (
                    case
                    (
                      x
                      (
                        l
                          ::
                            (
                              x
                              l
                            )
                      )
                    )
                  )
                                  method fold
                  List.fold_left
                  (
                    
                      l
                  )
                                )
  )
  let
  (
    ilist2
      (
        case
        (
          l
          class_structure
            (
              inherit
                  constr vlist
                  (
                      
                  )
              l
                l
              method add
                (
                  case
                  (
                    x
                    (
                      l
                        ::
                          (
                            x
                            l
                          )
                    )
                  )
                )
                              method fold
                List.fold_left
                (
                  
                    l
                )
                            )
        )
      )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = ilist3
      class expr =
                    l
            class_structure
              (
                inherit
                    constr vlist
                    (
                        a
                    )
                l
                  l
                method add
                  (
                    case
                    (
                      x
                      (
                        l
                          ::
                            (
                              x
                              l
                            )
                      )
                    )
                  )
                                  method fold
                  List.fold_left
                  (
                    
                      l
                  )
                                )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = ilist4
      class expr =
                    l
             list
            (
                a
            )
            class_structure
              (
                l
                  l
                add 
                    poly
                    
                      
                method add
                  (
                    case
                    (
                      x
                      (
                        l
                          ::
                            (
                              x
                              l
                            )
                      )
                    )
                  )
                                  fold 
                    poly
                     'b
                      arrow
                      f
                        arrow
                        
                          b
                          arrow
                          
                            a
                            b
                        arrow
                        init
                          b
                          b
                method fold
                  List.fold_left
                  (
                    
                      l
                  )
                                )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = ilist5
      class expr =
                    l
             list
            (
                a
            )
            class_structure
              (
                l
                  l
                method add
                  (
                    case
                    (
                      x
                      (
                        l
                          ::
                            (
                              x
                              l
                            )
                      )
                    )
                  )
                                  fold 
                    poly
                     'b
                      arrow
                      f
                        arrow
                        
                          b
                          arrow
                          
                            a
                            b
                        arrow
                        init
                          b
                          b
                fold2 
                    poly
                     'b
                      arrow
                      f
                        arrow
                        
                          b
                          arrow
                          
                            a
                            b
                        arrow
                        init
                          b
                          b
                method fold2
                  (
                    case
                    (
                      f
                      (
                        case
                        (
                          init
                          send fold
                          (
                            self
                          )
                          (
                            f
                              f
                            init
                              send fold
                              (
                                self
                              )
                              (
                                f
                                  f
                                init
                                  init
                              )
                          )
                        )
                      )
                    )
                  )
                                  method fold
                  List.fold_left
                  (
                    
                      l
                  )
                                )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = ilist6
      class expr =
                    l
            class_structure
              (
                inherit
                    constr vlist
                    (
                        a
                    )
                l
                  l
                method add
                  (
                    case
                    (
                      x
                      (
                        l
                          ::
                            (
                              x
                              l
                            )
                      )
                    )
                  )
                                  fold2 
                    poly
                     'b
                      arrow
                      f
                        arrow
                        
                          b
                          arrow
                          
                            a
                            b
                        arrow
                        init
                          b
                          b
                method fold2
                  (
                    case
                    (
                      f
                      (
                        case
                        (
                          init
                          send fold
                          (
                            self
                          )
                          (
                            f
                              f
                            init
                              send fold
                              (
                                self
                              )
                              (
                                f
                                  f
                                init
                                  init
                              )
                          )
                        )
                      )
                    )
                  )
                                  method fold
                  List.fold_left
                  (
                    
                      l
                  )
                                )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = olist
      class expr =
          class_structure
            (
              fold 
                  poly
                   'c
                    arrow
                    f
                      arrow
                      
                        a
                        arrow
                        
                          c
                          c
                      arrow
                      init
                        c
                        c
            )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = onil
      class expr =
          class_structure
            (
              inherit
                  constr olist
                  (
                      a
                  )
              method fold
                (
                  case
                  (
                    f
                    (
                      case
                      (
                        init
                        init
                      )
                    )
                  )
                )
                            )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = ocons
      class expr =
                    hd
                        tl
              class_structure
                (
                  inherit
                      constr olist
                      (
                          a
                      )
                  hd
                    (
                    hd
                    :
                        a
                                        )
                  tl
                    (
                    tl
                    :
                         olist
                        (
                            a
                        )
                                        )
                  method fold
                    (
                      case
                      (
                        f
                        (
                          case
                          (
                            init
                            f
                            (
                              
                                hd
                              
                                send fold
                                (
                                  tl
                                )
                                (
                                  f
                                    f
                                  init
                                    init
                                )
                            )
                          )
                        )
                      )
                    )
                                    )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = ostream
      class expr =
                    hd
                        tl
              class_structure
                (
                  inherit
                      constr olist
                      (
                          a
                      )
                  hd
                    (
                    hd
                    :
                        a
                                        )
                  tl
                    (
                    (
                    tl
                    :
                         ostream
                        (
                            a
                        )
                                        )
                    :
                        olist
                        (
                            
                        )
                                        )
                  method fold
                    (
                      case
                      (
                        f
                        (
                          case
                          (
                            init
                            f
                            (
                              
                                hd
                              
                                send fold
                                (
                                  tl
                                )
                                (
                                  f
                                    f
                                  init
                                    init
                                )
                            )
                          )
                        )
                      )
                    )
                                      method empty
                    false
                                                        )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = ostream1
      class expr =
                    hd
                        tl
              class_structure
                (
                  inherit
                      constr olist
                      (
                          a
                      )
                  hd
                    hd
                  tl
                    (
                    tl
                    :
                        b
                                        )
                  method hd
                    hd
                                      method tl
                    tl
                                      method fold
                    (
                      case
                      (
                        f
                        (
                          case
                          (
                            init
                            send fold
                            (
                              send tl
                              (
                                self
                              )
                            )
                            (
                              f
                                f
                              init
                                f
                                (
                                  
                                    send hd
                                    (
                                      self
                                    )
                                  
                                    init
                                )
                            )
                          )
                        )
                      )
                    )
                                    )
  )
  class
  (
      params =
          (
          )
      class name = vari
      class expr =
          class_structure
            (
              m 
                  poly
                   'a
                    arrow
                    
                      a
                        (
                          A
                            (
                            )
                          B
                            (
                            )
                          C
                            (
                            )
                        )
                          (
                          )
                       int
                      (
                      )
              method m
                (
                  case
                  (
                    A
                                        1
                  )
                  case
                  (
                    pat_or
                    (
                    B
                                        C
                                        )
                    0
                  )
                )
                            )
  )
  class
  (
      params =
          (
          )
      class name = vari
      class expr =
          class_structure
            (
              method m
                (
                  case
                  (
                    A
                                        1
                  )
                  case
                  (
                    pat_or
                    (
                    B
                                        C
                                        )
                    0
                  )
                )
                    poly
                     'a
                      arrow
                      
                        a
                          (
                            A
                              (
                              )
                            B
                              (
                              )
                            C
                              (
                              )
                          )
                            (
                            )
                         int
                        (
                        )
            )
  )
  module V
    struct
    (
      type
      (
        v
          type
            params =
              (
              )
            cstrs =
              (
              )
            kind =
              
                  (
                    A
                      (
                      )
                    B
                      (
                      )
                    C
                      (
                      )
                  )
                        )
      let
      (
        m
          (
          (
            case
            (
              A
                            1
            )
            case
            (
              v
              0
            )
          )
          :
              arrow
              
                (
                       v
                      (
                      )
                )
                  (
                  )
                 int
                (
                )
                    )
      )
    )
  class
  (
      params =
          (
          )
      class name = varj
      class expr =
          class_structure
            (
              m 
                  poly
                   'a
                    arrow
                    
                      a
                        (
                               V.v
                              (
                              )
                        )
                          (
                          )
                       int
                      (
                      )
              method m
                V.m
                            )
  )
  module type T
    signature
    (
        sig_class
        (
          class_description
            params =
                (
                )
            name = vari
            expr =
              class_type
                signature
                class_signature
                    
                  (
                        poly
                         'a
                          arrow
                          
                            a
                              (
                                A
                                  (
                                  )
                                B
                                  (
                                  )
                                C
                                  (
                                  )
                              )
                                (
                                )
                             int
                            (
                            )
                  )
        )
    )
  module M0
    struct
    (
      class
      (
          params =
              (
              )
          class name = vari
          class expr =
              class_structure
                (
                  m 
                      poly
                       'a
                        arrow
                        
                          a
                            (
                              A
                                (
                                )
                              B
                                (
                                )
                              C
                                (
                                )
                            )
                              (
                              )
                           int
                          (
                          )
                  method m
                    (
                      case
                      (
                        A
                                                1
                      )
                      case
                      (
                        pat_or
                        (
                        B
                                                C
                                                )
                        0
                      )
                    )
                                    )
      )
    )
  module M
      M0
      T
  let
  (
    v
      new M.vari
  )
  send m
  (
    v
  )
  (
    
      A
        )
  class
  (
      params =
          (
          )
      class name = point
      class expr =
                    x
                        y
              class_structure
                (
                  x
                    (
                    x
                    :
                         int
                        (
                        )
                                        )
                  y
                    (
                    y
                    :
                         int
                        (
                        )
                                        )
                  method x
                    x
                                      method y
                    y
                                    )
  )
  class
  (
      params =
          (
          )
      class name = color_point
      class expr =
                    x
                        y
                            color
                class_structure
                  (
                    inherit
                        Pcl_apply
                          constr point
                          (
                          )
                        (
                          x
                            x
                          y
                            y
                        )
                    color
                      (
                      color
                      :
                           string
                          (
                          )
                                            )
                    method color
                      color
                                        )
  )
  class
  (
      params =
          (
          )
      class name = circle
      class expr =
                    p
            point
            (
            )
                        r
              class_structure
                (
                  p
                    (
                    p
                    :
                                             point
                        (
                        )
                    )
                  r
                    r
                  distance 
                      poly
                       'a
                        arrow
                        
                          a
                            point
                            (
                            )
                           float
                          (
                          )
                  method distance
                    (
                      case
                      (
                        p'
                        let
                        (
                          (
                            dx
                              -
                              (
                                
                                  send x
                                  (
                                    p
                                  )
                                
                                  send x
                                  (
                                    p'
                                  )
                              )
                            dy
                              -
                              (
                                
                                  send y
                                  (
                                    p
                                  )
                                
                                  send y
                                  (
                                    p'
                                  )
                              )
                          )
                        in
                          let
                          (
                            (
                              d
                                -.
                                (
                                  
                                    sqrt
                                    (
                                      
                                        float
                                        (
                                          
                                            +
                                            (
                                              
                                                *
                                                (
                                                  
                                                    dx
                                                  
                                                    dx
                                                )
                                              
                                                *
                                                (
                                                  
                                                    dy
                                                  
                                                    dy
                                                )
                                            )
                                        )
                                    )
                                  
                                    float
                                    (
                                      
                                        r
                                    )
                                )
                            )
                          in
                            ifthenelse
                            (
                              if
                              (
                                <
                                (
                                  
                                    d
                                  
                                    0.
                                )
                              )
                              then
                              (
                                0.
                              )
                              else
                              (
                                  d
                              )
                            )
                          )
                        )
                      )
                    )
                                    )
  )
  let
  (
    p0
      new point
      (
        x
          3
        y
          5
      )
  )
  let
  (
    p1
      new point
      (
        x
          10
        y
          13
      )
  )
  let
  (
    cp
      new color_point
      (
        x
          12
        y
          -5
        color
          "green"
      )
  )
  let
  (
    c
      new circle
      (
        
          p0
        r
          2
      )
  )
  let
  (
    d
      send distance
      (
        c
      )
      (
        
          cp
      )
  )
  let
  (
    f
      (
        case
        (
          x
            (
                m
                  poly
                   'a
                    arrow
                    
                      a
                      a
            )
          (
          x
          :
              (
                  m
                    poly
                     'b
                      arrow
                      
                        b
                        b
              )
                    )
        )
      )
  )
  let
  (
    f
      (
        case
        (
          x
            (
                m
                  poly
                   'a
                    arrow
                    
                      a
                       list
                      (
                          a
                      )
            )
          (
          x
          :
              (
                  m
                    poly
                     'b
                      arrow
                      
                        b
                        c
              )
                    )
        )
      )
  )
  class
  (
      params =
          (
          )
      class name = id
      class expr =
          class_structure
            (
              id 
                  poly
                   'a
                    arrow
                    
                      a
                      a
              method id
                (
                  case
                  (
                    x
                    x
                  )
                )
                            )
  )
  class_type
  (
    class_type_declaration
      params =
          (
          )
      name = id_spec
      expr =
        class_type
          signature
          class_signature
              
            (
                  poly
                  
                    arrow
                    
                      a
                      a
            )
  )
  class
  (
      params =
          (
          )
      class name = id_impl
      class expr =
          class_structure
            (
              method id
                (
                  case
                  (
                    x
                    x
                  )
                )
                            )
  )
  class
  (
      params =
          (
          )
      class name = a
      class expr =
          class_structure
            (
              method m
                send id
                (
                  (
                  new b
                  :
                       id_spec
                      (
                      )
                                    )
                )
                (
                  
                    true
                                    )
                            )
      params =
          (
          )
      class name = b
      class expr =
          class_structure
            (
              method id
                (
                  case
                  (
                    x
                    x
                  )
                )
                            )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = id1
      class expr =
          class_structure
            (
              id 
                  poly
                   'b
                    arrow
                    
                      b
                      a
              method id
                (
                  case
                  (
                    x
                    x
                  )
                )
                            )
  )
  class
  (
      params =
          (
          )
      class name = id2
      class expr =
                    x
            a
            class_structure
              (
                id 
                    poly
                     'b
                      arrow
                      
                        b
                        a
                method id
                  (
                    case
                    (
                      x
                      x
                    )
                  )
                                )
  )
  class
  (
      params =
          (
          )
      class name = id3
      class expr =
                    x
            class_structure
              (
                x
                  x
                id 
                    poly
                     'a
                      arrow
                      
                        a
                        a
                method id
                  (
                    case
                    (
                      _
                      x
                    )
                  )
                                )
  )
  class
  (
      params =
          (
          )
      class name = id4
      class expr =
                    ()
                      class_structure
              (
                r
                  None
                                  id 
                    poly
                     'a
                      arrow
                      
                        a
                        a
                method id
                  (
                    case
                    (
                      x
                      match
                      r
                      (
                        case
                        (
                          None
                                                    sequence
                          (
                            Pexp_setinstvar "r"
                            Some
                              x
                          ;
                            x
                          )
                        )
                        case
                        (
                          Some
                            y
                          y
                        )
                      )
                    )
                  )
                                )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              m 
                  poly
                   'a 'b
                    arrow
                    
                      a
                      arrow
                      
                        b
                        a
              method m
                (
                  case
                  (
                    x
                    (
                      case
                      (
                        y
                        x
                      )
                    )
                  )
                )
                            )
  )
  let
  (
    f1
      (
        case
        (
          f
             id
            (
            )
          (
            send id
            (
              f
            )
            (
              
                1
            )
            send id
            (
              f
            )
            (
              
                true
                            )
          )
        )
      )
  )
  let
  (
    f2
      (
        case
        (
          f
          (
            send id
            (
              (
              f
              :
                   id
                  (
                  )
                            )
            )
            (
              
                1
            )
            send id
            (
              (
              f
              :
                   id
                  (
                  )
                            )
            )
            (
              
                true
                            )
          )
        )
      )
  )
  let
  (
    f3
      (
        case
        (
          f
          (
            send id
            (
              f
            )
            (
              
                1
            )
            send id
            (
              f
            )
            (
              
                true
                            )
          )
        )
      )
  )
  let
  (
    f4
      (
        case
        (
          f
          sequence
          (
            ignore
            (
              
                (
                f
                :
                     id
                    (
                    )
                                )
            )
          ;
            (
              send id
              (
                f
              )
              (
                
                  1
              )
              send id
              (
                f
              )
              (
                
                  true
                                )
            )
          )
        )
      )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              m 
                  poly
                   'a
                    arrow
                    
                      a
                        id
                        (
                        )
                      tuple
                      (
                           int
                          (
                          )
                           bool
                          (
                          )
                      )
              method m
                (
                  case
                  (
                    f
                      id
                      (
                      )
                    (
                      send id
                      (
                        f
                      )
                      (
                        
                          1
                      )
                      send id
                      (
                        f
                      )
                      (
                        
                          true
                                                )
                    )
                  )
                )
                            )
  )
  class
  (
      params =
          (
          )
      class name = id2
      class expr =
          class_structure
            (
              id 
                  poly
                   'a
                    arrow
                    
                      a
                      a
              method id
                (
                  case
                  (
                    x
                    x
                  )
                )
                              method mono
                (
                  case
                  (
                    x
                       int
                      (
                      )
                    x
                  )
                )
                            )
  )
  let
  (
    app
      send m
      (
        new c
      )
      (
        
          new id2
      )
  )
  type
  (
    foo
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
               list
              (
                   foo
                  (
                      a
                  )
              )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = bar
      class expr =
                    x
            a
            class_structure
              (
              )
  )
  type
  (
    foo
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
               bar
              (
                   foo
                  (
                      a
                  )
              )
  )
  (
    case
    (
      x
      send m
      (
        (
        x
        :
            b
              (
                  m
                    poly
                     'a
                      tuple
                      (
                          a
                          b
                      )
              )
                )
      )
    )
  )
  (
    case
    (
      x
      send m
      (
        (
        x
        :
            b
              (
                  m
                    poly
                     'a
                      tuple
                      (
                          b
                           list
                          (
                              a
                          )
                      )
              )
                )
      )
    )
  )
  let
  (
    f
      (
        case
        (
          x
          send m
          (
            (
            x
            :
                b
                  (
                      m
                        poly
                         'a
                          tuple
                          (
                              b
                              a
                                (
                                    n
                                      poly
                                      
                                        a
                                    
                                )
                          )
                  )
                        )
          )
        )
      )
  )
  (
    case
    (
      x
        b
          (
              p
                poly
                 'a
                  a
                    (
                        m
                          poly
                          
                            a
                        n
                          poly
                          
                            b
                        
                    )
          )
      send p
      (
        x
      )
    )
  )
  (
    case
    (
      x
        d
          (
              m
                poly
                 'a
                  c
                    tuple
                    (
                        a
                        (
                            p
                              poly
                               'b
                                tuple
                                (
                                    b
                                    c
                                    d
                                )
                        )
                    )
          )
      send m
      (
        x
      )
    )
  )
  (
    case
    (
      x
        (
            m
              poly
               'a
                (
                    p
                      poly
                      
                        a
                    
                )
        )
      send m
      (
        x
      )
    )
  )
  type
  (
    sum
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              T
                (
                    (
                        id
                          poly
                           'a
                            arrow
                            
                              a
                              a
                    )
                )
                            )
            )
  (
    case
    (
      T
        x
      send id
      (
        x
      )
    )
  )
  type
  (
    record
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              r
                  poly
                  
                    (
                        id
                          poly
                           'a
                            arrow
                            
                              a
                              a
                    )
            )
            )
  (
    case
    (
      x
      send id
      (
        field
        (
        x
        r
        )
      )
    )
  )
  (
    case
    (
      (
        r
          x
      )
      send id
      (
        x
      )
    )
  )
  class
  (
      params =
          (
          )
      class name = myself
      class expr =
          class_structure
            (
              method self
                (
                  case
                  (
                    _
                    self
                  )
                )
                    poly
                     'a
                      arrow
                      
                        a
                        b
            )
  )
  class
  (
      params =
          (
          )
      class name = number
      class expr =
          class_structure
            (
              num
                0
              method num
                num
                              method succ
                (
                  num
                    +
                    (
                      
                        num
                      
                        1
                    )
                )
                              method prev
                send switch
                (
                  self
                )
                (
                  zero
                    (
                      case
                      (
                        ()
                                                failwith
                        (
                          
                            "zero"
                        )
                      )
                    )
                  prev
                    (
                      case
                      (
                        x
                        x
                      )
                    )
                )
                              method switch
                (
                  case
                  (
                    zero
                    (
                      case
                      (
                        prev
                        ifthenelse
                        (
                          if
                          (
                            =
                            (
                              
                                num
                              
                                0
                            )
                          )
                          then
                          (
                            zero
                            (
                              
                                ()
                                                            )
                          )
                          else
                          (
                              prev
                              (
                                
                                  (
                                    num
                                      -
                                      (
                                        
                                          num
                                        
                                          1
                                      )
                                  )
                              )
                          )
                        )
                      )
                    )
                  )
                )
                    poly
                     'a
                      arrow
                      zero
                        arrow
                        
                           unit
                          (
                          )
                          a
                        arrow
                        prev
                          arrow
                          
                            self
                            a
                          a
            )
  )
  let
  (
    id
      (
        case
        (
          x
          x
        )
      )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method id
                id
                    poly
                     'a
                      arrow
                      
                        a
                        a
            )
  )
  class
  (
      params =
          (
          )
      class name = c'
      class expr =
          class_structure
            (
              inherit
                  constr c
                  (
                  )
              method id
                id
                            )
  )
  class
  (
      params =
          (
          )
      class name = d
      class expr =
          class_structure
            (
              inherit
                  constr c
                  (
                  )
              count
                0
              method id
                (
                  case
                  (
                    x
                    sequence
                    (
                      Pexp_setinstvar "count"
                      +
                      (
                        
                          count
                        
                          1
                      )
                    ;
                      x
                    )
                  )
                )
                              method count
                count
                              method old
                send id
                (
                  c
                )
                    poly
                     'a
                      arrow
                      
                        a
                        a
            )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = olist
      class expr =
                    l
            class_structure
              (
                l
                  l
                method fold
                  List.fold_right
                  (
                    
                      l
                  )
                      poly
                       'b
                        arrow
                        f
                          arrow
                          
                            a
                            arrow
                            
                              b
                              b
                          arrow
                          init
                            b
                            b
                method cons
                  (
                    case
                    (
                      a
                      (
                        l
                          ::
                            (
                              a
                              l
                            )
                      )
                    )
                  )
                                )
  )
  let
  (
    sum
      (
        case
        (
          l
            olist
            (
                a
            )
          send fold
          (
            l
          )
          (
            f
              (
                case
                (
                  x
                  (
                    case
                    (
                      acc
                      +
                      (
                        
                          x
                        
                          acc
                      )
                    )
                  )
                )
              )
            init
              0
          )
        )
      )
  )
  let
  (
    count
      (
        case
        (
          l
            olist
            (
                a
            )
          send fold
          (
            l
          )
          (
            f
              (
                case
                (
                  _
                  (
                    case
                    (
                      acc
                      +
                      (
                        
                          acc
                        
                          1
                      )
                    )
                  )
                )
              )
            init
              0
          )
        )
      )
  )
  let
  (
    append
      (
        case
        (
          l
            olist
            (
                a
            )
          (
            case
            (
              l'
                olist
                (
                    b
                )
              send fold
              (
                l
              )
              (
                init
                  l'
                f
                  (
                    case
                    (
                      x
                      (
                        case
                        (
                          acc
                          send cons
                          (
                            acc
                          )
                          (
                            
                              x
                          )
                        )
                      )
                    )
                  )
              )
            )
          )
        )
      )
  )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
               unit
              (
              )
  )
  class
  (
      params =
          (
          )
      class name = o
      class expr =
          class_structure
            (
              method x
                (
                  case
                  (
                    _
                    ()
                                      )
                )
                    poly
                     'a
                      arrow
                      
                         t
                        (
                            a
                              (
                                A
                                  (
                                  )
                              )
                                                      )
                         unit
                        (
                        )
            )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method m
                new d
                (
                  
                    ()
                                    )
                            )
      params =
          (
          )
      class name = d
      class expr =
            0
          x
                        ()
                          class_structure
                (
                )
  )
  class
  (
      params =
          (
          )
      class name = d
      class expr =
            0
          x
                        ()
                          class_structure
                (
                )
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method m
                new d
                (
                  
                    ()
                                    )
                            )
  )
  class_type
  (
    class_type_declaration
      params =
          (
          )
      name = numeral
      expr =
        class_type
          signature
          class_signature
              
            (
                  poly
                  
                    arrow
                    
                      arrow
                      
                        a
                        a
                      arrow
                      
                        a
                        a
            )
  )
  class
  (
      params =
          (
          )
      class name = zero
      class expr =
          class_structure
            (
              method fold
                (
                  case
                  (
                    f
                    (
                      case
                      (
                        x
                        x
                      )
                    )
                  )
                )
                            )
  )
  class
  (
      params =
          (
          )
      class name = next
      class expr =
                    n
            numeral
            (
            )
            class_structure
              (
                method fold
                  (
                    case
                    (
                      f
                      (
                        case
                        (
                          x
                          send fold
                          (
                            n
                          )
                          (
                            
                              f
                            
                              f
                              (
                                
                                  x
                              )
                          )
                        )
                      )
                    )
                  )
                                )
  )
  class_type
  (
    class_type_declaration
      params =
          (
          )
      name = node_type
      expr =
        class_type
          signature
          class_signature
              
            (
                  poly
                  
                    (
                      Node
                        (
                             node_type
                            (
                            )
                        )
                    )
                                )
  )
  class
  (
      params =
          (
          )
      class name = node
      class expr =
          constraint
            class_structure
              (
                method as_variant
                  Node
                    (
                    self
                    :
                                             node_type
                        (
                        )
                    )
                      poly
                       'a
                        a
                          (
                            Node
                              (
                                   node_type
                                  (
                                  )
                              )
                          )
                                        )
          class_type
            constr node_type
            (
            )
  )
  class
  (
      params =
          (
          )
      class name = node
      class expr =
          class_structure
            (
              method as_variant
                Node
                  (
                  self
                  :
                                         node_type
                      (
                      )
                  )
                            )
  )
  type
  (
    bad
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              bad
                  poly
                   'a
                     ref
                    (
                         option
                        (
                            a
                        )
                    )
            )
            )
  let
  (
    bad
      record
      (
        bad
          ref
          (
            
              None
                        )
      )
        )
  type
  (
    bad2
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              bad2
                  poly
                   'a
                     option
                    (
                         ref
                        (
                             option
                            (
                                a
                            )
                        )
                    )
            )
            )
  let
  (
    bad2
      record
      (
        bad2
          None
                )
        )
  setfield
  (
  bad2
  bad2
  Some
    ref
    (
      
        None
            )
  )
  let
  (
    f
      (
        case
        (
          x
            (
                m
                  poly
                   'a
                    b
                      (
                          p
                            poly
                            
                              tuple
                              (
                                  a
                                  b
                              )
                      )
            )
          (
            case
            (
              y
                b
              ()
                          )
          )
        )
      )
  )
  let
  (
    f
      (
        case
        (
          x
            (
                m
                  poly
                   'a
                    tuple
                    (
                        a
                        b
                          (
                              p
                                poly
                                
                                  tuple
                                  (
                                       int
                                      (
                                      )
                                      b
                                  )
                          )
                    )
            )
          (
            case
            (
              y
                b
              ()
                          )
          )
        )
      )
  )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              (
                A
                  (
                      a
                  )
              )
                )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method m
                (
                  case
                  (
                    x
                    send m
                    (
                      self
                    )
                    (
                      
                        x
                    )
                  )
                )
                    poly
                     'a
                      arrow
                      
                        a
                          (
                                 t
                                (
                                    a
                                )
                          )
                                                   unit
                        (
                        )
            )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method m
                (
                  case
                  (
                    A
                      x'
                    send m
                    (
                      self
                    )
                    (
                      
                        x'
                    )
                  )
                  case
                  (
                    _
                    failwith
                    (
                      
                        "c#m"
                    )
                  )
                )
                    poly
                     'a
                      arrow
                      
                        a
                          (
                                 t
                                (
                                    a
                                )
                          )
                                                   unit
                        (
                        )
            )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method m
                (
                  case
                  (
                    x
                    send m
                    (
                      self
                    )
                    (
                      
                        x
                    )
                  )
                )
                    poly
                     'a
                      arrow
                      
                        a
                          (
                                 t
                                (
                                    a
                                )
                          )
                                                  a
            )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method m
                (
                  case
                  (
                    x
                    A
                                      )
                )
                    poly
                     'a
                      arrow
                      
                         option
                        (
                            a
                        )
                        a
                          (
                            A
                              (
                              )
                          )
                                      )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = visitor
      class expr =
          class_structure
            (
              caseNil 
                  poly
                  
                    a
            )
      params =
          (
          )
      class name = int_list
      class expr =
          class_structure
            (
              visit 
                  poly
                   'a
                    arrow
                    
                       visitor
                      (
                          a
                      )
                      a
            )
  )
  type
  (
    list_visitor
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
          )
        kind =
          
              (
                  caseNil
                    poly
                    
                      a
                  caseCons
                    poly
                    
                      arrow
                      
                        b
                        arrow
                        
                           list
                          (
                              b
                          )
                          a
              )
  )
  type
  (
    alist
      type
        params =
          (
            b
          )
        cstrs =
          (
          )
        kind =
          
              (
                  visit
                    poly
                     'a
                      arrow
                      
                         list_visitor
                        (
                            a
                            b
                        )
                        a
              )
  )
  class_type
  (
    class_type_declaration
      params =
          (
          )
      name = ct
      expr =
        class_type
          signature
          class_signature
              s
            (
                  poly
                  
                    arrow
                    
                      arrow
                      
                        b
                        arrow
                        
                          s
                          b
                      arrow
                      
                        b
                        b
            )
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              f
                  poly
                   'a 'b
                    arrow
                    
                      arrow
                      
                        b
                        arrow
                        
                          a
                            ct
                            (
                            )
                          b
                      b
            )
            )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               u
              (
              )
    u
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               t
              (
              )
  )
  class
  (
      params =
          (
            "t"
          )
      class name = a
      class expr =
          class_structure
            (
                  t
                  (
                    A
                      (
                           a
                          (
                              t
                          )
                      )
                  )
                              )
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                A
                  (
                       a
                      (
                           t
                          (
                          )
                      )
                  )
              )
                )
  type
  (
    t
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
            type constraint 
            ( 
                a
                b
            ) 
          )
        kind =
          
              u
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
          )
        kind =
          
               t
              (
                  a
                  b
              )
  )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              a
    u
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               t
              (
                   int
                  (
                  )
              )
  )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
            type constraint 
            ( 
                a
                 int
                (
                )
            ) 
          )
        kind =
          
            )
  type
  (
    u
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              a
    v
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
               t
              (
                   u
                  (
                      a
                  )
              )
  )
  type
  (
    u
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              a
    v
      type
        params =
          (
            a
          )
        cstrs =
          (
            type constraint 
            ( 
                a
                 int
                (
                )
            ) 
          )
        kind =
          
               t
              (
                   u
                  (
                      a
                  )
              )
  )
  type
  (
    g
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               int
              (
              )
  )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
            type constraint 
            ( 
                a
                 g
                (
                )
            ) 
          )
        kind =
          
               unit
              (
              )
  )
  type
  (
    u
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              a
    v
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
               t
              (
                   u
                  (
                      a
                  )
              )
  )
  type
  (
    u
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              a
    v
      type
        params =
          (
            a
          )
        cstrs =
          (
            type constraint 
            ( 
                a
                 int
                (
                )
            ) 
          )
        kind =
          
               t
              (
                   u
                  (
                      a
                  )
              )
  )
  type
  (
    u
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              (
                  m
                    poly
                    
                       v
                      (
                          a
                      )
              )
    v
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
               u
              (
                   list
                  (
                      a
                  )
              )
  )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              a
  )
  type
  (
    u
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              A
                (
                     t
                    (
                        a
                    )
                )
                            )
            )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              (
                  a
                    poly
                    
                      a
              )
  )
  (
    case
    (
      x
        a
           t
          (
              a
          )
      (
      x
      :
           t
          (
              b
          )
            )
    )
  )
  type
  (
    u
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              a
                 t
                (
                    a
                )
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              A
                (
                )
                              B
                (
                )
                            )
            )
  (
    case
    (
      (
        A
                _
      )
      1
    )
    case
    (
      (
        _
        A
              )
      2
    )
    case
    (
      (
        _
        B
              )
      3
    )
  )
  (
    case
    (
      (
        A
                _
      )
      1
    )
    case
    (
      (
        _
        pat_or
        (
        A
                B
                )
      )
      2
    )
  )
  (
    case
    (
      (
        Some
          A
                  _
      )
      1
    )
    case
    (
      (
        Some
          _
        A
              )
      2
    )
    case
    (
      (
        None
                A
              )
      3
    )
    case
    (
      (
        _
        B
              )
      4
    )
  )
  (
    case
    (
      (
        Some
          A
                  A
              )
      1
    )
    case
    (
      (
        Some
          A
                  B
              )
      1
    )
    case
    (
      (
        Some
          _
        A
              )
      2
    )
    case
    (
      (
        None
                A
              )
      3
    )
    case
    (
      (
        _
        B
              )
      4
    )
  )
  (
    case
    (
      (
        A
                A
              )
      1
    )
    case
    (
      (
        A
                B
              )
      2
    )
    case
    (
      (
        B
                _
      )
      3
    )
  )
  (
    case
    (
      (
        A
                A
              )
      1
    )
    case
    (
      (
        B
                A
              )
      2
    )
    case
    (
      (
        _
        B
              )
      3
    )
  )
  (
    case
    (
      (
        pat_or
        (
        A
                B
                )
        _
      )
      0
    )
    case
    (
      (
        _
        pat_or
        (
        A
                B
                )
      )
      1
    )
  )
  (
    case
    (
      (
        B
                1
      )
      1
    )
    case
    (
      (
        _
        1
      )
      2
    )
  )
  (
    case
    (
      (
        1
        B
              )
      1
    )
    case
    (
      (
        1
        _
      )
      2
    )
  )
  type
  (
    a
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
            type constraint 
            ( 
                a
                (
                  B
                    (
                        b
                           b
                          (
                              a
                              b
                          )
                    )
                )
                            ) 
          )
        kind =
          
              arrow
              
                a
                 unit
                (
                )
    b
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
            type constraint 
            ( 
                b
                (
                  A
                    (
                        a
                           a
                          (
                              a
                              b
                          )
                    )
                )
                            ) 
          )
        kind =
          
              arrow
              
                b
                 unit
                (
                )
  )
  class_type
  (
    class_type_declaration
      params =
          (
            "a"
            "b"
          )
      name = a
      expr =
        class_type
          signature
          class_signature
              
            (
                  poly
                  
                    b
                      b
                      (
                          a
                          b
                      )
                  poly
                  
                     a
                    (
                        a
                        b
                    )
            )
    class_type_declaration
      params =
          (
            "a"
            "b"
          )
      name = b
      expr =
        class_type
          signature
          class_signature
              
            (
                  poly
                  
                    a
                      a
                      (
                          a
                          b
                      )
                  poly
                  
                     b
                    (
                        a
                        b
                    )
            )
  )
  class_type
  (
    class_type_declaration
      params =
          (
            "b"
          )
      name = ca
      expr =
        class_type
          signature
          class_signature
              s
            (
              Pctf_inher
              class_type
                constr a
                (
                    s
                    b
                )
            )
  )
  class_type
  (
    class_type_declaration
      params =
          (
            "a"
          )
      name = cb
      expr =
        class_type
          signature
          class_signature
              s
            (
              Pctf_inher
              class_type
                constr b
                (
                    a
                    s
                )
            )
  )
  type
  (
    bt
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              b
                 cb
                (
                     ca
                    (
                        b
                    )
                )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method m
                1
                            )
  )
  let
  (
    f
      (
        case
        (
          ()
                    class_structure
            (
              method m
                1
                            )
        )
      )
  )
  let
  (
    f
      (
        case
        (
          ()
                    class_structure
            (
              method n
                1
                              method m
                send n
                (
                  self
                )
                            )
        )
      )
  )
  let
  (
    f
      (
        case
        (
          ()
                    class_structure
            (
              method n
                1
                              method m
                send n
                (
                  (
                  )
                )
                            )
        )
      )
  )
  let
  (
    f
      (
        case
        (
          ()
                    class_structure
            (
              method n
                1
                              method m
                2
                            )
        )
      )
  )
  let
  (
    f
      (
        case
        (
          ()
                    class_structure
            (
                  s
                  (
                      n
                        poly
                        
                           int
                          (
                          )
                  )
              method m
                1
                            )
        )
      )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method x
                1
                              method m
                class_structure
                  (
                    method x
                      3
                                          method m
                      self
                                        )
                            )
  )
  let
  (
    o
      class_structure
        (
          method x
            1
                      method m
            class_structure
              (
                method x
                  3
                                  method m
                  self
                                )
                    )
  )
  (
    case
    (
      x
        foo
          (
              m
                poly
                 'a
                  tuple
                  (
                      a
                      (
                          m
                            poly
                             'b
                              tuple
                              (
                                  a
                                  foo
                              )
                      )
                  )
          )
      (
      x
      :
          (
              m
                poly
                 'a
                  tuple
                  (
                      a
                      bar
                        (
                            m
                              poly
                               'b
                                tuple
                                (
                                    a
                                    (
                                        m
                                          poly
                                           'c
                                            tuple
                                            (
                                                c
                                                bar
                                            )
                                    )
                                )
                        )
                  )
          )
            )
    )
  )
  type
  (
    foo
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              (
                  m
                    poly
                     'b
                      tuple
                      (
                          a
                           foo
                          (
                              a
                          )
                      )
              )
  )
  type
  (
    foo'
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                  m
                    poly
                     'a
                      tuple
                      (
                          a
                           foo
                          (
                              a
                          )
                      )
              )
  )
  type
  (
    bar
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
              (
                  m
                    poly
                     'b
                      tuple
                      (
                          a
                          (
                              m
                                poly
                                 'c
                                  tuple
                                  (
                                      c
                                       bar
                                      (
                                          a
                                      )
                                  )
                          )
                      )
              )
  )
  type
  (
    bar'
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                  m
                    poly
                     'a
                      tuple
                      (
                          a
                           bar
                          (
                              a
                          )
                      )
              )
  )
  let
  (
    f
      (
        case
        (
          x
             foo'
            (
            )
          (
          x
          :
               bar'
              (
              )
                    )
        )
      )
  )
  (
    case
    (
      x
        (
            m
              poly
               'a
                tuple
                (
                    a
                    foo
                      tuple
                      (
                          a
                          (
                              m
                                poly
                                 'a
                                  tuple
                                  (
                                      a
                                      foo
                                  )
                          )
                      )
                )
        )
      (
      x
      :
          bar
            (
                m
                  poly
                   'b
                    tuple
                    (
                        b
                        tuple
                        (
                            b
                            (
                                m
                                  poly
                                   'c
                                    tuple
                                    (
                                        c
                                        tuple
                                        (
                                            c
                                            bar
                                        )
                                    )
                            )
                        )
                    )
            )
            )
    )
  )
  (
    case
    (
      x
        (
            m
              poly
               'a
                tuple
                (
                    a
                    foo
                      tuple
                      (
                          a
                          (
                              m
                                poly
                                 'a
                                  tuple
                                  (
                                      a
                                      foo
                                  )
                          )
                      )
                )
        )
      (
      x
      :
          bar
            (
                m
                  poly
                   'b
                    tuple
                    (
                        b
                        tuple
                        (
                            b
                            (
                                m
                                  poly
                                   'c
                                    tuple
                                    (
                                        c
                                        tuple
                                        (
                                            b
                                            bar
                                        )
                                    )
                            )
                        )
                    )
            )
            )
    )
  )
  (
    case
    (
      x
        foo
          (
              m
                poly
                 'a
                  tuple
                  (
                      a
                      tuple
                      (
                          a
                          foo
                      )
                  )
          )
      (
      x
      :
          (
              m
                poly
                 'b
                  tuple
                  (
                      b
                      bar
                        tuple
                        (
                            b
                            (
                                m
                                  poly
                                   'c
                                    tuple
                                    (
                                        c
                                        bar
                                    )
                            )
                        )
                  )
          )
            )
    )
  )
  let
  (
    f
      (
        case
        (
          x
          (
          x
          :
              (
                  m
                    poly
                     'a
                      arrow
                      
                        a
                        bar
                          tuple
                          (
                              a
                              (
                                  m
                                    poly
                                     'c
                                      arrow
                                      
                                        c
                                        bar
                              )
                          )
              )
              foo
                (
                    m
                      poly
                       'a
                        arrow
                        
                          a
                          tuple
                          (
                              a
                              foo
                          )
                )
          )
        )
      )
  )
  module M
      struct
      (
        let
        (
          f
            (
              case
              (
                x
                  foo
                    (
                        m
                          poly
                           'a
                            tuple
                            (
                                a
                                tuple
                                (
                                    a
                                    foo
                                )
                            )
                    )
                ()
                              )
            )
        )
      )
      signature
      (
          sig_value f
          value_description
              arrow
              
                (
                    m
                      poly
                       'b
                        tuple
                        (
                            b
                            bar
                              tuple
                              (
                                  b
                                  (
                                      m
                                        poly
                                         'c
                                          tuple
                                          (
                                              c
                                              bar
                                          )
                                  )
                              )
                        )
                )
                 unit
                (
                )
            (
            )
      )
  module M
      struct
      (
        type
        (
          t
            type
              params =
                (
                )
              cstrs =
                (
                )
              kind =
                
                    foo
                      (
                          m
                            poly
                             'a
                              tuple
                              (
                                  a
                                  tuple
                                  (
                                      a
                                      foo
                                  )
                              )
                      )
        )
      )
      signature
      (
          type
          (
            t
              type
                params =
                  (
                  )
                cstrs =
                  (
                  )
                kind =
                  
                      (
                          m
                            poly
                             'b
                              tuple
                              (
                                  b
                                  bar
                                    tuple
                                    (
                                        b
                                        (
                                            m
                                              poly
                                               'c
                                                tuple
                                                (
                                                    c
                                                    bar
                                                )
                                        )
                                    )
                              )
                      )
          )
      )
  module M
      struct
      (
        type
        (
          t
            type
              params =
                (
                  a
                )
              cstrs =
                (
                )
              kind =
                
                     int
                    (
                    )
        )
        type
        (
          u
            type
              params =
                (
                )
              cstrs =
                (
                )
              kind =
                
                    (
                        m
                          poly
                          
                             int
                            (
                            )
                    )
        )
      )
      signature
      (
          type
          (
            t
              type
                params =
                  (
                    a
                  )
                cstrs =
                  (
                  )
                kind =
                  
                            )
          type
          (
            u
              type
                params =
                  (
                  )
                cstrs =
                  (
                  )
                kind =
                  
                      (
                          m
                            poly
                             'a
                               t
                              (
                                  a
                              )
                      )
          )
      )
  module M
      struct
      (
        type
        (
          t
            type
              params =
                (
                  a
                )
              cstrs =
                (
                )
              kind =
                
                     int
                    (
                    )
        )
        let
        (
          f
            (
              case
              (
                x
                  (
                      m
                        poly
                        
                           int
                          (
                          )
                  )
                send m
                (
                  x
                )
              )
            )
        )
      )
      signature
      (
          type
          (
            t
              type
                params =
                  (
                    a
                  )
                cstrs =
                  (
                  )
                kind =
                  
                            )
          sig_value f
          value_description
              arrow
              
                (
                    m
                      poly
                       'a
                         t
                        (
                            a
                        )
                )
                 int
                (
                )
            (
            )
      )
  module M
      struct
      (
        type
        (
          t
            type
              params =
                (
                  a
                )
              cstrs =
                (
                )
              kind =
                
                     int
                    (
                    )
        )
        let
        (
          f
            (
              case
              (
                x
                send m
                (
                  x
                )
              )
            )
        )
      )
      signature
      (
          type
          (
            t
              type
                params =
                  (
                    a
                  )
                cstrs =
                  (
                  )
                kind =
                  
                            )
          sig_value f
          value_description
              arrow
              
                (
                    m
                      poly
                       'a
                         t
                        (
                            a
                        )
                )
                 int
                (
                )
            (
            )
      )
  let
  (
    f
      (
        case
        (
          x
          (
            case
            (
              y
              sequence
              (
                ignore
                (
                  
                    (
                    x
                    :
                                            c
                          (
                              m
                                poly
                                 'a
                                  arrow
                                  
                                    a
                                    tuple
                                    (
                                        c
                                        (
                                        )
                                    )
                          )
                    )
                )
              ;
                sequence
                (
                  ignore
                  (
                    
                      (
                      y
                      :
                                                d
                            (
                                m
                                  poly
                                   'b
                                    arrow
                                    
                                      b
                                      tuple
                                      (
                                          d
                                          (
                                          )
                                      )
                            )
                      )
                  )
                ;
                  =
                  (
                    
                      x
                    
                      y
                  )
                )
              )
            )
          )
        )
      )
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                A
                  (
                  )
                B
                  (
                  )
              )
                )
  type
  (
    v
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                     t
                    (
                    )
              )
                )
  (
    case
    (
      x
      (
      x
      :
           t
          (
          )
           v
          (
          )
      )
    )
  )
  type
  (
    u
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                     t
                    (
                    )
              )
                (
                )
  )
  (
    case
    (
      x
      (
      x
      :
           u
          (
          )
           v
          (
          )
      )
    )
  )
  (
    case
    (
      x
      (
      x
      :
           v
          (
          )
           u
          (
          )
      )
    )
  )
  type
  (
    v
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                     t
                    (
                    )
              )
                (
                )
  )
  (
    case
    (
      x
      (
      x
      :
           u
          (
          )
           v
          (
          )
      )
    )
  )
  type
  (
    p
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                  x
                    poly
                    
                       p
                      (
                      )
              )
  )
  type
  (
    q
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
              (
                  x
                    poly
                    
                       p
                      (
                      )
                  
              )
  )
  (
    case
    (
      x
      (
      x
      :
           q
          (
          )
           p
          (
          )
      )
    )
  )
  (
    case
    (
      x
      (
      x
      :
           p
          (
          )
           q
          (
          )
      )
    )
  )
  let
  (
    f1
      (
        case
        (
          x
          (
          x
          :
              (
                  m
                    poly
                     'a
                      arrow
                      
                        a
                          (
                              p
                                poly
                                
                                   int
                                  (
                                  )
                              
                          )
                         int
                        (
                        )
              )
              (
                  m
                    poly
                     'b
                      arrow
                      
                        b
                          (
                              p
                                poly
                                
                                   int
                                  (
                                  )
                              q
                                poly
                                
                                   int
                                  (
                                  )
                              
                          )
                         int
                        (
                        )
              )
          )
        )
      )
  )
  let
  (
    f2
      (
        case
        (
          x
          (
          x
          :
              (
                  m
                    poly
                     'a
                      arrow
                      
                        a
                          (
                              p
                                poly
                                
                                  (
                                      a
                                        poly
                                        
                                           int
                                          (
                                          )
                                  )
                              
                          )
                         int
                        (
                        )
              )
              (
                  m
                    poly
                     'b
                      arrow
                      
                        b
                          (
                              p
                                poly
                                
                                  (
                                      a
                                        poly
                                        
                                           int
                                          (
                                          )
                                      b
                                        poly
                                        
                                           int
                                          (
                                          )
                                  )
                              
                          )
                         int
                        (
                        )
              )
          )
        )
      )
  )
  let
  (
    f3
      (
        case
        (
          x
          (
          x
          :
              (
                  m
                    poly
                     'a
                      arrow
                      
                        a
                          (
                              p
                                poly
                                
                                  (
                                      a
                                        poly
                                        
                                           int
                                          (
                                          )
                                      b
                                        poly
                                        
                                           int
                                          (
                                          )
                                  )
                              
                          )
                         int
                        (
                        )
              )
              (
                  m
                    poly
                     'b
                      arrow
                      
                        b
                          (
                              p
                                poly
                                
                                  (
                                      a
                                        poly
                                        
                                           int
                                          (
                                          )
                                  )
                              
                          )
                         int
                        (
                        )
              )
          )
        )
      )
  )
  let
  (
    f4
      (
        case
        (
          x
          (
          x
          :
              (
                  p
                    poly
                    
                      (
                          a
                            poly
                            
                               int
                              (
                              )
                          b
                            poly
                            
                               int
                              (
                              )
                      )
                  
              )
              (
                  p
                    poly
                    
                      (
                          a
                            poly
                            
                               int
                              (
                              )
                      )
                  
              )
          )
        )
      )
  )
  let
  (
    f5
      (
        case
        (
          x
          (
          x
          :
              (
                  m
                    poly
                     'a
                      a
                        (
                          A
                            (
                                (
                                    p
                                      poly
                                      
                                         int
                                        (
                                        )
                                )
                            )
                        )
                          (
                          )
              )
              (
                  m
                    poly
                     'a
                      a
                        (
                          A
                            (
                                (
                                )
                            )
                        )
                          (
                          )
              )
          )
        )
      )
  )
  let
  (
    f6
      (
        case
        (
          x
          (
          x
          :
              (
                  m
                    poly
                     'a
                      a
                        (
                          A
                            (
                                (
                                )
                            )
                        )
                          (
                          )
              )
              (
                  m
                    poly
                     'a
                      a
                        (
                          A
                            (
                                (
                                    p
                                      poly
                                      
                                         int
                                        (
                                        )
                                )
                            )
                        )
                          (
                          )
              )
          )
        )
      )
  )
  let
  (
    f
      (
        case
        (
          x
          ifthenelse
          (
            if
            (
              true
                          )
            then
            (
              (
              x
              :
                  (
                      m
                        poly
                         'a
                          arrow
                          
                            a
                            a
                  )
                            )
            )
            else
            (
                x
            )
          )
        )
      )
  )
  (
    case
    (
      x
      send m
      (
        f
        (
          
            x
        )
      )
    )
  )
  let
  (
    f
      (
        case
        (
          (
            x
            y
          )
          ifthenelse
          (
            if
            (
              true
                          )
            then
            (
              (
              x
              :
                  (
                      m
                        poly
                         'a
                          arrow
                          
                            a
                            a
                  )
                            )
            )
            else
            (
                x
            )
          )
        )
      )
  )
  (
    case
    (
      x
      send m
      (
        f
        (
          
            (
              x
              x
            )
        )
      )
    )
  )
  let
  (
    f
      (
        case
        (
          x
          ifthenelse
          (
            if
            (
              true
                          )
            then
            (
              array
              (
                (
                x
                :
                    (
                        m
                          poly
                           'a
                            arrow
                            
                              a
                              a
                    )
                                )
              )
            )
            else
            (
                array
                (
                  x
                )
            )
          )
        )
      )
  )
  (
    case
    (
      x
      send m
      (
        Array.get
        (
          
            f
            (
              
                x
            )
          
            0
        )
      )
    )
  )
  class
  (
      params =
          (
          )
      class name = c
      class expr =
          class_structure
            (
              method id
                (
                  case
                  (
                    x
                    x
                  )
                )
                    poly
                     'a
                      arrow
                      
                        a
                        a
            )
  )
  type
  (
    u
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               option
              (
                   c
                  (
                  )
              )
  )
  let
  (
    just
      (
        case
        (
          None
                    failwith
          (
            
              "just"
          )
        )
        case
        (
          Some
            x
          x
        )
      )
  )
  let
  (
    f
      (
        case
        (
          x
          let
          (
            (
              l
                ::
                  (
                    Some
                      x
                    ::
                      (
                        (
                        None
                                                :
                             u
                            (
                            )
                                                )
                        []
                                              )
                  )
            )
          in
            send id
            (
              just
              (
                
                  List.hd
                  (
                    
                      l
                  )
              )
            )
          )
        )
      )
  )
  let
  (
    g
      (
        case
        (
          x
          let
          (
            (
              none
                (
                  case
                  (
                    y
                    sequence
                    (
                      ignore
                      (
                        
                          ::
                            (
                              y
                              ::
                                (
                                  (
                                  None
                                                                    :
                                       u
                                      (
                                      )
                                                                    )
                                  []
                                                                  )
                            )
                      )
                    ;
                      y
                    )
                  )
                )
                (
                  
                    None
                                    )
            )
          in
            let
            (
              (
                x
                  List.hd
                  (
                    
                      ::
                        (
                          Some
                            x
                          ::
                            (
                              none
                              []
                                                          )
                        )
                  )
              )
            in
              send id
              (
                just
                (
                  
                    x
                )
              )
            )
          )
        )
      )
  )
  let
  (
    h
      (
        case
        (
          x
          let
          (
            (
              none
                let
                (
                  (
                    y
                      None
                                        )
                in
                  sequence
                  (
                    ignore
                    (
                      
                        ::
                          (
                            y
                            ::
                              (
                                (
                                None
                                                                :
                                     u
                                    (
                                    )
                                                                )
                                []
                                                              )
                          )
                    )
                  ;
                    y
                  )
                )
            )
          in
            let
            (
              (
                x
                  List.hd
                  (
                    
                      ::
                        (
                          Some
                            x
                          ::
                            (
                              none
                              []
                                                          )
                        )
                  )
              )
            in
              send id
              (
                just
                (
                  
                    x
                )
              )
            )
          )
        )
      )
  )
  type
  (
    u
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
               option
              (
                   c
                  (
                  )
              )
  )
  let
  (
    just
      (
        case
        (
          None
                    failwith
          (
            
              "just"
          )
        )
        case
        (
          Some
            x
          x
        )
      )
  )
  let
  (
    f
      (
        case
        (
          x
          let
          (
            (
              l
                ::
                  (
                    Some
                      x
                    ::
                      (
                        (
                        None
                                                :
                             u
                            (
                                
                            )
                                                )
                        []
                                              )
                  )
            )
          in
            send id
            (
              just
              (
                
                  List.hd
                  (
                    
                      l
                  )
              )
            )
          )
        )
      )
  )
  let
  (
    f
      poly
       'a
        arrow
        
          a
          
      (
        case
        (
          x
          1
        )
      )
    g
      (
        case
        (
          x
          f
          (
            
              x
          )
        )
      )
  )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              Leaf
                (
                    a
                )
                              Node
                (
                     t
                    (
                        tuple
                        (
                            a
                            a
                        )
                    )
                )
                            )
            )
  let
  (
    depth
      poly
       'a
        arrow
        
           t
          (
              a
          )
          
      (
        case
        (
          Leaf
            _
          1
        )
        case
        (
          Node
            x
          +
          (
            
              1
            
              depth
              (
                
                  x
              )
          )
        )
      )
  )
  let
  (
    depth
      poly
       'a
        arrow
        
           t
          (
              a
          )
          
      (
        case
        (
          Leaf
            _
          1
        )
        case
        (
          Node
            x
          +
          (
            
              1
            
              d
              (
                
                  x
              )
          )
        )
      )
    d
      (
        case
        (
          x
          depth
          (
            
              x
          )
        )
      )
  )
  let
  (
    depth
      poly
       'a
        arrow
        
           t
          (
              a
          )
          
      (
        case
        (
          Leaf
            x
          x
        )
        case
        (
          Node
            x
          +
          (
            
              1
            
              depth
              (
                
                  x
              )
          )
        )
      )
  )
  let
  (
    depth
      poly
       'a
        arrow
        
           t
          (
              a
          )
          
      (
        case
        (
          Leaf
            x
          x
        )
        case
        (
          Node
            x
          depth
          (
            
              x
          )
        )
      )
  )
  let
  (
    depth
      poly
       'b 'a
        arrow
        
           t
          (
              a
          )
          b
      (
        case
        (
          Leaf
            x
          x
        )
        case
        (
          Node
            x
          depth
          (
            
              x
          )
        )
      )
  )
  let
  (
    r
      poly
       'a
        tuple
        (
             list
            (
                a
            )
             ref
            (
                 list
                (
                    b
                )
            )
        )
      (
        []
                ref
        (
          
            []
                    )
      )
    q
      (
        case
        (
          ()
                    r
        )
      )
  )
  let
  (
    f
      poly
       'a
        arrow
        
          
          
      (
        case
        (
          x
          x
        )
      )
  )
  let
  (
    zero
      poly
       'a
        a
          (
            Int
              (
                   int
                  (
                  )
              )
            B
              (
                  a
              )
          )
                Int
        0
  )
  let
  (
    zero
      poly
       'a
        a
          (
            Int
              (
                   int
                  (
                  )
              )
          )
            (
            )
      Int
        0
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              f
                  poly
                   'a
                    a
                      (
                        Int
                          (
                               int
                              (
                              )
                          )
                        B
                          (
                              a
                          )
                      )
                                  )
            )
  let
  (
    zero
      record
      (
        f
          Int
            0
      )
        )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              f
                  poly
                   'a
                    a
                      (
                        Int
                          (
                               int
                              (
                              )
                          )
                      )
                        (
                        )
            )
            )
  let
  (
    zero
      record
      (
        f
          Int
            0
      )
        )
  let
  (
    id
      poly
       'a
        arrow
        
          a
          a
      (
        case
        (
          x
          x
        )
      )
    neg
      (
        case
        (
          i
          (
            case
            (
              b
              (
                id
                (
                  
                    ~-
                    (
                      
                        i
                    )
                )
                id
                (
                  
                    not
                    (
                      
                        b
                    )
                )
              )
            )
          )
        )
      )
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              A
                (
                     int
                    (
                    )
                )
                              B
                (
                     list
                    (
                        tuple
                        (
                             int
                            (
                            )
                             t
                            (
                            )
                        )
                    )
                )
                              C
                (
                     list
                    (
                        tuple
                        (
                             string
                            (
                            )
                             t
                            (
                            )
                        )
                    )
                )
                            )
            )
  let
  (
    transf
      (
        case
        (
          f
          (
            case
            (
              A
                x
              f
              (
                
                  x
              )
            )
            case
            (
              B
                l
              B
                transf_alist
                (
                  
                    f
                  
                    l
                )
            )
            case
            (
              C
                l
              C
                transf_alist
                (
                  
                    f
                  
                    l
                )
            )
          )
        )
      )
    transf_alist
      poly
       'a
        arrow
        
          
          arrow
          
             list
            (
                tuple
                (
                    a
                     t
                    (
                    )
                )
            )
             list
            (
                tuple
                (
                    a
                     t
                    (
                    )
                )
            )
      (
        case
        (
          f
          (
            case
            (
              []
                            []
                          )
            case
            (
              ::
                (
                  (
                    k
                    v
                  )
                  tl
                )
              ::
                (
                  (
                    k
                    transf
                    (
                      
                        f
                      
                        v
                    )
                  )
                  transf_alist
                  (
                    
                      f
                    
                      tl
                  )
                )
            )
          )
        )
      )
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              f
                  poly
                   'a
                     Lazy.t
                    (
                        arrow
                        
                           list
                          (
                              a
                          )
                           int
                          (
                          )
                    )
            )
            )
  let
  (
    l
      (
      record
      (
        f
          lazy
          raise
          (
            
              Not_found
                        )
      )
            :
           t
          (
          )
            )
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              f
                  poly
                   'a
                    arrow
                    
                      a
                       unit
                      (
                      )
            )
            )
  let
  (
    (
      f
        (
          case
          (
            x
            (
              case
              (
                y
                ()
                              )
            )
          )
        )
    )
  in
    record
    (
      f
        f
    )
      )
  let
  (
    (
      f
        (
          case
          (
            x
            (
              case
              (
                y
                y
              )
            )
          )
        )
    )
  in
    record
    (
      f
        f
    )
      )
  module Polux
    struct
    (
      type
      (
        t
          type
            params =
              (
                par
              )
            cstrs =
              (
              )
            kind =
              
                  par
      )
      let
      (
        ident
          (
            case
            (
              v
              v
            )
          )
      )
      class
      (
          params =
              (
              )
          class name = alias
          class expr =
              class_structure
                (
                  method alias
                    ident
                        poly
                         'a
                          arrow
                          
                             t
                            (
                                a
                            )
                            a
                )
      )
      let
      (
        f
          (
            case
            (
              x
                (
                    m
                      poly
                       'a
                         t
                        (
                            a
                        )
                )
              (
              x
              :
                  (
                      m
                        poly
                         'a
                          a
                  )
                            )
            )
          )
      )
    )
  let
  (
    (
      a
      b
    )
      (
      raise
      (
        
          Exit
                )
      :
          tuple
          (
               int
              (
              )
               int
              (
              )
          )
            )
  )
  type
  (
    t
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              foo
                  poly
                  
                     int
                    (
                    )
            )
            )
  let
  (
    (
      foo
        foo
    )
      (
      raise
      (
        
          Exit
                )
      :
           t
          (
          )
            )
  )
  type
  (
    s
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              A
                (
                     int
                    (
                    )
                )
                            )
            )
  let
  (
    A
      x
      (
      raise
      (
        
          Exit
                )
      :
           s
          (
          )
            )
  )
  type
  (
    t
      type
        params =
          (
            x
          )
        cstrs =
          (
          )
        kind =
          
              (
                  f
                    poly
                     'y
                       t
                      (
                          y
                      )
              )
  )
)

