(
  type
  (  						
     tree
     type
     params=
     (
     )
     cstrs =
     (
     )
     kind =
     (
     Tree
     (
       list
       (
         tree
         (
         )
       )
     )
     )
  )
  let
  (
    test
    let
    (
     (
       x
        Tree
        ::
         (
         sequence
         (
           print_endline
           (
               "x"
           )
         ;
           y
         )
         ::
         (
         z
         []
         ) 
         ) 
       y
        Tree
        sequence
        (
          print_endline
          (
              "y"
          )
        ;
          []
        )
       z
        Tree
        sequence
        (
          print_endline
          (
              "z"
          )
        ;
          ::
           (
           x
           []
           ) 
        )
     )
    in
      match
      (
          					 x
      	y
      	z
      )
      (
      case
      (
        (
         Tree
         ::
         (
           y1
           ::
           (
             z1
             []
           )
         )
        	Tree
        	[]
        	Tree
        	::
        	(
        	  x1
        	  []
        	)
        )
        sequence
        (
          assert ==
          (
              y1
              y
          )
        ;
          sequence
          (
            assert ==
            (
                z1
                z
            )
          ;
            assert ==
            (
                x1
                x
            )
          )
        )
      ) 
        case
        (
         _
         assert false
        )
      )
    )
  )
)
