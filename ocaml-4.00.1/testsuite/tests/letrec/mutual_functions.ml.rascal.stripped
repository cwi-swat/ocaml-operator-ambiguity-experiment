(
  let
  (
    test
    let
    (
     (
       even
       (
        case
        (
          0
          true
        ) 
          case
          (
           n
           odd
           (
               -
               (
                   n
                   1
               )
           )
          )
       )
       odd
       (
        case
        (
          0
          false
        ) 
          case
          (
           n
           even
           (
               -
               (
                   n
                   1
               )
           )
          )
       )
     )
    in
      List.iter
      (
          (
            case
            (
             i
             assert &&
             (
                 <>
                 (
                     even
                     (
                         i
                     )
                     odd
                     (
                         i
                     )
                 )
                 =
                 (
                     even
                     (
                         i
                     )
                     =
                     (
                         mod
                         (
                             i
                             2
                         )
                         0
                     )
                 )
             )
            )
          )
          ::
           (
           0
           ::
           (
           1
           ::
           (
           2
           ::
           (
           3
           ::
           (
           4
           ::
           (
           5
           ::
           (
           6
           []
           ) 
           ) 
           ) 
           ) 
           ) 
           ) 
           ) 
      )
    )
  )
)
