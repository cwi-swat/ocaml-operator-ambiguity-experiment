(
  let
  (
    brace_depth
      ref
      (
          0
      )
  )
  let
  (
    comment_depth
      ref
      (
          0
      )
  )
  exception Lexical_error
  (
       string
      (
      )
  )
  let
  (
    initial_string_buffer
      String.create
      (
          256
      )
  )
  let
  (
    string_buff
      ref
      (
          initial_string_buffer
      )
  )
  let
  (
    string_index
      ref
      (
          0
      )
  )
  let
  (
    reset_string_buffer
      (
        case
        (
          ()
                    sequence
          (
            :=
            (
                string_buff
                initial_string_buffer
            )
          ;
            :=
            (
                string_index
                0
            )
          )
        )
      )
  )
  let
  (
    store_string_char
      (
        case
        (
          c
          sequence
          (
            ifthenelse
            (
              if
              (
                >=
                (
                    !
                    (
                        string_index
                    )
                    String.length
                    (
                        !
                        (
                            string_buff
                        )
                    )
                )
              )
              then
              (
                let
                (
                  (
                    new_buff
                      String.create
                      (
                          *
                          (
                              String.length
                              (
                                  !
                                  (
                                      string_buff
                                  )
                              )
                              2
                          )
                      )
                  )
                in
                  sequence
                  (
                    String.blit
                    (
                        new_buff
                        0
                        !
                        (
                            string_buff
                        )
                        0
                        String.length
                        (
                            !
                            (
                                string_buff
                            )
                        )
                    )
                  ;
                    :=
                    (
                        string_buff
                        new_buff
                    )
                  )
                )
              )
              else
              (
                              )
            )
          ;
            sequence
            (
              String.unsafe_set
              (
                  !
                  (
                      string_buff
                  )
                  !
                  (
                      string_index
                  )
                  c
              )
            ;
              incr
              (
                  string_index
              )
            )
          )
        )
      )
  )
  let
  (
    get_stored_string
      (
        case
        (
          ()
                    let
          (
            (
              s
                String.sub
                (
                    !
                    (
                        string_buff
                    )
                    0
                    !
                    (
                        string_index
                    )
                )
            )
          in
            sequence
            (
              :=
              (
                  string_buff
                  initial_string_buffer
              )
            ;
              s
            )
          )
        )
      )
  )
  let
  (
    char_for_backslash
      (
        case
        (
          6e
          0a
        )
        case
        (
          74
          09
        )
        case
        (
          62
          08
        )
        case
        (
          72
          0d
        )
        case
        (
          c
          c
        )
      )
  )
  let
  (
    char_for_decimal_code
      (
        case
        (
          lexbuf
          (
            case
            (
              i
              Char.chr
              (
                  +
                  (
                      +
                      (
                          *
                          (
                              100
                              -
                              (
                                  Char.code
                                  (
                                      Lexing.lexeme_char
                                      (
                                          lexbuf
                                          i
                                      )
                                  )
                                  48
                              )
                          )
                          *
                          (
                              10
                              -
                              (
                                  Char.code
                                  (
                                      Lexing.lexeme_char
                                      (
                                          lexbuf
                                          +
                                          (
                                              i
                                              1
                                          )
                                      )
                                  )
                                  48
                              )
                          )
                      )
                      -
                      (
                          Char.code
                          (
                              Lexing.lexeme_char
                              (
                                  lexbuf
                                  +
                                  (
                                      i
                                      2
                                  )
                              )
                          )
                          48
                      )
                  )
              )
            )
          )
        )
      )
  )
)

