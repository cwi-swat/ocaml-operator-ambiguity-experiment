
(
    								 
  open Syntax
                                     
  let
  (
   
    regexp_for_string
   (
    case
        (
    	  s
         
         let
         (
          (
             									  
           
            l
            String.length
            (
                s
            ) 
           							    		   
             									  
          )
         in
           ifthenelse
           (
            if
            (
             =
             (
                 l
                 0
             )
            )
            then
            (
             Epsilon
            )
            else
            (
             
             let
             (
              (
                 									  
               
                re
                ref
                (
                    
                    Characters
                       ::
                        (
                        String.get
                        (
                            s
                            -
                            (
                                l
                                1
                            )
                        )
                        []
                        ) 
                           						  
                        								 
                ) 
               							    		   
                 									  
              )
             in
               
               sequence
               (
                  for i
                  -
                  (
                      l
                      2
                  )
                  0
                  :=
                  (
                      re
                      
                      Sequence
                         
                         (
                          
                          Characters
                             ::
                              (
                              String.get
                              (
                                  s
                                  i
                              )
                              []
                              ) 
                                 						  
                              								 
                             					   
                         	
                         	 !
                         	 (
                         	 re
                         	 )
                         	    							 
                             					   
                         )
                          								 
                  )
                     														  
               ;
                 
                  !
                  (
                  re
                  )
                     							 
               )
                   							
             )
                 									
            ) 
           )
           	    											 
         )
             									
        )
   )
       		    
  )
                                     
  let
  (
   
     char_class
               	   
   (
    case
        (
     		
     		 c1
     		(
     		 case
     		     (
     		 	  c2
     		      
     		      let
     		      (
     		       (
     		          									  
     		        
     		         cl
     		         ref
     		         (
     		             []
     		         ) 
     		        							    		   
     		          									  
     		       )
     		      in
     		        
     		        sequence
     		        (
     		           for i
     		           Char.code
     		           (
     		               c2
     		           )
     		           Char.code
     		           (
     		               c1
     		           )
     		           :=
     		           (
     		               cl
     		               ::
     		               (
     		                   Char.chr
     		                   (
     		                       i
     		                   )
     		                   
     		                    !
     		                    (
     		                    cl
     		                    )
     		                       							 
     		               )
     		           )
     		              														  
     		        ;
     		          
     		           !
     		           (
     		           cl
     		           )
     		              							 
     		        )
     		            							
     		      )
     		          									
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
  let
  (
   
    all_chars
    char_class
    (
        01
        ff
    ) 
   							    		    
  )
                                     
  let
  (
   
     subtract
               	   
   (
    case
        (
     		
     		 l1
     		(
     		 case
     		     (
     		 	  l2
     		      match
     		      l1
     		      (
     		      
     		      case
     		      (
     		        []
     		        
     		        []
     		      ) 
     		      	        											 
     		        
     		        case
     		        (
     		         
     		         ::
     		         (
     		             a
     		             l
     		         )
     		         
     		         ifthenelse
     		         (
     		          if
     		          (
     		           List.mem
     		           (
     		               a
     		               l2
     		           )
     		          )
     		          then
     		          (
     		           subtract
     		           (
     		               l
     		               l2
     		           )
     		          )
     		          else
     		          (
     		           ::
     		           (
     		               a
     		               subtract
     		               (
     		                   l
     		                   l2
     		               )
     		           )
     		          ) 
     		         )
     		         	    											 
     		        )
     		        													    
     		      	        											 
     		      	        											 
     		      )
     		      			   
     		     )
     		)
     		    		   
        )
   )
               	    
  )
                                     
)