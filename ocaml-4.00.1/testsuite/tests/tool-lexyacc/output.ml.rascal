
(
    								 
  open Syntax
                                     
  let
  (
   
    ic
    ref
    (
        stdin
    ) 
   							    		    
  )
                                     
  let
  (
   
    oc
    ref
    (
        stdout
    ) 
   							    		    
  )
                                     
  let
  (
   
    copy_buffer
    String.create
    (
        1024
    ) 
   							    		    
  )
                                     
  let
  (
   
    copy_chunk
   (
    case
        (
    	  
    	  Location
    	  
    	  (
    	   start
    	       						 
    	  	stop
    	  
    	  )
    	  									  
         
         sequence
         (
           seek_in
           (
               
                !
                (
                ic
                )
                   							 
               start
           )
         ;
           
           let
           (
            (
               									  
             
              tocopy
              ref
              (
                  -
                  (
                      stop
                      start
                  )
              ) 
             							    		   
               									  
            )
           in
             whileloop 
             (
                 >
                 (
                     
                      !
                      (
                      tocopy
                      )
                         							 
                     0
                 )
                 
                 let
                 (
                  (
                     									  
                   
                    m
                    input
                    (
                        
                         !
                         (
                         ic
                         )
                            							 
                        copy_buffer
                        0
                        min
                        (
                            
                             !
                             (
                             tocopy
                             )
                                							 
                            String.length
                            (
                                copy_buffer
                            )
                        )
                    ) 
                   							    		   
                     									  
                  )
                 in
                   
                   sequence
                   (
                     output
                     (
                         
                          !
                          (
                          oc
                          )
                             							 
                         copy_buffer
                         0
                         m
                     )
                   ;
                     :=
                     (
                         tocopy
                         -
                         (
                             
                              !
                              (
                              tocopy
                              )
                                 							 
                             m
                         )
                     )
                   )
                       							
                 )
                     									
             )
           )
               									
         )
             							
        )
   )
       		    
  )
                                     
  let
  (
   
    output_action
   (
    case
        (
    	  
    	  (
    	   i
    	       						 
    	  	act
    	  
    	  )
         
         sequence
         (
           output_string
           (
               
                !
                (
                oc
                )
                   							 
               ^
               (
                   "action_"
                   ^
                   (
                       string_of_int
                       (
                           i
                       )
                       " lexbuf = (\n"
                   )
               )
           )
         ;
           
           sequence
           (
             copy_chunk
             (
                 act
             )
           ;
             output_string
             (
                 
                  !
                  (
                  oc
                  )
                     							 
                 ")\nand "
             )
           )
               							
         )
             							
        )
   )
       		    
  )
                                     
  let
  (
   
    states
    ref
    (
        
        (
        array
        (
        )
        :
        
         array
         (
           
           automata
           (
           )
           								  
         )
         
            									
        )
            								
    ) 
   							    		    
  )
                                     
  type
  (  						
      							    	 
     occurrence
     type
     params=
     (
     
     )
     cstrs =
     (
     )
     kind =
     
     
     							     
      
      pos
      polytype1 
      (
          
           list
           (
             
             int
             (
             )
             								  
           )
           
              									
      )
     							     
      
      freq
      polytype1 
      (
          
          int
          (
          )
          								  
      )
     							     
     	                           
     														  
     														 
    											   
  								        
  )
                                     
  let
  (
   
    enumerate_vect
   (
    case
        (
    	  v
         
         let
         (
          (
             									  
           
            env
            ref
            (
                []
            ) 
           							    		   
             									  
          )
         in
           
           sequence
           (
             forloop 
             (
                 pos
                 0
                 <>
                 -
                 (
                     Array.length
                     (
                         v
                     )
                     1
                 )
                 
                 try
                 
                 let
                 (
                  (
                     									  
                   
                    occ
                    List.assoc
                    (
                        Array.get
                        (
                         v
                         pos
                        )
                            													
                        
                         !
                         (
                         env
                         )
                            							 
                    ) 
                   							    		   
                     									  
                  )
                 in
                   
                   sequence
                   (
                     setfield
                     (
                     occ
                     pos
                     ::
                     (
                         pos
                         field
                         (
                         occ
                         pos
                         )
                             									 
                     )
                     )
                     									  
                   ;
                     setfield
                     (
                     occ
                     freq
                     +
                     (
                         field
                         (
                         occ
                         freq
                         )
                             									 
                         1
                     )
                     )
                     									  
                   )
                       							
                 )
                     									
                 (
                 
                 case
                 (
                   Not_found
                   
                   :=
                   (
                       env
                       ::
                       (
                           
                           (
                               					 Array.get
                                 					 (
                                 					  v
                                 					  pos
                                 					 )
                                 					     													
                               					 
                           	record
                           	(
                           	 pos
                           	 ::
                           	  (
                           	  pos
                           	  []
                           	  ) 
                           	     						  
                           											   	     
                           	  
                           	   freq
                           	   1
                           	  										   
                           												   	 
                           	)
                               					 
                           )
                               					 
                           
                            !
                            (
                            env
                            )
                               							 
                       )
                   )
                 ) 
                 	        											 
                 	        											 
                 )
                     							   
             )
           ;
             Sort.list
             (
                 (
                  
                  case
                  (
                    
                    (
                     e1
                         						 
                    	occ1
                    
                    )
                    (
                    
                    case
                    (
                    
                    (
                     e2
                         						 
                    	occ2
                    
                    )
                    
                    >=
                    (
                        field
                        (
                        occ1
                        freq
                        )
                            									 
                        field
                        (
                        occ2
                        freq
                        )
                            									 
                    )
                    )
                    													 
                    )
                  )													
                  													
                 )
                    						  
                 
                  !
                  (
                  env
                  )
                     							 
             )
           )
               							
         )
             									
        )
   )
       		    
  )
                                     
  let
  (
   
    output_move
    (
     
     case
     (
       Backtrack
       
       output_string
       (
           
            !
            (
            oc
            )
               							 
           "lexing.backtrack lexbuf"
       )
     ) 
     	        											 
       
       case
       (
        
        Goto
        dest
        									  
        
        match
        Array.get
        (
         
          !
          (
          states
          )
             							 
         dest
        )
            													
        (
        
        case
        (
          
          Perform
          act_num
          									  
          
          output_string
          (
              
               !
               (
               oc
               )
                  							 
              ^
              (
                  "action_"
                  ^
                  (
                      string_of_int
                      (
                          act_num
                      )
                      " lexbuf"
                  )
              )
          )
        ) 
        	        											 
          
          case
          (
           _
           
           output_string
           (
               
                !
                (
                oc
                )
                   							 
               ^
               (
                   "state_"
                   ^
                   (
                       string_of_int
                       (
                           dest
                       )
                       " lexbuf"
                   )
               )
           )
          )
          													    
        	        											 
        	        											 
        )
        			   
       )
       													    
     	        											 
     	        											 
    )
       							    
   							    		    
  )
                                     
  let
  (
   
    output_char_lit
   (
    case
        (
    	  oc
         (
          
          case
          (
            27
            
            output_string
            (
                oc
                "\\'"
            )
          ) 
          	        											 
            
            case
            (
             5c
             
             output_string
             (
                 oc
                 "\\\\"
             )
            )
            													    
          	        											 
            
            case
            (
             0a
             
             output_string
             (
                 oc
                 "\\n"
             )
            )
            													    
          	        											 
            
            case
            (
             09
             
             output_string
             (
                 oc
                 "\\t"
             )
            )
            													    
          	        											 
            
            case
            (
             c
             
             ifthenelse
             (
              if
              (
               &&
               (
                   >=
                   (
                       Char.code
                       (
                           c
                       )
                       32
                   )
                   <
                   (
                       Char.code
                       (
                           c
                       )
                       128
                   )
               )
              )
              then
              (
               output_char
               (
                   oc
                   c
               )
              )
              else
              (
               beginEnd 
               (
                   
                   let
                   (
                    (
                       									  
                     
                      n
                      Char.code
                      (
                          c
                      ) 
                     							    		   
                       									  
                    )
                   in
                     
                     sequence
                     (
                       output_char
                       (
                           oc
                           5c
                       )
                     ;
                       
                       sequence
                       (
                         output_char
                         (
                             oc
                             Char.chr
                             (
                                 +
                                 (
                                     48
                                     /
                                     (
                                         n
                                         100
                                     )
                                 )
                             )
                         )
                       ;
                         
                         sequence
                         (
                           output_char
                           (
                               oc
                               Char.chr
                               (
                                   +
                                   (
                                       48
                                       mod
                                       (
                                           /
                                           (
                                               n
                                               10
                                           )
                                           10
                                       )
                                   )
                               )
                           )
                         ;
                           output_char
                           (
                               oc
                               Char.chr
                               (
                                   +
                                   (
                                       48
                                       mod
                                       (
                                           n
                                           10
                                       )
                                   )
                               )
                           )
                         )
                             							
                       )
                           							
                     )
                         							
                   )
                       									
               )
              ) 
             )
             	    											 
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    output_chars
    (
     
     case
     (
       []
       
       failwith
       (
           "output_chars"
       )
     ) 
     	        											 
       
       case
       (
        patternTuple 
        (
            c
            
            
        )
        
        
        sequence
        (
          output_string
          (
              
               !
               (
               oc
               )
                  							 
              "'"
          )
        ;
          
          sequence
          (
            output_char_lit
            (
                
                 !
                 (
                 oc
                 )
                    							 
                Char.chr
                (
                    c
                )
            )
          ;
            output_string
            (
                
                 !
                 (
                 oc
                 )
                    							 
                "'"
            )
          )
              							
        )
            							
       )
       													    
     	        											 
       
       case
       (
        
        ::
        (
            c
            cl
        )
        
        
        sequence
        (
          output_string
          (
              
               !
               (
               oc
               )
                  							 
              "'"
          )
        ;
          
          sequence
          (
            output_char_lit
            (
                
                 !
                 (
                 oc
                 )
                    							 
                Char.chr
                (
                    c
                )
            )
          ;
            
            sequence
            (
              output_string
              (
                  
                   !
                   (
                   oc
                   )
                      							 
                  "'|"
              )
            ;
              output_chars
              (
                  cl
              )
            )
                							
          )
              							
        )
            							
       )
       													    
     	        											 
     	        											 
    )
       							    
   							    		    
  )
                                     
  let
  (
   
    output_one_trans
   (
    case
        (
    	  
    	  (
    	   dest
    	       						 
    	  	occ
    	  
    	  )
         
         sequence
         (
           output_chars
           (
               field
               (
               occ
               pos
               )
                   									 
           )
         ;
           
           sequence
           (
             output_string
             (
                 
                  !
                  (
                  oc
                  )
                     							 
                 " -> "
             )
           ;
             
             sequence
             (
               output_move
               (
                   dest
               )
             ;
               output_string
               (
                   
                    !
                    (
                    oc
                    )
                       							 
                   "\n |  "
               )
             )
                 							
           )
               							
         )
             							
        )
   )
       		    
  )
                                     
  let
  (
   
    output_all_trans
   (
    case
        (
    	  trans
         
         sequence
         (
           output_string
           (
               
                !
                (
                oc
                )
                   							 
               "  match lexing.next_char lexbuf with\n    "
           )
         ;
           match
           enumerate_vect
           (
               trans
           )
           (
           
           case
           (
             []
             
             failwith
             (
                 "output_all_trans"
             )
           ) 
           	        											 
             
             case
             (
              
              ::
              (
                  
                  (
                   default
                       						 
                  	_
                  
                  )
                  rest
              )
              
              
              sequence
              (
                List.iter
                (
                    output_one_trans
                    rest
                )
              ;
                
                sequence
                (
                  output_string
                  (
                      
                       !
                       (
                       oc
                       )
                          							 
                      "_ -> "
                  )
                ;
                  
                  sequence
                  (
                    output_move
                    (
                        default
                    )
                  ;
                    output_string
                    (
                        
                         !
                         (
                         oc
                         )
                            							 
                        "\nand "
                    )
                  )
                      							
                )
                    							
              )
                  							
             )
             													    
           	        											 
           	        											 
           )
           			   
         )
             							
        )
   )
       		    
  )
                                     
  let
  (
   
    output_state
   (
    case
        (
    	  state_num
         (
          
          case
          (
            
            Perform
            i
            									  
            
            ()
          ) 
          	        											 
            
            case
            (
             
             Shift
             
             (
              what_to_do
                  						 
             	moves
             
             )
             									  
             
             
             sequence
             (
               output_string
               (
                   
                    !
                    (
                    oc
                    )
                       							 
                   ^
                   (
                       "state_"
                       ^
                       (
                           string_of_int
                           (
                               state_num
                           )
                           " lexbuf =\n"
                       )
                   )
               )
             ;
               
               sequence
               (
                 beginEnd 
                 (
                     match
                     what_to_do
                     (
                     
                     case
                     (
                       No_remember
                       
                       ()
                     ) 
                     	        											 
                       
                       case
                       (
                        
                        Remember
                        i
                        									  
                        
                        output_string
                        (
                            
                             !
                             (
                             oc
                             )
                                							 
                            ^
                            (
                                "  Lexing.set_backtrack lexbuf action_"
                                ^
                                (
                                    string_of_int
                                    (
                                        i
                                    )
                                    ";\n"
                                )
                            )
                        )
                       )
                       													    
                     	        											 
                     	        											 
                     )
                     			   
                 )
               ;
                 output_all_trans
                 (
                     moves
                 )
               )
                   							
             )
                 							
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    output_entries
    (
     
     case
     (
       []
       
       failwith
       (
           "output_entries"
       )
     ) 
     	        											 
       
       case
       (
        
        ::
        (
            
            (
             name
                 						 
            	state_num
            
            )
            rest
        )
        
        
        sequence
        (
          output_string
          (
              
               !
               (
               oc
               )
                  							 
              ^
              (
                  name
                  " lexbuf =\n"
              )
          )
        ;
          
          sequence
          (
            output_string
            (
                
                 !
                 (
                 oc
                 )
                    							 
                "  Lexing.init lexbuf;\n"
            )
          ;
            
            sequence
            (
              output_string
              (
                  
                   !
                   (
                   oc
                   )
                      							 
                  ^
                  (
                      "  state_"
                      ^
                      (
                          string_of_int
                          (
                              state_num
                          )
                          " lexbuf\n"
                      )
                  )
              )
            ;
              match
              rest
              (
              
              case
              (
                []
                
                ()
              ) 
              	        											 
                
                case
                (
                 _
                 
                 
                 sequence
                 (
                   output_string
                   (
                       
                        !
                        (
                        oc
                        )
                           							 
                       "\nand "
                   )
                 ;
                   output_entries
                   (
                       rest
                   )
                 )
                     							
                )
                													    
              	        											 
              	        											 
              )
              			   
            )
                							
          )
              							
        )
            							
       )
       													    
     	        											 
     	        											 
    )
       							    
   							    		    
  )
                                     
  let
  (
   
    output_lexdef
   (
    case
        (
     		
     		 header
     		(
     		 case
     		     (
     		 	  
     		 	  (
     		 	   initial_st
     		 	       						 
     		 	  	st
     		 	  
     		 	  	actions
     		 	  
     		 	  )
     		      
     		      sequence
     		      (
     		        print_int
     		        (
     		            Array.length
     		            (
     		                st
     		            )
     		        )
     		      ;
     		        
     		        sequence
     		        (
     		          print_string
     		          (
     		              " states, "
     		          )
     		        ;
     		          
     		          sequence
     		          (
     		            print_int
     		            (
     		                List.length
     		                (
     		                    actions
     		                )
     		            )
     		          ;
     		            
     		            sequence
     		            (
     		              print_string
     		              (
     		                  " actions."
     		              )
     		            ;
     		              
     		              sequence
     		              (
     		                print_newline
     		                (
     		                    ()
     		                )
     		              ;
     		                
     		                sequence
     		                (
     		                  copy_chunk
     		                  (
     		                      header
     		                  )
     		                ;
     		                  
     		                  sequence
     		                  (
     		                    output_string
     		                    (
     		                        
     		                         !
     		                         (
     		                         oc
     		                         )
     		                            							 
     		                        "\nlet rec "
     		                    )
     		                  ;
     		                    
     		                    sequence
     		                    (
     		                      :=
     		                      (
     		                          states
     		                          st
     		                      )
     		                    ;
     		                      
     		                      sequence
     		                      (
     		                        List.iter
     		                        (
     		                            output_action
     		                            actions
     		                        )
     		                      ;
     		                        
     		                        sequence
     		                        (
     		                          forloop 
     		                          (
     		                              i
     		                              0
     		                              <>
     		                              -
     		                              (
     		                                  Array.length
     		                                  (
     		                                      st
     		                                  )
     		                                  1
     		                              )
     		                              output_state
     		                              (
     		                                  i
     		                                  Array.get
     		                                  (
     		                                   st
     		                                   i
     		                                  )
     		                                      													
     		                              )
     		                          )
     		                        ;
     		                          output_entries
     		                          (
     		                              initial_st
     		                          )
     		                        )
     		                            							
     		                      )
     		                          							
     		                    )
     		                        							
     		                  )
     		                      							
     		                )
     		                    							
     		              )
     		                  							
     		            )
     		                							
     		          )
     		              							
     		        )
     		            							
     		      )
     		          							
     		     )
     		)
     		    		   
        )
   )
       		    
  )
                                     
)