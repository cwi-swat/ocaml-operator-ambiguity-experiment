(
   class
   (
     params = 
     (
     x_init
     )
     class name = point
     class expr = 
                 class_structure
                 (
                     x
                     x_init
                    method get_x
                      x
                    method move
                      Array.set
                      (
                       x
                       +
                       (
                           x
                           d
                       )
                      )
                 )
   )
   let
   (
     p
     new point
     (
         7
     ) 
   )
  send get_x
  (
   p
  )
  send move
  (
   p
  )
  (
      3
  )
  send get_x
  (
   p
  )
   let
   (
     q
     Oo.copy
     (
         p
     ) 
   )
  sequence
  (
    send move
    (
     q
    )
    (
        7
    )
  ;
    (
     send get_x
     (
      p
     )
    	send get_x
    	(
    	 q
    	)
    )
  )
   class
   (
     params = 
     (
     x
     c
     string
     (
     )
     )
     class name = color_point
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                point
                                x
                            )
                     (
                     )
                     c
                     c
                    method color
                      c
                 )
   )
   let
   (
     p'
     new color_point
     (
         5
         "red"
     ) 
   )
  (
   send get_x
   (
    p'
   )
  	send color
  	(
  	 p'
  	)
  )
   let
   (
     l
     ::
      (
      p
      ::
      (
      brackets2 
      (
          p'
          point
          (
          )
      )
      []
      ) 
      ) 
   )
   let
   (
     get_x
    (
     case
         (
     	  p
          send get_x
          (
           p
          )
         )
    )
   )
   let
   (
     set_x
    (
     case
         (
     	  p
          send set_x
          (
           p
          )
         )
    )
   )
  List.map
  (
      get_x
      l
  )
   class
   (
     params = 
     (
     x_init
     )
     class name = ref
     class expr = 
                 class_structure
                 (
                     x
                     x_init
                    method get
                      x
                    method set
                      Array.set
                      (
                       x
                       y
                      )
                 )
   )
   class
   (
     params = 
     (
     x_init
     int
     (
     )
     )
     class name = ref
     class expr = 
                 class_structure
                 (
                     x
                     x_init
                    method get
                      x
                    method set
                      Array.set
                      (
                       x
                       y
                      )
                 )
   )
   class
   (
     params = 
     (
     x_init
     )
     class name = ref
     class expr = 
                 class_structure
                 (
                     x
                     (
                     x_init
                     :
                     a
                     )
                    method get
                      x
                    method set
                      Array.set
                      (
                       x
                       y
                      )
                 )
   )
  let
  (
   (
     r
     new ref
     (
         1
     ) 
   )
  in
    sequence
    (
      send set
      (
       r
      )
      (
          2
      )
    ;
      send get
      (
       r
      )
    )
  )
   class
   (
     params = 
     (
     c
     a
     )
     class name = circle
     class expr = 
                 class_structure
                 (
                     center
                     c
                    method center
                      center
                    method set_center
                      Array.set
                      (
                       center
                       c
                      )
                    method move
                      (
                      send move
                      (
                       center
                      )
                      :
                      arrow
                      int
                      (
                      )
                      unit
                      (
                      )
                      )
                 )
   )
   class
   (
     params = 
     (
     c
     a
     )
     class name = circle
     class expr = 
                 class_structure
                 (
                    classConstraint 
                    (
                        a
                        point
                    )
                     center
                     c
                    method center
                      center
                    method set_center
                      Array.set
                      (
                       center
                       c
                      )
                    method move
                      send move
                      (
                       center
                      )
                 )
   )
   let
   (
     (
      c
     	c'
     )
     (
      new circle
      (
          p
      )
     	new circle
     	(
     	    p'
     	)
     ) 
   )
   class
   (
     params = 
     (
     c
     )
     class name = color_circle
     class expr = 
                 class_structure
                 (
                    classConstraint 
                    (
                        a
                        color_point
                    )
                    inherit
                     constr classArgs 
                            (
                                <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"circle")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                                c
                            )
                     (
                     )
                    method color
                      send color
                      (
                       center
                      )
                 )
   )
   let
   (
     c''
     new color_circle
     (
         p
     ) 
   )
   let
   (
     c''
     new color_circle
     (
         p'
     ) 
   )
  brackets2 
  (
      c''
       circle
       (
         color_point
         (
         )
       )
  )
  brackets2 
  (
      c''
       circle
       (
         point
         (
         )
       )
  )
  (
   case
   (
   x
   brackets3 
   (
       x
        color_circle
        (
          color_point
          (
          )
        )
        circle
        (
          point
          (
          )
        )
   )
   )
  )
   class
   (
     params = 
     (
     y
     )
     class name = printable_point
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                point
                                y
                            )
                     (
                     )
                    method print
                      print_int
                      (
                          send get_x
                          (
                           s
                          )
                      )
                 )
   )
   let
   (
     p
     new printable_point
     (
         7
     ) 
   )
  send print
  (
   p
  )
   class
   (
     params = 
     (
     y
     c
     )
     class name = printable_color_point
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                color_point
                                y
                                c
                            )
                     (
                     )
                    inherit
                     constr classArgs 
                            (
                                printable_point
                                y
                            )
                     (
                     )
                    method print
                      sequence
                      (
                        print_string
                        (
                            "("
                        )
                      ;
                        sequence
                        (
                          send print
                          (
                           super
                          )
                        ;
                          sequence
                          (
                            print_string
                            (
                                ", "
                            )
                          ;
                            sequence
                            (
                              print_string
                              (
                                  send color
                                  (
                                   self
                                  )
                              )
                            ;
                              print_string
                              (
                                  ")"
                              )
                            )
                          )
                        )
                      )
                 )
   )
   let
   (
     p'
     new printable_color_point
     (
         7
         "red"
     ) 
   )
  send print
  (
   p'
  )
   class
   (
     params = 
     (
     y
     )
     class name = functional_point
     class expr = 
                 class_structure
                 (
                     x
                     y
                    method get_x
                      x
                    method move
                      brackets4 
                      (
                          x
                          +
                          (
                              x
                              d
                          )
                      )
                 )
   )
   let
   (
     p
     new functional_point
     (
         7
     ) 
   )
  send get_x
  (
   p
  )
  send get_x
  (
   send move
   (
    p
   )
   (
       3
   )
  )
  send get_x
  (
   p
  )
  (
   case
   (
   x
   brackets2 
   (
       x
       functional_point
       (
       )
   )
   )
  )
   class
   (
     params = 
     (
     ()
     )
     class name = lst
     class expr = 
                 class_structure
                 (
                    method null
                       poly
                       bool
                       (
                       )
                    method hd
                       poly
                       a
                    method tl
                       poly
                        lst
                        (
                          a
                        )
                    method map
                      (
                      ifthenelse
                      (
                       if
                       (
                        send null
                        (
                         self
                        )
                       )
                       then
                       (
                        new nil
                        (
                            ()
                        )
                       )
                       else
                       (
                        new cons
                        (
                            f
                            (
                                send hd
                                (
                                 self
                                )
                            )
                            send map
                            (
                             send tl
                             (
                              self
                             )
                            )
                            (
                                f
                            )
                        )
                       ) 
                      )
                      :
                       lst
                       (
                         a
                       )
                      )
                    method iter
                      ifthenelse
                      (
                       if
                       (
                        send null
                        (
                         self
                        )
                       )
                       then
                       (
                        ()
                       )
                       else
                       (
                        sequence
                        (
                          f
                          (
                              send hd
                              (
                               self
                              )
                          )
                        ;
                          send iter
                          (
                           send tl
                           (
                            self
                           )
                          )
                          (
                              f
                          )
                        )
                       ) 
                      )
                    method print
                      sequence
                      (
                        print_string
                        (
                            "("
                        )
                      ;
                        sequence
                        (
                          send iter
                          (
                           self
                          )
                          (
                              (
                               case
                               (
                               x
                               sequence
                               (
                                 f
                                 (
                                     x
                                 )
                               ;
                                 print_string
                                 (
                                     "::"
                                 )
                               )
                               )
                              )
                          )
                        ;
                          sequence
                          (
                            print_string
                            (
                                "[]"
                            )
                          ;
                            print_string
                            (
                                ")"
                            )
                          )
                        )
                      )
                 )
     params = 
     (
     ()
     )
     class name = nil
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"lst")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                                ()
                            )
                     (
                     )
                    method null
                      true
                    method hd
                      failwith
                      (
                          "hd"
                      )
                    method tl
                      failwith
                      (
                          "tl"
                      )
                 )
     params = 
     (
     h
     t
     )
     class name = cons
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"lst")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                                ()
                            )
                     (
                     )
                     h
                     h
                     t
                     t
                    method null
                      false
                    method hd
                      h
                    method tl
                      t
                 )
   )
   let
   (
     l1
     new cons
     (
         3
         new cons
         (
             10
             new nil
             (
                 ()
             )
         )
     ) 
   )
  send print
  (
   l1
  )
  (
      print_int
  )
   let
   (
     l2
     send map
     (
      l1
     )
     (
         (
          case
          (
          x
          +
          (
              x
              1
          )
          )
         )
     ) 
   )
  send print
  (
   l2
  )
  (
      print_int
  )
   let
   (
      map_list
    (
     case
         (
      		 f
      		(
      		 case
      		     (
      		 	  x
      		 	   lst
      		 	   (
      		 	     a
      		 	   )
      		      ifthenelse
      		      (
      		       if
      		       (
      		        send null
      		        (
      		         x
      		        )
      		       )
      		       then
      		       (
      		        new nil
      		        (
      		            ()
      		        )
      		       )
      		       else
      		       (
      		        new cons
      		        (
      		            f
      		            (
      		                send hd
      		                (
      		                 x
      		                )
      		            )
      		            map_list
      		            (
      		                f
      		                send tl
      		                (
      		                 x
      		                )
      		            )
      		        )
      		       ) 
      		      )
      		     )
      		)
         )
    )
   )
   let
   (
     p1
     map_list
     (
         (
          case
          (
          x
          new printable_color_point
          (
              x
              "red"
          )
          )
         )
         l1
     ) 
   )
  send print
  (
   p1
  )
  (
      (
       case
       (
       x
       send print
       (
        x
       )
       )
      )
  )
   class
   (
     params = 
     (
     ()
     )
     class name = comparable
     class expr = 
                 class_structure
                 (
                    method leq
                       poly
                       arrow
                       a
                       bool
                       (
                       )
                 )
   )
   class
   (
     params = 
     (
     x
     int
     (
     )
     )
     class name = int_comparable
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                comparable
                                ()
                            )
                     (
                     )
                     x
                     x
                    method x
                      x
                    method leq
                      <=
                      (
                          x
                          send x
                          (
                           p
                          )
                      )
                 )
   )
   class
   (
     params = 
     (
     xi
     )
     class name = int_comparable2
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                int_comparable
                                xi
                            )
                     (
                     )
                     x'
                     xi
                    method set_x
                      Array.set
                      (
                       x'
                       y
                      )
                 )
   )
   class
   (
     params = 
     (
     ()
     )
     class name = sorted_list
     class expr = 
                 class_structure
                 (
                    classConstraint 
                    (
                        a
                        comparable
                    )
                     l
                     (
                     []
                     :
                      list
                      (
                        a
                      )
                     )
                    method add
                      let
                      (
                       (
                         insert
                         (
                          case
                          (
                            []
                            ::
                             (
                             x
                             []
                             ) 
                          ) 
                            case
                            (
                             alias l'
                             (
                               ::
                               (
                                   a
                                   l
                               )
                             )
                             ifthenelse
                             (
                              if
                              (
                               send leq
                               (
                                a
                               )
                               (
                                   x
                               )
                              )
                              then
                              (
                               ::
                               (
                                   a
                                   insert
                                   (
                                       l
                                   )
                               )
                              )
                              else
                              (
                               ::
                               (
                                   x
                                   l'
                               )
                              ) 
                             )
                            )
                         )
                       )
                      in
                        Array.set
                        (
                         l
                         insert
                         (
                             l
                         )
                        )
                      )
                    method hd
                      List.hd
                      (
                          l
                      )
                 )
   )
   let
   (
     l
     new sorted_list
     (
         ()
     ) 
   )
   let
   (
     c
     new int_comparable
     (
         10
     ) 
   )
  send add
  (
   l
  )
  (
      c
  )
   let
   (
     c2
     new int_comparable2
     (
         15
     ) 
   )
  send add
  (
   l
  )
  (
      brackets2 
      (
          c2
          int_comparable
          (
          )
      )
  )
  send add
  (
   new sorted_list
   (
       ()
   )
  )
  (
      c2
  )
   class
   (
     params = 
     (
     x
     int
     (
     )
     )
     class name = int_comparable3
     class expr = 
                 class_structure
                 (
                     x
                     x
                    method leq
                      <
                      (
                          x
                          send x
                          (
                           y
                          )
                      )
                    method x
                      x
                    method setx
                      Array.set
                      (
                       x
                       y
                      )
                 )
   )
   let
   (
     c3
     new int_comparable3
     (
         15
     ) 
   )
  send add
  (
   l
  )
  (
      brackets2 
      (
          c3
          int_comparable
          (
          )
      )
  )
  send add
  (
   new sorted_list
   (
       ()
   )
  )
  (
      c3
  )
   let
   (
     sort
    (
     case
         (
     	  l
     	   list
     	   (
     	     comparable
     	   )
          Sort.list
          (
              (
               case
               (
               x
               send leq
               (
                x
               )
               )
              )
              l
          )
         )
    )
   )
   let
   (
     pr
    (
     case
         (
     	  l
          sequence
          (
            List.map
            (
                (
                 case
                 (
                 c
                 sequence
                 (
                   print_int
                   (
                       send x
                       (
                        c
                       )
                   )
                 ;
                   print_string
                   (
                       " "
                   )
                 )
                 )
                )
                l
            )
          ;
            print_newline
            (
                ()
            )
          )
         )
    )
   )
   let
   (
     l
     ::
      (
      new int_comparable
      (
          5
      )
      ::
      (
      brackets2 
      (
          new int_comparable3
          (
              2
          )
          int_comparable
          (
          )
      )
      ::
      (
      new int_comparable
      (
          4
      )
      []
      ) 
      ) 
      ) 
   )
  pr
  (
      l
  )
  pr
  (
      sort
      (
          l
      )
  )
   let
   (
     l
     ::
      (
      new int_comparable2
      (
          2
      )
      ::
      (
      new int_comparable2
      (
          0
      )
      []
      ) 
      ) 
   )
  pr
  (
      l
  )
  pr
  (
      sort
      (
          l
      )
  )
   let
   (
      min
    (
     case
         (
      		 x
      		 comparable
      		(
      		 case
      		     (
      		 	  y
      		      ifthenelse
      		      (
      		       if
      		       (
      		        send leq
      		        (
      		         x
      		        )
      		        (
      		            y
      		        )
      		       )
      		       then
      		       (
      		        x
      		       )
      		       else
      		       (
      		        y
      		       ) 
      		      )
      		     )
      		)
         )
    )
   )
  send x
  (
   min
   (
       new int_comparable
       (
           7
       )
       new int_comparable
       (
           11
       )
   )
  )
  send x
  (
   min
   (
       new int_comparable2
       (
           5
       )
       new int_comparable2
       (
           3
       )
   )
  )
   class
   (
     params = 
     (
     x
     a
     )
     class name = link
     class expr = 
                 class_structure
                 (
                     x
                     x
                     next
                     (
                     None
                     :
                      option
                      (
                        b
                      )
                     )
                    method x
                      x
                    method next
                      next
                    method set_x
                      Array.set
                      (
                       x
                       y
                      )
                    method set_next
                      Array.set
                      (
                       next
                       l
                      )
                    method append
                      match
                      next
                      (
                      case
                      (
                        None
                        send set_next
                        (
                         self
                        )
                        (
                            l
                        )
                      ) 
                        case
                        (
                         Some
                         l'
                         send append
                         (
                          l'
                         )
                         (
                             l
                         )
                        )
                      )
                 )
   )
   class
   (
     params = 
     (
     x
     )
     class name = double_link
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"classPath"([],"link")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                                x
                            )
                     (
                     )
                     prev
                     None
                    method prev
                      prev
                    method set_next
                      sequence
                      (
                        Array.set
                        (
                         next
                         l
                        )
                      ;
                        match
                        l
                        (
                        case
                        (
                          Some
                          l
                          send set_prev
                          (
                           l
                          )
                          (
                              Some
                                 self
                          )
                        ) 
                          case
                          (
                           None
                           ()
                          )
                        )
                      )
                    method set_prev
                      Array.set
                      (
                       prev
                       l
                      )
                 )
   )
   let
   (
      fold_right
    (
     case
         (
      		  f
      		(
      		 case
      		     (
      		  		 l
      		  		  option
      		  		  (
      		  		    <"tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"classPath"([],"link")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
      		  		  )
      		  		(
      		  		 case
      		  		     (
      		  		 	  accu
      		  		      match
      		  		      l
      		  		      (
      		  		      case
      		  		      (
      		  		        None
      		  		        accu
      		  		      ) 
      		  		        case
      		  		        (
      		  		         Some
      		  		         l
      		  		         f
      		  		         (
      		  		             send x
      		  		             (
      		  		              l
      		  		             )
      		  		             fold_right
      		  		             (
      		  		                 f
      		  		                 send next
      		  		                 (
      		  		                  l
      		  		                 )
      		  		                 accu
      		  		             )
      		  		         )
      		  		        )
      		  		      )
      		  		     )
      		  		)
      		     )
      		)
         )
    )
   )
   class
   (
     params = 
     (
     ()
     )
     class name = calculator
     class expr = 
                 class_structure
                 (
                     arg
                     0.
                     acc
                     0.
                     equals
                     (
                      case
                      (
                        s
                        send arg
                        (
                         s
                        )
                      ) 
                     )
                    method arg
                      arg
                    method acc
                      acc
                    method enter
                      sequence
                      (
                        Array.set
                        (
                         arg
                         n
                        )
                      ;
                        self
                      )
                    method add
                      sequence
                      (
                        Array.set
                        (
                         acc
                         equals
                         (
                             self
                         )
                        )
                      ;
                        sequence
                        (
                          Array.set
                          (
                           equals
                           (
                            case
                            (
                              s
                              +.
                              (
                                  send acc
                                  (
                                   s
                                  )
                                  send arg
                                  (
                                   s
                                  )
                              )
                            ) 
                           )
                          )
                        ;
                          self
                        )
                      )
                    method sub
                      sequence
                      (
                        Array.set
                        (
                         acc
                         equals
                         (
                             self
                         )
                        )
                      ;
                        sequence
                        (
                          Array.set
                          (
                           equals
                           (
                            case
                            (
                              s
                              -.
                              (
                                  send acc
                                  (
                                   s
                                  )
                                  send arg
                                  (
                                   s
                                  )
                              )
                            ) 
                           )
                          )
                        ;
                          self
                        )
                      )
                    method equals
                      equals
                      (
                          self
                      )
                 )
   )
  send equals
  (
   send enter
   (
    new calculator
    (
        ()
    )
   )
   (
       5.
   )
  )
  send equals
  (
   send enter
   (
    send sub
    (
     send enter
     (
      new calculator
      (
          ()
      )
     )
     (
         5.
     )
    )
   )
   (
       3.5
   )
  )
  send equals
  (
   send add
   (
    send add
    (
     send enter
     (
      new calculator
      (
          ()
      )
     )
     (
         5.
     )
    )
   )
  )
   class
   (
     params = 
     (
     ()
     )
     class name = calculator
     class expr = 
                 class_structure
                 (
                     arg
                     0.
                     acc
                     0.
                     equals
                     (
                      case
                      (
                        s
                        send arg
                        (
                         s
                        )
                      ) 
                     )
                    method arg
                      arg
                    method acc
                      acc
                    method enter
                      sequence
                      (
                        Array.set
                        (
                         arg
                         n
                        )
                      ;
                        self
                      )
                    method add
                      brackets4 
                      (
                          acc
                          equals
                          (
                              self
                          )
                          <"equals","function"("patternMatching"([],"patternValueName"("s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"infix3"("hash"("valuePath"("valuePath"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"+.","hash"("valuePath"("valuePath"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"arg")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                      )
                    method sub
                      brackets4 
                      (
                          acc
                          equals
                          (
                              self
                          )
                          <"equals","function"("patternMatching"([],"patternValueName"("s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[],"infix3"("hash"("valuePath"("valuePath"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"-.","hash"("valuePath"("valuePath"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"arg")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                      )
                    method equals
                      equals
                      (
                          self
                      )
                 )
   )
  send equals
  (
   send enter
   (
    new calculator
    (
        ()
    )
   )
   (
       5.
   )
  )
  send equals
  (
   send enter
   (
    send sub
    (
     send enter
     (
      new calculator
      (
          ()
      )
     )
     (
         5.
     )
    )
   )
   (
       3.5
   )
  )
  send equals
  (
   send add
   (
    send add
    (
     send enter
     (
      new calculator
      (
          ()
      )
     )
     (
         5.
     )
    )
   )
  )
   class
   (
     params = 
     (
     arg
     acc
     )
     class name = calculator
     class expr = 
                 class_structure
                 (
                     arg
                     arg
                     acc
                     acc
                    method enter
                      new calculator
                      (
                          n
                          acc
                      )
                    method add
                      new calculator_add
                      (
                          arg
                          send equals
                          (
                           self
                          )
                      )
                    method sub
                      new calculator_sub
                      (
                          arg
                          send equals
                          (
                           self
                          )
                      )
                    method equals
                      arg
                 )
     params = 
     (
     arg
     acc
     )
     class name = calculator_add
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                calculator
                                arg
                                acc
                            )
                     (
                     )
                    method enter
                      new calculator_add
                      (
                          n
                          acc
                      )
                    method equals
                      +.
                      (
                          acc
                          arg
                      )
                 )
     params = 
     (
     arg
     acc
     )
     class name = calculator_sub
     class expr = 
                 class_structure
                 (
                    inherit
                     constr classArgs 
                            (
                                calculator
                                arg
                                acc
                            )
                     (
                     )
                    method enter
                      new calculator_sub
                      (
                          n
                          acc
                      )
                    method equals
                      -.
                      (
                          acc
                          arg
                      )
                 )
   )
   let
   (
     calculator
     new calculator
     (
         0.
         0.
     ) 
   )
  send equals
  (
   send enter
   (
    calculator
   )
   (
       5.
   )
  )
  send equals
  (
   send enter
   (
    send sub
    (
     send enter
     (
      calculator
     )
     (
         5.
     )
    )
   )
   (
       3.5
   )
  )
  send equals
  (
   send add
   (
    send add
    (
     send enter
     (
      calculator
     )
     (
         5.
     )
    )
   )
  )
)
