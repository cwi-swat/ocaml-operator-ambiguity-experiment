(
   module  Foobar
    struct
    (
    type
    (  						
       t
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         int
         (
         )
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          int
          (
          )
     )
    )
   module  F0
    Foobar
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          int
          (
          )
     )
    )
   let
   (
     f
    (
     case
         (
     	  x
     	  F0.t
     	  (
     	  )
          (
          x
          :
          Foobar.t
          (
          )
          )
         )
    )
   )
   module  F
    Foobar
   let
   (
     f
    (
     case
         (
     	  x
     	  F.t
     	  (
     	  )
          (
          x
          :
          Foobar.t
          (
          )
          )
         )
    )
   )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         <[<"m","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[]>
    )
    )
   module  M1
    M
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          <[<"m","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>
     )
    )
   module  M2
    M1
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          <[<"m","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>
     )
    )
  (
   case
   (
   x
   M1.t
   (
   )
   (
   x
   :
   M2.t
   (
   )
   )
   )
  )
   module  M3
    M1
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M1.t
          (
          )
     )
    )
  (
   case
   (
   x
   (
     x
     :
     M3.t
     (
     )
     M1.t
     (
     )
   )
   )
  )
  (
   case
   (
   x
   (
     x
     :
     M3.t
     (
     )
     M.t
     (
     )
   )
   )
  )
   module  M4
    M2
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M3.t
          (
          )
     )
    )
   module  M4
    M
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M3.t
          (
          )
     )
    )
   module  M4
    M1
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M3.t
          (
          )
     )
    )
   module  M5
    M3
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M1.t
          (
          )
     )
    )
   module  M6
    M1
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          <[<"n","polytype1"("typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>],[<>]>
     )
    )
   module  Bar
    struct
    (
    type
    (  						
       t
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         int
         (
         )
    )
    let
    (
      f
     (
      case
          (
      	  x
      	  int
      	  (
      	  )
           (
           x
           :
           t
           (
           )
           )
          )
     )
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          Foobar.t
          (
          )
     )
     sig_value f
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M
    struct
    (
    type
    (  						
       t
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         (
         T
         (
          int
          (
          )
         )
         )
    )
    let
    (
      mk
     (
      case
          (
      	  x
           T
              x
          )
     )
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          (
          T
          (
           int
           (
           )
          )
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M1
    struct
    (
    type
    (  						
       t
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         M.t
         (
         )
    )
    let
    (
      mk
      M.mk 
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M.t
          (
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M2
    struct
    (
    include
    (
      M
    )
    )
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M.t
          (
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M3
    M
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M.t
          (
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M4
    M
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M.t
          (
          )
          (
          T
          (
           int
           (
           )
          )
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M5
    M
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M.t
          (
          )
          (
          T
          (
           int
           (
           )
          )
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M6
    M
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          (
          T
          (
           int
           (
           )
          )
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M'
    struct
    (
    type
    (  						
       t_priv
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         (
         T
         (
          int
          (
          )
         )
         )
    )
    type
    (  						
       t
         type
         params=
         (
         )
         cstrs =
         (
         )
         kind =
         t_priv
         (
         )
    )
    let
    (
      mk
     (
      case
          (
      	  x
           T
              x
          )
     )
    )
    )
    signature
    (
     type
     (  						
        t_priv
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          (
          T
          (
           int
           (
           )
          )
          )
     )
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          t_priv
          (
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
   module  M3'
    M'
    signature
    (
     type
     (  						
        t
          type
          params=
          (
          )
          cstrs =
          (
          )
          kind =
          M'.t
          (
          )
     )
     sig_value mk
     value_description
     arrow
     int
     (
     )
     t
     (
     )
     (
     )
    )
)
