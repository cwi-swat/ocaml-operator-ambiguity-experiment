(
  type
  (
    ty
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              Int
                (
                )
                     ty
                    (
                         int
                        (
                        )
                    )
              String
                (
                )
                     ty
                    (
                         string
                        (
                        )
                    )
              List
                (
                     ty
                    (
                        a
                    )
                )
                     ty
                    (
                         list
                        (
                            a
                        )
                    )
              Pair
                (
                    tuple
                    (
                         ty
                        (
                            a
                        )
                         ty
                        (
                            b
                        )
                    )
                )
                     ty
                    (
                        tuple
                        (
                            a
                            b
                        )
                    )
            )
            )
  type
  (
    variant
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              VInt
                (
                     int
                    (
                    )
                )
                              VString
                (
                     string
                    (
                    )
                )
                              VList
                (
                     list
                    (
                         variant
                        (
                        )
                    )
                )
                              VPair
                (
                     variant
                    (
                    )
                     variant
                    (
                    )
                )
                            )
            )
  let
  (
    variantize
      poly
       't
        arrow
           ty
          (
              t
          )
          arrow
            t
             variant
            (
            )
      t
      (
      (
        case
        (
          ty
          (
            case
            (
              x
              match
              ty
              (
                case
                (
                  Int
                                    VInt
                    x
                )
                case
                (
                  String
                                    VString
                    x
                )
                case
                (
                  List
                    ty1
                  VList
                    List.map
                    (
                        variantize
                        (
                            ty1
                        )
                        x
                    )
                )
                case
                (
                  Pair
                    (
                      ty1
                      ty2
                    )
                  VPair
                    (
                      variantize
                      (
                          ty1
                          fst
                          (
                              x
                          )
                      )
                      variantize
                      (
                          ty2
                          snd
                          (
                              x
                          )
                      )
                    )
                )
              )
            )
          )
        )
      )
      :
          arrow
             ty
            (
                 t
                (
                )
            )
            arrow
               t
              (
              )
               variant
              (
              )
            )
  )
  exception VariantMismatch
  (
  )
  let
  (
    devariantize
      poly
       't
        arrow
           ty
          (
              t
          )
          arrow
             variant
            (
            )
            t
      t
      (
      (
        case
        (
          ty
          (
            case
            (
              v
              match
              (
                ty
                v
              )
              (
                case
                (
                  (
                    Int
                                        VInt
                      x
                  )
                  x
                )
                case
                (
                  (
                    String
                                        VString
                      x
                  )
                  x
                )
                case
                (
                  (
                    List
                      ty1
                    VList
                      vl
                  )
                  List.map
                  (
                      devariantize
                      (
                          ty1
                      )
                      vl
                  )
                )
                case
                (
                  (
                    Pair
                      (
                        ty1
                        ty2
                      )
                    VPair
                      (
                        x1
                        x2
                      )
                  )
                  (
                    devariantize
                    (
                        ty1
                        x1
                    )
                    devariantize
                    (
                        ty2
                        x2
                    )
                  )
                )
                case
                (
                  _
                  raise
                  (
                      VariantMismatch
                                        )
                )
              )
            )
          )
        )
      )
      :
          arrow
             ty
            (
                 t
                (
                )
            )
            arrow
               variant
              (
              )
               t
              (
              )
            )
  )
  type
  (
    ty
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              Int
                (
                )
                     ty
                    (
                         int
                        (
                        )
                    )
              String
                (
                )
                     ty
                    (
                         string
                        (
                        )
                    )
              List
                (
                     ty
                    (
                        a
                    )
                )
                     ty
                    (
                         list
                        (
                            a
                        )
                    )
              Pair
                (
                    tuple
                    (
                         ty
                        (
                            a
                        )
                         ty
                        (
                            b
                        )
                    )
                )
                     ty
                    (
                        tuple
                        (
                            a
                            b
                        )
                    )
              Record
                (
                     record
                    (
                        a
                    )
                )
                     ty
                    (
                        a
                    )
            )
              record
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              path
                  poly
                     string
                    (
                    )
              fields
                  poly
                     list
                    (
                         field_
                        (
                            a
                        )
                    )
            )
              field_
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              Field
                (
                     field
                    (
                        a
                        b
                    )
                )
                     field_
                    (
                        a
                    )
            )
              field
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
          )
        kind =
            (
              label
                  poly
                     string
                    (
                    )
              field_type
                  poly
                     ty
                    (
                        b
                    )
              get
                  poly
                    arrow
                      a
                      b
            )
            )
  type
  (
    variant
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              VInt
                (
                     int
                    (
                    )
                )
                              VString
                (
                     string
                    (
                    )
                )
                              VList
                (
                     list
                    (
                         variant
                        (
                        )
                    )
                )
                              VPair
                (
                     variant
                    (
                    )
                     variant
                    (
                    )
                )
                              VRecord
                (
                     list
                    (
                        tuple
                        (
                             string
                            (
                            )
                             variant
                            (
                            )
                        )
                    )
                )
                            )
            )
  let
  (
    variantize
      poly
       't
        arrow
           ty
          (
              t
          )
          arrow
            t
             variant
            (
            )
      t
      (
      (
        case
        (
          ty
          (
            case
            (
              x
              match
              ty
              (
                case
                (
                  Int
                                    VInt
                    x
                )
                case
                (
                  String
                                    VString
                    x
                )
                case
                (
                  List
                    ty1
                  VList
                    List.map
                    (
                        variantize
                        (
                            ty1
                        )
                        x
                    )
                )
                case
                (
                  Pair
                    (
                      ty1
                      ty2
                    )
                  VPair
                    (
                      variantize
                      (
                          ty1
                          fst
                          (
                              x
                          )
                      )
                      variantize
                      (
                          ty2
                          snd
                          (
                              x
                          )
                      )
                    )
                )
                case
                (
                  Record
                    (
                      fields
                        fields
                    )
                  VRecord
                    List.map
                    (
                        (
                          case
                          (
                            Field
                              (
                                field_type
                                  field_type
                                label
                                  label
                                get
                                  get
                              )
                            (
                              label
                              variantize
                              (
                                  field_type
                                  get
                                  (
                                      x
                                  )
                              )
                            )
                          )
                        )
                        fields
                    )
                )
              )
            )
          )
        )
      )
      :
          arrow
             ty
            (
                 t
                (
                )
            )
            arrow
               t
              (
              )
               variant
              (
              )
            )
  )
  type
  (
    ty
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              Int
                (
                )
                     ty
                    (
                         int
                        (
                        )
                    )
              String
                (
                )
                     ty
                    (
                         string
                        (
                        )
                    )
              List
                (
                     ty
                    (
                        a
                    )
                )
                     ty
                    (
                         list
                        (
                            a
                        )
                    )
              Pair
                (
                    tuple
                    (
                         ty
                        (
                            a
                        )
                         ty
                        (
                            b
                        )
                    )
                )
                     ty
                    (
                        tuple
                        (
                            a
                            b
                        )
                    )
              Record
                (
                     record
                    (
                        a
                        builder
                    )
                )
                     ty
                    (
                        a
                    )
            )
              record
      type
        params =
          (
            a
            builder
          )
        cstrs =
          (
          )
        kind =
            (
              path
                  poly
                     string
                    (
                    )
              fields
                  poly
                     list
                    (
                         field
                        (
                            a
                            builder
                        )
                    )
              create_builder
                  poly
                    arrow
                       unit
                      (
                      )
                      builder
              of_builder
                  poly
                    arrow
                      builder
                      a
            )
              field
      type
        params =
          (
            a
            builder
          )
        cstrs =
          (
          )
        kind =
            (
              Field
                (
                     field_
                    (
                        a
                        builder
                        b
                    )
                )
                     field
                    (
                        a
                        builder
                    )
            )
              field_
      type
        params =
          (
            a
            builder
            b
          )
        cstrs =
          (
          )
        kind =
            (
              label
                  poly
                     string
                    (
                    )
              field_type
                  poly
                     ty
                    (
                        b
                    )
              get
                  poly
                    arrow
                      a
                      b
              set
                  poly
                    arrow
                      builder
                      arrow
                        b
                         unit
                        (
                        )
            )
            )
  let
  (
    devariantize
      poly
       't
        arrow
           ty
          (
              t
          )
          arrow
             variant
            (
            )
            t
      t
      (
      (
        case
        (
          ty
          (
            case
            (
              v
              match
              (
                ty
                v
              )
              (
                case
                (
                  (
                    Int
                                        VInt
                      x
                  )
                  x
                )
                case
                (
                  (
                    String
                                        VString
                      x
                  )
                  x
                )
                case
                (
                  (
                    List
                      ty1
                    VList
                      vl
                  )
                  List.map
                  (
                      devariantize
                      (
                          ty1
                      )
                      vl
                  )
                )
                case
                (
                  (
                    Pair
                      (
                        ty1
                        ty2
                      )
                    VPair
                      (
                        x1
                        x2
                      )
                  )
                  (
                    devariantize
                    (
                        ty1
                        x1
                    )
                    devariantize
                    (
                        ty2
                        x2
                    )
                  )
                )
                case
                (
                  (
                    Record
                      (
                        fields
                          fields
                        create_builder
                          create_builder
                        of_builder
                          of_builder
                      )
                    VRecord
                      fl
                  )
                  sequence
                  (
                    ifthenelse
                    (
                      if
                      (
                        <>
                        (
                            List.length
                            (
                                fields
                            )
                            List.length
                            (
                                fl
                            )
                        )
                      )
                      then
                      (
                        raise
                        (
                            VariantMismatch
                                                    )
                      )
                      else
                      (
                                              )
                    )
                  ;
                    let
                    (
                      (
                        builder
                          create_builder
                          (
                              ()
                                                        )
                      )
                    in
                      sequence
                      (
                        List.iter2
                        (
                            (
                              case
                              (
                                Field
                                  (
                                    label
                                      label
                                    field_type
                                      field_type
                                    set
                                      set
                                  )
                                (
                                  case
                                  (
                                    (
                                      lab
                                      v
                                    )
                                    sequence
                                    (
                                      ifthenelse
                                      (
                                        if
                                        (
                                          <>
                                          (
                                              label
                                              lab
                                          )
                                        )
                                        then
                                        (
                                          raise
                                          (
                                              VariantMismatch
                                                                                        )
                                        )
                                        else
                                        (
                                                                                  )
                                      )
                                    ;
                                      set
                                      (
                                          builder
                                          devariantize
                                          (
                                              field_type
                                              v
                                          )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                            fields
                            fl
                        )
                      ;
                        of_builder
                        (
                            builder
                        )
                      )
                    )
                  )
                )
                case
                (
                  _
                  raise
                  (
                      VariantMismatch
                                        )
                )
              )
            )
          )
        )
      )
      :
          arrow
             ty
            (
                 t
                (
                )
            )
            arrow
               variant
              (
              )
               t
              (
              )
            )
  )
  type
  (
    my_record
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              a
                  poly
                     int
                    (
                    )
              b
                  poly
                     list
                    (
                         string
                        (
                        )
                    )
            )
            )
  let
  (
    my_record
      let
      (
        (
          fields
            ::
              (
                Field
                  record
                  (
                    label
                      "a"
                    field_type
                      Int
                                          get
                      (
                        case
                        (
                          (
                            a
                              a
                          )
                          a
                        )
                      )
                    set
                      (
                        case
                        (
                          (
                            r
                            _
                          )
                          (
                            case
                            (
                              x
                              :=
                              (
                                  r
                                  Some
                                    x
                              )
                            )
                          )
                        )
                      )
                  )
                                  ::
                  (
                    Field
                      record
                      (
                        label
                          "b"
                        field_type
                          List
                            String
                                                    get
                          (
                            case
                            (
                              (
                                b
                                  b
                              )
                              b
                            )
                          )
                        set
                          (
                            case
                            (
                              (
                                _
                                r
                              )
                              (
                                case
                                (
                                  x
                                  :=
                                  (
                                      r
                                      Some
                                        x
                                  )
                                )
                              )
                            )
                          )
                      )
                                          []
                                      )
              )
        )
      in
        let
        (
          (
            create_builder
              (
                case
                (
                  ()
                                    (
                    ref
                    (
                        None
                                            )
                    ref
                    (
                        None
                                            )
                  )
                )
              )
          )
        in
          let
          (
            (
              of_builder
                (
                  case
                  (
                    (
                      a
                      b
                    )
                    match
                    (
                      !
                      (
                          a
                      )
                      !
                      (
                          b
                      )
                    )
                    (
                      case
                      (
                        (
                          Some
                            a
                          Some
                            b
                        )
                        record
                        (
                          a
                            a
                          b
                            b
                        )
                                              )
                      case
                      (
                        _
                        failwith
                        (
                            "Some fields are missing in record of type my_record"
                        )
                      )
                    )
                  )
                )
            )
          in
            Record
              record
              (
                path
                  "My_module.my_record"
                fields
                  fields
                create_builder
                  create_builder
                of_builder
                  of_builder
              )
                        )
        )
      )
  )
  type
  (
    noarg
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Noarg
                (
                )
                            )
            )
  type
  (
    ty
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Int
                (
                )
                     ty
                    (
                         int
                        (
                        )
                    )
              String
                (
                )
                     ty
                    (
                         string
                        (
                        )
                    )
              List
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                         list
                        (
                            a
                        )
                        e
                    )
              Option
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                         option
                        (
                            a
                        )
                        e
                    )
              Pair
                (
                    tuple
                    (
                         ty
                        (
                            a
                            e
                        )
                         ty
                        (
                            b
                            e
                        )
                    )
                )
                     ty
                    (
                        tuple
                        (
                            a
                            b
                        )
                        e
                    )
              Var
                (
                )
                     ty
                    (
                        a
                        arrow
                          a
                          e
                    )
              Rec
                (
                     ty
                    (
                        a
                        arrow
                          a
                          e
                    )
                )
                     ty
                    (
                        a
                        e
                    )
              Pop
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                        a
                        arrow
                          b
                          e
                    )
              Conv
                (
                     string
                    (
                    )
                    arrow
                      a
                      b
                    arrow
                      b
                      a
                     ty
                    (
                        b
                        e
                    )
                )
                     ty
                    (
                        a
                        e
                    )
              Sum
                (
                     ty_sum
                    (
                        a
                        e
                        b
                    )
                )
                     ty
                    (
                        a
                        e
                    )
            )
              ty_sum
      type
        params =
          (
            a
            e
            b
          )
        cstrs =
          (
          )
        kind =
            (
              sum_proj
                  poly
                    arrow
                      a
                      tuple
                      (
                           string
                          (
                          )
                           option
                          (
                               ty_dyn
                              (
                                  e
                              )
                          )
                      )
              sum_cases
                  poly
                     list
                    (
                        tuple
                        (
                             string
                            (
                            )
                             ty_case
                            (
                                e
                                b
                            )
                        )
                    )
              sum_inj
                  poly
                   'c
                    arrow
                      tuple
                      (
                           ty_sel
                          (
                              b
                              c
                          )
                          c
                      )
                      a
            )
              ty_dyn
      type
        params =
          (
            e
          )
        cstrs =
          (
          )
        kind =
            (
              Tdyn
                (
                     ty
                    (
                        a
                        e
                    )
                    a
                )
                     ty_dyn
                    (
                        e
                    )
            )
              ty_sel
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Thd
                (
                )
                     ty_sel
                    (
                        arrow
                          a
                          b
                        a
                    )
              Ttl
                (
                     ty_sel
                    (
                        arrow
                          b
                          c
                        d
                    )
                )
                     ty_sel
                    (
                        arrow
                          a
                          arrow
                            b
                            c
                        d
                    )
            )
              ty_case
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              TCarg
                (
                     ty_sel
                    (
                        b
                        a
                    )
                     ty
                    (
                        a
                        e
                    )
                )
                     ty_case
                    (
                        e
                        b
                    )
              TCnoarg
                (
                     ty_sel
                    (
                        b
                         noarg
                        (
                        )
                    )
                )
                     ty_case
                    (
                        e
                        b
                    )
            )
            )
  type
  (
    ty_env
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Enil
                (
                )
                     ty_env
                    (
                         unit
                        (
                        )
                    )
              Econs
                (
                     ty
                    (
                        a
                        e
                    )
                     ty_env
                    (
                        e
                    )
                )
                     ty_env
                    (
                        arrow
                          a
                          e
                    )
            )
            )
  type
  (
    eq
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Eq
                (
                )
                     eq
                    (
                        a
                        a
                    )
            )
            )
  let
  (
    eq_sel
      poly
       'a 'b 'c
        arrow
           ty_sel
          (
              a
              b
          )
          arrow
             ty_sel
            (
                a
                c
            )
             option
            (
                 eq
                (
                    b
                    c
                )
            )
      a
      b
      c
      (
      (
        case
        (
          s1
          (
            case
            (
              s2
              match
              (
                s1
                s2
              )
              (
                case
                (
                  (
                    Thd
                                        Thd
                                      )
                  Some
                    Eq
                                    )
                case
                (
                  (
                    Ttl
                      s1
                    Ttl
                      s2
                  )
                  match
                  eq_sel
                  (
                      s1
                      s2
                  )
                  (
                    case
                    (
                      None
                                            None
                                          )
                    case
                    (
                      Some
                        Eq
                                              Some
                        Eq
                                            )
                  )
                )
                case
                (
                  _
                  None
                                  )
              )
            )
          )
        )
      )
      :
          arrow
             ty_sel
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
               ty_sel
              (
                   a
                  (
                  )
                   c
                  (
                  )
              )
               option
              (
                   eq
                  (
                       b
                      (
                      )
                       c
                      (
                      )
                  )
              )
            )
  )
  let
  (
    get_case
      poly
       'a 'b 'e
        arrow
           ty_sel
          (
              b
              a
          )
          arrow
             list
            (
                tuple
                (
                     string
                    (
                    )
                     ty_case
                    (
                        e
                        b
                    )
                )
            )
            tuple
            (
                 string
                (
                )
                 option
                (
                     ty
                    (
                        a
                        e
                    )
                )
            )
      a
      b
      e
      (
      (
        case
        (
          sel
          (
            case
            (
              cases
              match
              cases
              (
                case
                (
                  ::
                    (
                      (
                        name
                        TCnoarg
                          sel'
                      )
                      rem
                    )
                  match
                  eq_sel
                  (
                      sel
                      sel'
                  )
                  (
                    case
                    (
                      None
                                            get_case
                      (
                          sel
                          rem
                      )
                    )
                    case
                    (
                      Some
                        Eq
                                              (
                        name
                        None
                                              )
                    )
                  )
                )
                case
                (
                  ::
                    (
                      (
                        name
                        TCarg
                          (
                            sel'
                            ty
                          )
                      )
                      rem
                    )
                  match
                  eq_sel
                  (
                      sel
                      sel'
                  )
                  (
                    case
                    (
                      None
                                            get_case
                      (
                          sel
                          rem
                      )
                    )
                    case
                    (
                      Some
                        Eq
                                              (
                        name
                        Some
                          ty
                      )
                    )
                  )
                )
                case
                (
                  []
                                    raise
                  (
                      Not_found
                                        )
                )
              )
            )
          )
        )
      )
      :
          arrow
             ty_sel
            (
                 b
                (
                )
                 a
                (
                )
            )
            arrow
               list
              (
                  tuple
                  (
                       string
                      (
                      )
                       ty_case
                      (
                           e
                          (
                          )
                           b
                          (
                          )
                      )
                  )
              )
              tuple
              (
                   string
                  (
                  )
                   option
                  (
                       ty
                      (
                           a
                          (
                          )
                           e
                          (
                          )
                      )
                  )
              )
            )
  )
  type
  (
    variant
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              VInt
                (
                     int
                    (
                    )
                )
                              VString
                (
                     string
                    (
                    )
                )
                              VList
                (
                     list
                    (
                         variant
                        (
                        )
                    )
                )
                              VOption
                (
                     option
                    (
                         variant
                        (
                        )
                    )
                )
                              VPair
                (
                     variant
                    (
                    )
                     variant
                    (
                    )
                )
                              VConv
                (
                     string
                    (
                    )
                     variant
                    (
                    )
                )
                              VSum
                (
                     string
                    (
                    )
                     option
                    (
                         variant
                        (
                        )
                    )
                )
                            )
            )
  let
  (
    may_map
      (
        case
        (
          f
          (
            case
            (
              Some
                x
              Some
                f
                (
                    x
                )
            )
            case
            (
              None
                            None
                          )
          )
        )
      )
  )
  let
  (
    variantize
      poly
       'a 'e
        arrow
           ty_env
          (
              e
          )
          arrow
             ty
            (
                a
                e
            )
            arrow
              a
               variant
              (
              )
      a
      e
      (
      (
        case
        (
          e
          (
            case
            (
              ty
              (
                case
                (
                  v
                  match
                  ty
                  (
                    case
                    (
                      Int
                                            VInt
                        v
                    )
                    case
                    (
                      String
                                            VString
                        v
                    )
                    case
                    (
                      List
                        t
                      VList
                        List.map
                        (
                            variantize
                            (
                                e
                                t
                            )
                            v
                        )
                    )
                    case
                    (
                      Option
                        t
                      VOption
                        may_map
                        (
                            variantize
                            (
                                e
                                t
                            )
                            v
                        )
                    )
                    case
                    (
                      Pair
                        (
                          t1
                          t2
                        )
                      VPair
                        (
                          variantize
                          (
                              e
                              t1
                              fst
                              (
                                  v
                              )
                          )
                          variantize
                          (
                              e
                              t2
                              snd
                              (
                                  v
                              )
                          )
                        )
                    )
                    case
                    (
                      Rec
                        t
                      variantize
                      (
                          Econs
                            (
                              ty
                              e
                            )
                          t
                          v
                      )
                    )
                    case
                    (
                      Pop
                        t
                      match
                      e
                      (
                        case
                        (
                          Econs
                            (
                              _
                              e'
                            )
                          variantize
                          (
                              e'
                              t
                              v
                          )
                        )
                      )
                    )
                    case
                    (
                      Var
                                            match
                      e
                      (
                        case
                        (
                          Econs
                            (
                              t
                              e'
                            )
                          variantize
                          (
                              e'
                              t
                              v
                          )
                        )
                      )
                    )
                    case
                    (
                      Conv
                        (
                          s
                          proj
                          inj
                          t
                        )
                      VConv
                        (
                          s
                          variantize
                          (
                              e
                              t
                              proj
                              (
                                  v
                              )
                          )
                        )
                    )
                    case
                    (
                      Sum
                        ops
                      let
                      (
                        (
                          (
                            tag
                            arg
                          )
                            field
                            (
                            ops
                            sum_proj
                            )
                            (
                                v
                            )
                        )
                      in
                        VSum
                          (
                            tag
                            may_map
                            (
                                (
                                  case
                                  (
                                    Tdyn
                                      (
                                        ty
                                        arg
                                      )
                                    variantize
                                    (
                                        e
                                        ty
                                        arg
                                    )
                                  )
                                )
                                arg
                            )
                          )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
             ty_env
            (
                 e
                (
                )
            )
            arrow
               ty
              (
                   a
                  (
                  )
                   e
                  (
                  )
              )
              arrow
                 a
                (
                )
                 variant
                (
                )
            )
  )
  let
  (
    devariantize
      poly
       't 'e
        arrow
           ty_env
          (
              e
          )
          arrow
             ty
            (
                t
                e
            )
            arrow
               variant
              (
              )
              t
      t
      e
      (
      (
        case
        (
          e
          (
            case
            (
              ty
              (
                case
                (
                  v
                  match
                  (
                    ty
                    v
                  )
                  (
                    case
                    (
                      (
                        Int
                                                VInt
                          x
                      )
                      x
                    )
                    case
                    (
                      (
                        String
                                                VString
                          x
                      )
                      x
                    )
                    case
                    (
                      (
                        List
                          ty1
                        VList
                          vl
                      )
                      List.map
                      (
                          devariantize
                          (
                              e
                              ty1
                          )
                          vl
                      )
                    )
                    case
                    (
                      (
                        Pair
                          (
                            ty1
                            ty2
                          )
                        VPair
                          (
                            x1
                            x2
                          )
                      )
                      (
                        devariantize
                        (
                            e
                            ty1
                            x1
                        )
                        devariantize
                        (
                            e
                            ty2
                            x2
                        )
                      )
                    )
                    case
                    (
                      (
                        Rec
                          t
                        _
                      )
                      devariantize
                      (
                          Econs
                            (
                              ty
                              e
                            )
                          t
                          v
                      )
                    )
                    case
                    (
                      (
                        Pop
                          t
                        _
                      )
                      match
                      e
                      (
                        case
                        (
                          Econs
                            (
                              _
                              e'
                            )
                          devariantize
                          (
                              e'
                              t
                              v
                          )
                        )
                      )
                    )
                    case
                    (
                      (
                        Var
                                                _
                      )
                      match
                      e
                      (
                        case
                        (
                          Econs
                            (
                              t
                              e'
                            )
                          devariantize
                          (
                              e'
                              t
                              v
                          )
                        )
                      )
                    )
                    case
                    (
                      (
                        Conv
                          (
                            s
                            proj
                            inj
                            t
                          )
                        VConv
                          (
                            s'
                            v
                          )
                      )
                      when
                        =
                        (
                            s
                            s'
                        )
                        inj
                        (
                            devariantize
                            (
                                e
                                t
                                v
                            )
                        )
                    )
                    case
                    (
                      (
                        Sum
                          ops
                        VSum
                          (
                            tag
                            a
                          )
                      )
                      try
                      match
                      (
                        List.assoc
                        (
                            tag
                            field
                            (
                            ops
                            sum_cases
                            )
                        )
                        a
                      )
                      (
                        case
                        (
                          (
                            TCarg
                              (
                                sel
                                t
                              )
                            Some
                              a
                          )
                          field
                          (
                          ops
                          sum_inj
                          )
                          (
                              (
                                sel
                                devariantize
                                (
                                    e
                                    t
                                    a
                                )
                              )
                          )
                        )
                        case
                        (
                          (
                            TCnoarg
                              sel
                            None
                                                      )
                          field
                          (
                          ops
                          sum_inj
                          )
                          (
                              (
                                sel
                                Noarg
                                                              )
                          )
                        )
                        case
                        (
                          _
                          raise
                          (
                              VariantMismatch
                                                        )
                        )
                      )
                      (
                        case
                        (
                          Not_found
                                                    raise
                          (
                              VariantMismatch
                                                        )
                        )
                      )
                    )
                    case
                    (
                      _
                      raise
                      (
                          VariantMismatch
                                                )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
             ty_env
            (
                 e
                (
                )
            )
            arrow
               ty
              (
                   t
                  (
                  )
                   e
                  (
                  )
              )
              arrow
                 variant
                (
                )
                 t
                (
                )
            )
  )
  let
  (
    wrap_A
      (
        case
        (
          t
          Conv
            (
              "`A"
              (
                case
                (
                  A
                    x
                  x
                )
              )
              (
                case
                (
                  x
                  A
                    x
                )
              )
              t
            )
        )
      )
  )
  let
  (
    ty
      (
        case
        (
          a
          Rec
            wrap_A
            (
                Option
                  Pair
                    (
                      a
                      Var
                                          )
            )
        )
      )
  )
  let
  (
    v
      variantize
      (
          Enil
          ty
          (
              Int
                        )
      )
  )
  let
  (
    x
      v
      (
          A
            Some
              (
                1
                A
                  Some
                    (
                      2
                      A
                        None
                                            )
              )
      )
  )
  let
  (
    triple
      (
        case
        (
          t1
          (
            case
            (
              t2
              (
                case
                (
                  t3
                  Conv
                    (
                      "Triple"
                      (
                        case
                        (
                          (
                            a
                            b
                            c
                          )
                          (
                            a
                            (
                              b
                              c
                            )
                          )
                        )
                      )
                      (
                        case
                        (
                          (
                            a
                            (
                              b
                              c
                            )
                          )
                          (
                            a
                            b
                            c
                          )
                        )
                      )
                      Pair
                        (
                          t1
                          Pair
                            (
                              t2
                              t3
                            )
                        )
                    )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    v
      variantize
      (
          Enil
          triple
          (
              String
              Int
              Int
                        )
          (
            "A"
            2
            3
          )
      )
  )
  let
  (
    ty_abc
      let
      (
        (
          proj
            (
              case
              (
                A
                  n
                (
                  "A"
                  Some
                    Tdyn
                      (
                        Int
                                                n
                      )
                )
              )
              case
              (
                B
                  s
                (
                  "B"
                  Some
                    Tdyn
                      (
                        String
                                                s
                      )
                )
              )
              case
              (
                C
                                (
                  "C"
                  None
                                  )
              )
            )
          inj
            poly
             'c
              arrow
                tuple
                (
                     ty_sel
                    (
                        arrow
                           int
                          (
                          )
                          arrow
                             string
                            (
                            )
                            arrow
                               noarg
                              (
                              )
                               unit
                              (
                              )
                        c
                    )
                    c
                )
                (
                  A
                    (
                         int
                        (
                        )
                    )
                  B
                    (
                         string
                        (
                        )
                    )
                  C
                    (
                    )
                )
                            c
            (
            (
              case
              (
                (
                  Thd
                                    v
                )
                A
                  v
              )
              case
              (
                (
                  Ttl
                    Thd
                                      v
                )
                B
                  v
              )
              case
              (
                (
                  Ttl
                    Ttl
                      Thd
                                        Noarg
                                  )
                C
                              )
            )
            :
                arrow
                  tuple
                  (
                       ty_sel
                      (
                          arrow
                             int
                            (
                            )
                            arrow
                               string
                              (
                              )
                              arrow
                                 noarg
                                (
                                )
                                 unit
                                (
                                )
                           c
                          (
                          )
                      )
                       c
                      (
                      )
                  )
                  (
                    A
                      (
                           int
                          (
                          )
                      )
                    B
                      (
                           string
                          (
                          )
                      )
                    C
                      (
                      )
                  )
                                          )
        )
      in
        Sum
          record
          (
            sum_proj
              proj
            sum_inj
              inj
            sum_cases
              ::
                (
                  (
                    "A"
                    TCarg
                      (
                        Thd
                                                Int
                                              )
                  )
                  ::
                    (
                      (
                        "B"
                        TCarg
                          (
                            Ttl
                              Thd
                                                          String
                                                      )
                      )
                      ::
                        (
                          (
                            "C"
                            TCnoarg
                              Ttl
                                Ttl
                                  Thd
                                                            )
                          []
                                                  )
                    )
                )
          )
                )
  )
  let
  (
    v
      variantize
      (
          Enil
          ty_abc
          A
            3
      )
  )
  let
  (
    a
      devariantize
      (
          Enil
          ty_abc
          v
      )
  )
  type
  (
    vlist
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
              (
                Nil
                  (
                  )
                Cons
                  (
                      tuple
                      (
                          a
                           vlist
                          (
                              a
                          )
                      )
                  )
              )
                )
  let
  (
    ty_list
      poly
       'a 'e
        arrow
           ty
          (
              a
              e
          )
           ty
          (
               vlist
              (
                  a
              )
              e
          )
      a
      e
      (
      (
        case
        (
          t
          let
          (
            (
              tcons
                Pair
                  (
                    Pop
                      t
                    Var
                                      )
            )
          in
            Rec
              Sum
                record
                (
                  sum_proj
                    (
                      case
                      (
                        Nil
                                                (
                          "Nil"
                          None
                                                  )
                      )
                      case
                      (
                        Cons
                          p
                        (
                          "Cons"
                          Some
                            Tdyn
                              (
                                tcons
                                p
                              )
                        )
                      )
                    )
                  sum_cases
                    ::
                      (
                        (
                          "Nil"
                          TCnoarg
                            Thd
                                                    )
                        ::
                          (
                            (
                              "Cons"
                              TCarg
                                (
                                  Ttl
                                    Thd
                                                                      tcons
                                )
                            )
                            []
                                                      )
                      )
                  sum_inj
                    c
                    (
                    (
                      case
                      (
                        (
                          Thd
                                                    Noarg
                                                  )
                        Nil
                                              )
                      case
                      (
                        (
                          Ttl
                            Thd
                                                      v
                        )
                        Cons
                          v
                      )
                    )
                    :
                        arrow
                          tuple
                          (
                               ty_sel
                              (
                                  arrow
                                     noarg
                                    (
                                    )
                                    arrow
                                      tuple
                                      (
                                           a
                                          (
                                          )
                                           vlist
                                          (
                                               a
                                              (
                                              )
                                          )
                                      )
                                       unit
                                      (
                                      )
                                   c
                                  (
                                  )
                              )
                               c
                              (
                              )
                          )
                           vlist
                          (
                               a
                              (
                              )
                          )
                                        )
                )
                          )
        )
      )
      :
          arrow
             ty
            (
                 a
                (
                )
                 e
                (
                )
            )
             ty
            (
                 vlist
                (
                     a
                    (
                    )
                )
                 e
                (
                )
            )
            )
  )
  let
  (
    v
      variantize
      (
          Enil
          ty_list
          (
              Int
                        )
          Cons
            (
              1
              Cons
                (
                  2
                  Nil
                                  )
            )
      )
  )
  type
  (
    ty
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Int
                (
                )
                     ty
                    (
                         int
                        (
                        )
                    )
              String
                (
                )
                     ty
                    (
                         string
                        (
                        )
                    )
              List
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                         list
                        (
                            a
                        )
                        e
                    )
              Option
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                         option
                        (
                            a
                        )
                        e
                    )
              Pair
                (
                    tuple
                    (
                         ty
                        (
                            a
                            e
                        )
                         ty
                        (
                            b
                            e
                        )
                    )
                )
                     ty
                    (
                        tuple
                        (
                            a
                            b
                        )
                        e
                    )
              Var
                (
                )
                     ty
                    (
                        a
                        arrow
                          a
                          e
                    )
              Rec
                (
                     ty
                    (
                        a
                        arrow
                          a
                          e
                    )
                )
                     ty
                    (
                        a
                        e
                    )
              Pop
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                        a
                        arrow
                          b
                          e
                    )
              Conv
                (
                     string
                    (
                    )
                    arrow
                      a
                      b
                    arrow
                      b
                      a
                     ty
                    (
                        b
                        e
                    )
                )
                     ty
                    (
                        a
                        e
                    )
              Sum
                (
                    arrow
                      a
                      tuple
                      (
                           string
                          (
                          )
                           option
                          (
                               ty_dyn
                              (
                                  e
                              )
                          )
                      )
                    arrow
                      tuple
                      (
                           string
                          (
                          )
                           option
                          (
                               ty_dyn
                              (
                                  e
                              )
                          )
                      )
                      a
                )
                     ty
                    (
                        a
                        e
                    )
            )
              ty_dyn
      type
        params =
          (
            e
          )
        cstrs =
          (
          )
        kind =
            (
              Tdyn
                (
                     ty
                    (
                        a
                        e
                    )
                    a
                )
                     ty_dyn
                    (
                        e
                    )
            )
            )
  let
  (
    ty_abc
      (
      Sum
        (
          (
            case
            (
              A
                n
              (
                "A"
                Some
                  Tdyn
                    (
                      Int
                                            n
                    )
              )
            )
            case
            (
              B
                s
              (
                "B"
                Some
                  Tdyn
                    (
                      String
                                            s
                    )
              )
            )
            case
            (
              C
                            (
                "C"
                None
                              )
            )
          )
          (
            case
            (
              (
                "A"
                Some
                  Tdyn
                    (
                      Int
                                            n
                    )
              )
              A
                n
            )
            case
            (
              (
                "B"
                Some
                  Tdyn
                    (
                      String
                                            s
                    )
              )
              B
                s
            )
            case
            (
              (
                "C"
                None
                              )
              C
                          )
            case
            (
              _
              invalid_arg
              (
                  "ty_abc"
              )
            )
          )
        )
      :
           ty
          (
              (
                A
                  (
                       int
                      (
                      )
                  )
                B
                  (
                       string
                      (
                      )
                  )
                C
                  (
                  )
              )
                            e
          )
            )
  )
  let
  (
    ty_list
      poly
       'a 'e
        arrow
           ty
          (
              a
              e
          )
           ty
          (
               vlist
              (
                  a
              )
              e
          )
      a
      e
      (
      (
        case
        (
          t
          let
          (
            (
              targ
                Pair
                  (
                    Pop
                      t
                    Var
                                      )
            )
          in
            Rec
              Sum
                (
                  (
                    case
                    (
                      Nil
                                            (
                        "Nil"
                        None
                                              )
                    )
                    case
                    (
                      Cons
                        p
                      (
                        "Cons"
                        Some
                          Tdyn
                            (
                              targ
                              p
                            )
                      )
                    )
                  )
                  (
                    case
                    (
                      (
                        "Nil"
                        None
                                              )
                      Nil
                                          )
                    case
                    (
                      (
                        "Cons"
                        Some
                          Tdyn
                            (
                              Pair
                                (
                                  _
                                  Var
                                                                  )
                              p
                                tuple
                                (
                                     a
                                    (
                                    )
                                     vlist
                                    (
                                         a
                                        (
                                        )
                                    )
                                )
                            )
                      )
                      Cons
                        p
                    )
                  )
                )
          )
        )
      )
      :
          arrow
             ty
            (
                 a
                (
                )
                 e
                (
                )
            )
             ty
            (
                 vlist
                (
                     a
                    (
                    )
                )
                 e
                (
                )
            )
            )
  )
  type
  (
    ty
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Int
                (
                )
                     ty
                    (
                         int
                        (
                        )
                    )
              String
                (
                )
                     ty
                    (
                         string
                        (
                        )
                    )
              List
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                         list
                        (
                            a
                        )
                        e
                    )
              Option
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                         option
                        (
                            a
                        )
                        e
                    )
              Pair
                (
                    tuple
                    (
                         ty
                        (
                            a
                            e
                        )
                         ty
                        (
                            b
                            e
                        )
                    )
                )
                     ty
                    (
                        tuple
                        (
                            a
                            b
                        )
                        e
                    )
              Var
                (
                )
                     ty
                    (
                        a
                        arrow
                          a
                          e
                    )
              Rec
                (
                     ty
                    (
                        a
                        arrow
                          a
                          e
                    )
                )
                     ty
                    (
                        a
                        e
                    )
              Pop
                (
                     ty
                    (
                        a
                        e
                    )
                )
                     ty
                    (
                        a
                        arrow
                          b
                          e
                    )
              Conv
                (
                     string
                    (
                    )
                    arrow
                      a
                      b
                    arrow
                      b
                      a
                     ty
                    (
                        b
                        e
                    )
                )
                     ty
                    (
                        a
                        e
                    )
              Sum
                (
                    (
                        proj
                          poly
                            arrow
                              a
                              tuple
                              (
                                   string
                                  (
                                  )
                                   option
                                  (
                                       ty_dyn
                                      (
                                          e
                                      )
                                  )
                              )
                        cases
                          poly
                             list
                            (
                                tuple
                                (
                                     string
                                    (
                                    )
                                     ty_case
                                    (
                                        e
                                        b
                                    )
                                )
                            )
                        inj
                          poly
                           'c
                            arrow
                              tuple
                              (
                                   ty_sel
                                  (
                                      b
                                      c
                                  )
                                  c
                              )
                              a
                    )
                )
                     ty
                    (
                        a
                        e
                    )
            )
              ty_dyn
      type
        params =
          (
            e
          )
        cstrs =
          (
          )
        kind =
            (
              Tdyn
                (
                     ty
                    (
                        a
                        e
                    )
                    a
                )
                     ty_dyn
                    (
                        e
                    )
            )
              ty_sel
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Thd
                (
                )
                     ty_sel
                    (
                        arrow
                          a
                          b
                        a
                    )
              Ttl
                (
                     ty_sel
                    (
                        arrow
                          b
                          c
                        d
                    )
                )
                     ty_sel
                    (
                        arrow
                          a
                          arrow
                            b
                            c
                        d
                    )
            )
              ty_case
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              TCarg
                (
                     ty_sel
                    (
                        b
                        a
                    )
                     ty
                    (
                        a
                        e
                    )
                )
                     ty_case
                    (
                        e
                        b
                    )
              TCnoarg
                (
                     ty_sel
                    (
                        b
                         noarg
                        (
                        )
                    )
                )
                     ty_case
                    (
                        e
                        b
                    )
            )
            )
  let
  (
    ty_abc
      (
      Sum
        class_structure
          (
            method proj
              (
                case
                (
                  A
                    n
                  (
                    "A"
                    Some
                      Tdyn
                        (
                          Int
                                                    n
                        )
                  )
                )
                case
                (
                  B
                    s
                  (
                    "B"
                    Some
                      Tdyn
                        (
                          String
                                                    s
                        )
                  )
                )
                case
                (
                  C
                                    (
                    "C"
                    None
                                      )
                )
              )
                          method cases
              ::
                (
                  (
                    "A"
                    TCarg
                      (
                        Thd
                                                Int
                                              )
                  )
                  ::
                    (
                      (
                        "B"
                        TCarg
                          (
                            Ttl
                              Thd
                                                          String
                                                      )
                      )
                      ::
                        (
                          (
                            "C"
                            TCnoarg
                              Ttl
                                Ttl
                                  Thd
                                                            )
                          []
                                                  )
                    )
                )
                          method inj
              c
              (
              (
                case
                (
                  (
                    Thd
                                        v
                  )
                  A
                    v
                )
                case
                (
                  (
                    Ttl
                      Thd
                                          v
                  )
                  B
                    v
                )
                case
                (
                  (
                    Ttl
                      Ttl
                        Thd
                                            Noarg
                                      )
                  C
                                  )
                case
                (
                  _
                  assert false
                )
              )
              :
                  arrow
                    tuple
                    (
                         ty_sel
                        (
                            arrow
                               int
                              (
                              )
                              arrow
                                 string
                                (
                                )
                                arrow
                                   noarg
                                  (
                                  )
                                   unit
                                  (
                                  )
                             c
                            (
                            )
                        )
                         c
                        (
                        )
                    )
                    (
                      A
                        (
                             int
                            (
                            )
                        )
                      B
                        (
                             string
                            (
                            )
                        )
                      C
                        (
                        )
                    )
                                                )
                  poly
                   'c
                    arrow
                      tuple
                      (
                           ty_sel
                          (
                              arrow
                                 int
                                (
                                )
                                arrow
                                   string
                                  (
                                  )
                                  arrow
                                     noarg
                                    (
                                    )
                                     unit
                                    (
                                    )
                              c
                          )
                          c
                      )
                      (
                        A
                          (
                               int
                              (
                              )
                          )
                        B
                          (
                               string
                              (
                              )
                          )
                        C
                          (
                          )
                      )
                                )
      :
           ty
          (
              a
                (
                  A
                    (
                         int
                        (
                        )
                    )
                  B
                    (
                         string
                        (
                        )
                    )
                  C
                    (
                    )
                )
                              e
          )
            )
  )
  type
  (
    vlist
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
              (
                Nil
                  (
                  )
                Cons
                  (
                      tuple
                      (
                          a
                           vlist
                          (
                              a
                          )
                      )
                  )
              )
                )
  let
  (
    ty_list
      poly
       'a 'e
        arrow
           ty
          (
              a
              e
          )
           ty
          (
               vlist
              (
                  a
              )
              e
          )
      a
      e
      (
      (
        case
        (
          t
          let
          (
            (
              tcons
                Pair
                  (
                    Pop
                      t
                    Var
                                      )
            )
          in
            Rec
              Sum
                class_structure
                  (
                    method proj
                      (
                        case
                        (
                          Nil
                                                    (
                            "Nil"
                            None
                                                      )
                        )
                        case
                        (
                          Cons
                            p
                          (
                            "Cons"
                            Some
                              Tdyn
                                (
                                  tcons
                                  p
                                )
                          )
                        )
                      )
                                          method cases
                      ::
                        (
                          (
                            "Nil"
                            TCnoarg
                              Thd
                                                        )
                          ::
                            (
                              (
                                "Cons"
                                TCarg
                                  (
                                    Ttl
                                      Thd
                                                                          tcons
                                  )
                              )
                              []
                                                          )
                        )
                                          method inj
                      c
                      (
                      (
                        case
                        (
                          (
                            Thd
                                                        Noarg
                                                      )
                          Nil
                                                  )
                        case
                        (
                          (
                            Ttl
                              Thd
                                                          v
                          )
                          Cons
                            v
                        )
                      )
                      :
                          arrow
                            tuple
                            (
                                 ty_sel
                                (
                                    arrow
                                       noarg
                                      (
                                      )
                                      arrow
                                        tuple
                                        (
                                             a
                                            (
                                            )
                                             vlist
                                            (
                                                 a
                                                (
                                                )
                                            )
                                        )
                                         unit
                                        (
                                        )
                                     c
                                    (
                                    )
                                )
                                 c
                                (
                                )
                            )
                             vlist
                            (
                                 a
                                (
                                )
                            )
                                            )
                          poly
                           'c
                            arrow
                              tuple
                              (
                                   ty_sel
                                  (
                                      arrow
                                         noarg
                                        (
                                        )
                                        arrow
                                          tuple
                                          (
                                               a
                                              (
                                              )
                                               vlist
                                              (
                                                   a
                                                  (
                                                  )
                                              )
                                          )
                                           unit
                                          (
                                          )
                                      c
                                  )
                                  c
                              )
                               vlist
                              (
                                   a
                                  (
                                  )
                              )
                  )
          )
        )
      )
      :
          arrow
             ty
            (
                 a
                (
                )
                 e
                (
                )
            )
             ty
            (
                 vlist
                (
                     a
                    (
                    )
                )
                 e
                (
                )
            )
            )
  )
)
