(
  module Typeable
    struct
    (
      type
      (
        ty
          type
            params =
              (
                a
              )
            cstrs =
              (
              )
            kind =
                (
                  Int
                    (
                    )
                         ty
                        (
                             int
                            (
                            )
                        )
                  String
                    (
                    )
                         ty
                        (
                             string
                            (
                            )
                        )
                  List
                    (
                         ty
                        (
                            a
                        )
                    )
                         ty
                        (
                             list
                            (
                                a
                            )
                        )
                  Pair
                    (
                        tuple
                        (
                             ty
                            (
                                a
                            )
                             ty
                            (
                                b
                            )
                        )
                    )
                         ty
                        (
                            tuple
                            (
                                a
                                b
                            )
                        )
                  Fun
                    (
                        tuple
                        (
                             ty
                            (
                                a
                            )
                             ty
                            (
                                b
                            )
                        )
                    )
                         ty
                        (
                            arrow
                              a
                              b
                        )
                )
                    )
      type
      (
        eq
          type
            params =
              (
                "_"
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  Eq
                    (
                    )
                         eq
                        (
                            a
                            a
                        )
                )
                    )
      exception CastFailure
      (
      )
      let
      (
        check_eq
          poly
           't 't'
            arrow
               ty
              (
                  t
              )
              arrow
                 ty
                (
                    t'
                )
                 eq
                (
                    t
                    t'
                )
          t
          t'
          (
          (
            case
            (
              t
              (
                case
                (
                  t'
                  match
                  (
                    t
                    t'
                  )
                  (
                    case
                    (
                      (
                        Int
                                                Int
                                              )
                      Eq
                                          )
                    case
                    (
                      (
                        String
                                                String
                                              )
                      Eq
                                          )
                    case
                    (
                      (
                        List
                          t
                        List
                          t'
                      )
                      match
                      check_eq
                      (
                          t
                          t'
                      )
                      (
                        case
                        (
                          Eq
                                                    Eq
                                                  )
                      )
                    )
                    case
                    (
                      (
                        Pair
                          (
                            t1
                            t2
                          )
                        Pair
                          (
                            t1'
                            t2'
                          )
                      )
                      match
                      (
                        check_eq
                        (
                            t1
                            t1'
                        )
                        check_eq
                        (
                            t2
                            t2'
                        )
                      )
                      (
                        case
                        (
                          (
                            Eq
                                                        Eq
                                                      )
                          Eq
                                                  )
                      )
                    )
                    case
                    (
                      (
                        Fun
                          (
                            t1
                            t2
                          )
                        Fun
                          (
                            t1'
                            t2'
                          )
                      )
                      match
                      (
                        check_eq
                        (
                            t1
                            t1'
                        )
                        check_eq
                        (
                            t2
                            t2'
                        )
                      )
                      (
                        case
                        (
                          (
                            Eq
                                                        Eq
                                                      )
                          Eq
                                                  )
                      )
                    )
                    case
                    (
                      _
                      raise
                      (
                          CastFailure
                                                )
                    )
                  )
                )
              )
            )
          )
          :
              arrow
                 ty
                (
                     t
                    (
                    )
                )
                arrow
                   ty
                  (
                       t'
                      (
                      )
                  )
                   eq
                  (
                       t
                      (
                      )
                       t'
                      (
                      )
                  )
                    )
      )
      let
      (
        gcast
          poly
           't 't'
            arrow
               ty
              (
                  t
              )
              arrow
                 ty
                (
                    t'
                )
                arrow
                  t
                  t'
          t
          t'
          (
          (
            case
            (
              t
              (
                case
                (
                  t'
                  (
                    case
                    (
                      x
                      match
                      check_eq
                      (
                          t
                          t'
                      )
                      (
                        case
                        (
                          Eq
                                                    x
                        )
                      )
                    )
                  )
                )
              )
            )
          )
          :
              arrow
                 ty
                (
                     t
                    (
                    )
                )
                arrow
                   ty
                  (
                       t'
                      (
                      )
                  )
                  arrow
                     t
                    (
                    )
                     t'
                    (
                    )
                    )
      )
    )
  module HOAS
    struct
    (
      open Typeable
      type
      (
        term
          type
            params =
              (
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  Tag
                    (
                         ty
                        (
                            t
                        )
                         int
                        (
                        )
                    )
                         term
                        (
                            t
                        )
                  Con
                    (
                        t
                    )
                         term
                        (
                            t
                        )
                  Lam
                    (
                         ty
                        (
                            s
                        )
                        arrow
                           term
                          (
                              s
                          )
                           term
                          (
                              t
                          )
                    )
                         term
                        (
                            arrow
                              s
                              t
                        )
                  App
                    (
                         term
                        (
                            arrow
                              s
                              t
                        )
                         term
                        (
                            s
                        )
                    )
                         term
                        (
                            t
                        )
                )
                    )
      let
      (
        intp
          poly
           't
            arrow
               term
              (
                  t
              )
              t
          t
          (
          (
            case
            (
              Tag
                (
                  _
                  ix
                )
              failwith
              (
                  "HOAS.intp"
              )
            )
            case
            (
              Con
                v
              v
            )
            case
            (
              Lam
                (
                  _
                  f
                )
              (
                case
                (
                  x
                  intp
                  (
                      f
                      (
                          Con
                            x
                      )
                  )
                )
              )
            )
            case
            (
              App
                (
                  f
                  a
                )
              intp
              (
                  f
                  intp
                  (
                      a
                  )
              )
            )
          )
          :
              arrow
                 term
                (
                     t
                    (
                    )
                )
                 t
                (
                )
                    )
      )
    )
  module DeBruijn
    struct
    (
      type
      (
        ix
          type
            params =
              (
                env
                t
              )
            cstrs =
              (
              )
            kind =
                (
                  ZeroIx
                    (
                    )
                         ix
                        (
                            tuple
                            (
                                env
                                t
                            )
                            t
                        )
                  SuccIx
                    (
                         ix
                        (
                            env
                            t
                        )
                    )
                         ix
                        (
                            tuple
                            (
                                env
                                s
                            )
                            t
                        )
                )
                    )
      let
      (
        to_int
          poly
           'env 't
            arrow
               ix
              (
                  env
                  t
              )
               int
              (
              )
          env
          t
          (
          (
            case
            (
              ZeroIx
                            0
            )
            case
            (
              SuccIx
                n
              +
              (
                  to_int
                  (
                      n
                  )
                  1
              )
            )
          )
          :
              arrow
                 ix
                (
                     env
                    (
                    )
                     t
                    (
                    )
                )
                 int
                (
                )
                    )
      )
      type
      (
        term
          type
            params =
              (
                env
                t
              )
            cstrs =
              (
              )
            kind =
                (
                  Var
                    (
                         ix
                        (
                            env
                            t
                        )
                    )
                         term
                        (
                            env
                            t
                        )
                  Con
                    (
                        t
                    )
                         term
                        (
                            env
                            t
                        )
                  Lam
                    (
                         term
                        (
                            tuple
                            (
                                env
                                s
                            )
                            t
                        )
                    )
                         term
                        (
                            env
                            arrow
                              s
                              t
                        )
                  App
                    (
                         term
                        (
                            env
                            arrow
                              s
                              t
                        )
                         term
                        (
                            env
                            s
                        )
                    )
                         term
                        (
                            env
                            t
                        )
                )
                    )
      type
      (
        stack
          type
            params =
              (
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  Empty
                    (
                    )
                         stack
                        (
                             unit
                            (
                            )
                        )
                  Push
                    (
                         stack
                        (
                            env
                        )
                        t
                    )
                         stack
                        (
                            tuple
                            (
                                env
                                t
                            )
                        )
                )
                    )
      let
      (
        prj
          poly
           'env 't
            arrow
               ix
              (
                  env
                  t
              )
              arrow
                 stack
                (
                    env
                )
                t
          env
          t
          (
          (
            case
            (
              i
              (
                case
                (
                  s
                  match
                  (
                    i
                    s
                  )
                  (
                    case
                    (
                      (
                        ZeroIx
                                                Push
                          (
                            s
                            v
                          )
                      )
                      v
                    )
                    case
                    (
                      (
                        SuccIx
                          i
                        Push
                          (
                            s
                            _
                          )
                      )
                      prj
                      (
                          i
                          s
                      )
                    )
                  )
                )
              )
            )
          )
          :
              arrow
                 ix
                (
                     env
                    (
                    )
                     t
                    (
                    )
                )
                arrow
                   stack
                  (
                       env
                      (
                      )
                  )
                   t
                  (
                  )
                    )
      )
      let
      (
        intp
          poly
           'env 't
            arrow
               term
              (
                  env
                  t
              )
              arrow
                 stack
                (
                    env
                )
                t
          env
          t
          (
          (
            case
            (
              t
              (
                case
                (
                  s
                  match
                  t
                  (
                    case
                    (
                      Var
                        ix
                      prj
                      (
                          ix
                          s
                      )
                    )
                    case
                    (
                      Con
                        v
                      v
                    )
                    case
                    (
                      Lam
                        b
                      (
                        case
                        (
                          x
                          intp
                          (
                              b
                              Push
                                (
                                  s
                                  x
                                )
                          )
                        )
                      )
                    )
                    case
                    (
                      App
                        (
                          f
                          a
                        )
                      intp
                      (
                          f
                          s
                          intp
                          (
                              a
                              s
                          )
                      )
                    )
                  )
                )
              )
            )
          )
          :
              arrow
                 term
                (
                     env
                    (
                    )
                     t
                    (
                    )
                )
                arrow
                   stack
                  (
                       env
                      (
                      )
                  )
                   t
                  (
                  )
                    )
      )
    )
  module Convert
    struct
    (
      type
      (
        layout
          type
            params =
              (
                "_"
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  EmptyLayout
                    (
                    )
                         layout
                        (
                            env
                             unit
                            (
                            )
                        )
                  PushLayout
                    (
                         Typeable.ty
                        (
                            t
                        )
                         layout
                        (
                            env
                            env'
                        )
                         DeBruijn.ix
                        (
                            env
                            t
                        )
                    )
                         layout
                        (
                            env
                            tuple
                            (
                                env'
                                t
                            )
                        )
                )
                    )
      let
      (
        size
          poly
           'env 'env'
            arrow
               layout
              (
                  env
                  env'
              )
               int
              (
              )
          env
          env'
          (
          (
            case
            (
              EmptyLayout
                            0
            )
            case
            (
              PushLayout
                (
                  _
                  lyt
                  _
                )
              +
              (
                  size
                  (
                      lyt
                  )
                  1
              )
            )
          )
          :
              arrow
                 layout
                (
                     env
                    (
                    )
                     env'
                    (
                    )
                )
                 int
                (
                )
                    )
      )
      let
      (
        inc
          poly
           'env 'env'
            arrow
               layout
              (
                  env
                  env'
              )
               layout
              (
                  tuple
                  (
                      env
                      t
                  )
                  env'
              )
          env
          env'
          (
          (
            case
            (
              EmptyLayout
                            EmptyLayout
                          )
            case
            (
              PushLayout
                (
                  t
                  lyt
                  ix
                )
              PushLayout
                (
                  t
                  inc
                  (
                      lyt
                  )
                  DeBruijn.SuccIx
                    ix
                )
            )
          )
          :
              arrow
                 layout
                (
                     env
                    (
                    )
                     env'
                    (
                    )
                )
                 layout
                (
                    tuple
                    (
                         env
                        (
                        )
                        t
                    )
                     env'
                    (
                    )
                )
                    )
      )
      let
      (
        prj
          poly
           'env 'env' 't
            arrow
               Typeable.ty
              (
                  t
              )
              arrow
                 int
                (
                )
                arrow
                   layout
                  (
                      env
                      env'
                  )
                   DeBruijn.ix
                  (
                      env
                      t
                  )
          env
          env'
          t
          (
          (
            case
            (
              t
              (
                case
                (
                  n
                  (
                    case
                    (
                      EmptyLayout
                                            failwith
                      (
                          "Convert.prj: internal error"
                      )
                    )
                    case
                    (
                      PushLayout
                        (
                          t'
                          l
                          ix
                        )
                      ifthenelse
                      (
                        if
                        (
                          =
                          (
                              n
                              0
                          )
                        )
                        then
                        (
                          match
                          Typeable.check_eq
                          (
                              t
                              t'
                          )
                          (
                            case
                            (
                              Typeable.Eq
                                                            ix
                            )
                          )
                        )
                        else
                        (
                            prj
                            (
                                t
                                -
                                (
                                    n
                                    1
                                )
                                l
                            )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
          :
              arrow
                 Typeable.ty
                (
                     t
                    (
                    )
                )
                arrow
                   int
                  (
                  )
                  arrow
                     layout
                    (
                         env
                        (
                        )
                         env'
                        (
                        )
                    )
                     DeBruijn.ix
                    (
                         env
                        (
                        )
                         t
                        (
                        )
                    )
                    )
      )
      let
      (
        cvt
          poly
           'env 't
            arrow
               layout
              (
                  env
                  env
              )
              arrow
                 HOAS.term
                (
                    t
                )
                 DeBruijn.term
                (
                    env
                    t
                )
          env
          t
          (
          (
            case
            (
              lyt
              (
                case
                (
                  HOAS.Tag
                    (
                      t
                      sz
                    )
                  DeBruijn.Var
                    prj
                    (
                        t
                        -
                        (
                            -
                            (
                                size
                                (
                                    lyt
                                )
                                sz
                            )
                            1
                        )
                        lyt
                    )
                )
                case
                (
                  HOAS.Con
                    v
                  DeBruijn.Con
                    v
                )
                case
                (
                  HOAS.Lam
                    (
                      t
                      f
                    )
                  let
                  (
                    (
                      lyt'
                        PushLayout
                          (
                            t
                            inc
                            (
                                lyt
                            )
                            DeBruijn.ZeroIx
                                                      )
                    )
                  in
                    DeBruijn.Lam
                      cvt
                      (
                          lyt'
                          f
                          (
                              HOAS.Tag
                                (
                                  t
                                  size
                                  (
                                      lyt
                                  )
                                )
                          )
                      )
                  )
                )
                case
                (
                  HOAS.App
                    (
                      f
                      a
                    )
                  DeBruijn.App
                    (
                      cvt
                      (
                          lyt
                          f
                      )
                      cvt
                      (
                          lyt
                          a
                      )
                    )
                )
              )
            )
          )
          :
              arrow
                 layout
                (
                     env
                    (
                    )
                     env
                    (
                    )
                )
                arrow
                   HOAS.term
                  (
                       t
                      (
                      )
                  )
                   DeBruijn.term
                  (
                       env
                      (
                      )
                       t
                      (
                      )
                  )
                    )
      )
      let
      (
        convert
          (
            case
            (
              t
              cvt
              (
                  EmptyLayout
                  t
              )
            )
          )
      )
    )
  module Main
    struct
    (
      open HOAS
      let
      (
        i
          (
            case
            (
              t
              Lam
                (
                  t
                  (
                    case
                    (
                      x
                      x
                    )
                  )
                )
            )
          )
      )
      let
      (
        zero
          (
            case
            (
              t
              Lam
                (
                  Typeable.Fun
                    (
                      t
                      t
                    )
                  (
                    case
                    (
                      f
                      Lam
                        (
                          t
                          (
                            case
                            (
                              x
                              x
                            )
                          )
                        )
                    )
                  )
                )
            )
          )
      )
      let
      (
        one
          (
            case
            (
              t
              Lam
                (
                  Typeable.Fun
                    (
                      t
                      t
                    )
                  (
                    case
                    (
                      f
                      Lam
                        (
                          t
                          (
                            case
                            (
                              x
                              App
                                (
                                  f
                                  x
                                )
                            )
                          )
                        )
                    )
                  )
                )
            )
          )
      )
      let
      (
        two
          (
            case
            (
              t
              Lam
                (
                  Typeable.Fun
                    (
                      t
                      t
                    )
                  (
                    case
                    (
                      f
                      Lam
                        (
                          t
                          (
                            case
                            (
                              x
                              App
                                (
                                  f
                                  App
                                    (
                                      f
                                      x
                                    )
                                )
                            )
                          )
                        )
                    )
                  )
                )
            )
          )
      )
      let
      (
        three
          (
            case
            (
              t
              Lam
                (
                  Typeable.Fun
                    (
                      t
                      t
                    )
                  (
                    case
                    (
                      f
                      Lam
                        (
                          t
                          (
                            case
                            (
                              x
                              App
                                (
                                  f
                                  App
                                    (
                                      f
                                      App
                                        (
                                          f
                                          x
                                        )
                                    )
                                )
                            )
                          )
                        )
                    )
                  )
                )
            )
          )
      )
      let
      (
        plus
          (
            case
            (
              t
              let
              (
                (
                  t1
                    Typeable.Fun
                      (
                        t
                        t
                      )
                )
              in
                let
                (
                  (
                    t2
                      Typeable.Fun
                        (
                          t1
                          t1
                        )
                  )
                in
                  Lam
                    (
                      t2
                      (
                        case
                        (
                          m
                          Lam
                            (
                              t2
                              (
                                case
                                (
                                  n
                                  Lam
                                    (
                                      t1
                                      (
                                        case
                                        (
                                          f
                                          Lam
                                            (
                                              t
                                              (
                                                case
                                                (
                                                  x
                                                  App
                                                    (
                                                      App
                                                        (
                                                          m
                                                          f
                                                        )
                                                      App
                                                        (
                                                          App
                                                            (
                                                              n
                                                              f
                                                            )
                                                          x
                                                        )
                                                    )
                                                )
                                              )
                                            )
                                        )
                                      )
                                    )
                                )
                              )
                            )
                        )
                      )
                    )
                )
              )
            )
          )
      )
      let
      (
        plus_2_3
          (
            case
            (
              t
              App
                (
                  App
                    (
                      plus
                      (
                          t
                      )
                      two
                      (
                          t
                      )
                    )
                  three
                  (
                      t
                  )
                )
            )
          )
      )
      open Convert
      let
      (
        i'
          convert
          (
              i
              (
                  Typeable.Int
                                )
          )
      )
      let
      (
        plus_2_3'
          convert
          (
              plus_2_3
              (
                  Typeable.Int
                                )
          )
      )
      let
      (
        eval_plus_2_3'
          DeBruijn.intp
          (
              plus_2_3'
              DeBruijn.Empty
              succ
              0
          )
      )
    )
)
