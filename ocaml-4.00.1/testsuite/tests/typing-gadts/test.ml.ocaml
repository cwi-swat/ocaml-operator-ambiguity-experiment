(
  module Exp
    struct
    (
      type
      (
        t
          type
            params =
              (
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  IntLit
                    (
                         int
                        (
                        )
                    )
                         t
                        (
                             int
                            (
                            )
                        )
                  BoolLit
                    (
                         bool
                        (
                        )
                    )
                         t
                        (
                             bool
                            (
                            )
                        )
                  Pair
                    (
                         t
                        (
                            a
                        )
                         t
                        (
                            b
                        )
                    )
                         t
                        (
                            tuple
                            (
                                a
                                b
                            )
                        )
                  App
                    (
                         t
                        (
                            arrow
                            
                              a
                              b
                        )
                         t
                        (
                            a
                        )
                    )
                         t
                        (
                            b
                        )
                  Abs
                    (
                        arrow
                        
                          a
                          b
                    )
                         t
                        (
                            arrow
                            
                              a
                              b
                        )
                )
                    )
      let
      (
        eval
          poly
           's
            arrow
            
               t
              (
                  s
              )
              s
          s
          (
          (
            case
            (
              IntLit
                x
              x
            )
            case
            (
              BoolLit
                y
              y
            )
            case
            (
              Pair
                (
                  x
                  y
                )
              (
                eval
                (
                  
                    x
                )
                eval
                (
                  
                    y
                )
              )
            )
            case
            (
              App
                (
                  f
                  a
                )
              eval
              (
                
                  f
              )
              (
                
                  eval
                  (
                    
                      a
                  )
              )
            )
            case
            (
              Abs
                f
              f
            )
          )
          :
              arrow
              
                 t
                (
                     s
                    (
                    )
                )
                 s
                (
                )
                    )
      )
      let
      (
        discern
          poly
           'a
            arrow
            
               t
              (
                  a
              )
              
          a
          (
          (
            case
            (
              IntLit
                _
              1
            )
            case
            (
              BoolLit
                _
              2
            )
            case
            (
              Pair
                _
              3
            )
            case
            (
              App
                _
              4
            )
            case
            (
              Abs
                _
              5
            )
          )
          :
              arrow
              
                 t
                (
                     a
                    (
                    )
                )
                
                    )
      )
    )
  module List
    struct
    (
      type
      (
        zero
          type
            params =
              (
              )
            cstrs =
              (
              )
            kind =
              
                    )
      type
      (
        t
          type
            params =
              (
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  Nil
                    (
                    )
                         t
                        (
                             zero
                            (
                            )
                        )
                  Cons
                    (
                        a
                         t
                        (
                            b
                        )
                    )
                         t
                        (
                            tuple
                            (
                                a
                                b
                            )
                        )
                )
                    )
      let
      (
        head
          (
            case
            (
              Cons
                (
                  a
                  b
                )
              a
            )
          )
      )
      let
      (
        tail
          (
            case
            (
              Cons
                (
                  a
                  b
                )
              b
            )
          )
      )
      let
      (
        length
          poly
           'a
            arrow
            
               t
              (
                  a
              )
               int
              (
              )
          a
          (
          (
            case
            (
              Nil
                            0
            )
            case
            (
              Cons
                (
                  a
                  b
                )
              length
              (
                
                  b
              )
            )
          )
          :
              arrow
              
                 t
                (
                     a
                    (
                    )
                )
                 int
                (
                )
                    )
      )
    )
  module Nonexhaustive
    struct
    (
      type
      (
        u
          type
            params =
              (
                a
              )
            cstrs =
              (
              )
            kind =
                (
                  C1
                    (
                         int
                        (
                        )
                    )
                         u
                        (
                             int
                            (
                            )
                        )
                  C2
                    (
                         bool
                        (
                        )
                    )
                         u
                        (
                             bool
                            (
                            )
                        )
                )
                    )
      type
      (
        v
          type
            params =
              (
                a
              )
            cstrs =
              (
              )
            kind =
                (
                  C1
                    (
                         int
                        (
                        )
                    )
                         v
                        (
                             int
                            (
                            )
                        )
                )
                    )
      let
      (
        unexhaustive
          poly
           's
            arrow
            
               u
              (
                  s
              )
              s
          s
          (
          (
            case
            (
              C2
                x
              x
            )
          )
          :
              arrow
              
                 u
                (
                     s
                    (
                    )
                )
                 s
                (
                )
                    )
      )
      module M
          struct
          (
            type
            (
              t
                type
                  params =
                    (
                    )
                  cstrs =
                    (
                    )
                  kind =
                    
                         int
                        (
                        )
            )
            type
            (
              u
                type
                  params =
                    (
                    )
                  cstrs =
                    (
                    )
                  kind =
                    
                         bool
                        (
                        )
            )
          )
          signature
          (
              type
              (
                t
                  type
                    params =
                      (
                      )
                    cstrs =
                      (
                      )
                    kind =
                      
                                    )
              type
              (
                u
                  type
                    params =
                      (
                      )
                    cstrs =
                      (
                      )
                    kind =
                      
                                    )
          )
      type
      (
        t
          type
            params =
              (
                a
              )
            cstrs =
              (
              )
            kind =
                (
                  Foo
                    (
                         M.t
                        (
                        )
                    )
                         t
                        (
                             M.t
                            (
                            )
                        )
                  Bar
                    (
                         M.u
                        (
                        )
                    )
                         t
                        (
                             M.u
                            (
                            )
                        )
                )
                    )
      let
      (
        same_type
          poly
           's
            arrow
            
              tuple
              (
                   t
                  (
                      s
                  )
                   t
                  (
                      s
                  )
              )
               bool
              (
              )
          s
          (
          (
            case
            (
              (
                Foo
                  _
                Foo
                  _
              )
              true
                          )
            case
            (
              (
                Bar
                  _
                Bar
                  _
              )
              true
                          )
          )
          :
              arrow
              
                tuple
                (
                     t
                    (
                         s
                        (
                        )
                    )
                     t
                    (
                         s
                        (
                        )
                    )
                )
                 bool
                (
                )
                    )
      )
    )
  module Exhaustive
    struct
    (
      type
      (
        t
          type
            params =
              (
              )
            cstrs =
              (
              )
            kind =
              
                   int
                  (
                  )
      )
      type
      (
        u
          type
            params =
              (
              )
            cstrs =
              (
              )
            kind =
              
                   bool
                  (
                  )
      )
      type
      (
        v
          type
            params =
              (
                a
              )
            cstrs =
              (
              )
            kind =
                (
                  Foo
                    (
                         t
                        (
                        )
                    )
                         v
                        (
                             t
                            (
                            )
                        )
                  Bar
                    (
                         u
                        (
                        )
                    )
                         v
                        (
                             u
                            (
                            )
                        )
                )
                    )
      let
      (
        same_type
          poly
           's
            arrow
            
              tuple
              (
                   v
                  (
                      s
                  )
                   v
                  (
                      s
                  )
              )
               bool
              (
              )
          s
          (
          (
            case
            (
              (
                Foo
                  _
                Foo
                  _
              )
              true
                          )
            case
            (
              (
                Bar
                  _
                Bar
                  _
              )
              true
                          )
          )
          :
              arrow
              
                tuple
                (
                     v
                    (
                         s
                        (
                        )
                    )
                     v
                    (
                         s
                        (
                        )
                    )
                )
                 bool
                (
                )
                    )
      )
    )
  module Existential_escape
    struct
    (
      type
      (
        t
          type
            params =
              (
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  C
                    (
                         int
                        (
                        )
                    )
                         t
                        (
                             int
                            (
                            )
                        )
                )
                    )
      type
      (
        u
          type
            params =
              (
              )
            cstrs =
              (
              )
            kind =
                (
                  D
                    (
                         t
                        (
                            a
                        )
                    )
                         u
                        (
                        )
                )
                    )
      let
      (
        eval
          (
            case
            (
              D
                x
              x
            )
          )
      )
    )
  module Rectype
    struct
    (
      type
      (
        t
          type
            params =
              (
                "_"
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  C
                    (
                    )
                         t
                        (
                            a
                            a
                        )
                )
                    )
      s
      let
      (
        (
          a
            (
            failwith
            (
              
                "foo"
            )
            :
                 t
                (
                     s
                    (
                    )
                    tuple
                    (
                         s
                        (
                        )
                         s
                        (
                        )
                    )
                )
                        )
        )
      in
        match
        a
        (
          case
          (
            C
                        ()
                      )
        )
      )
    )
  module Or_patterns
    struct
    (
      type
      (
        t
          type
            params =
              (
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  IntLit
                    (
                         int
                        (
                        )
                    )
                         t
                        (
                             int
                            (
                            )
                        )
                  BoolLit
                    (
                         bool
                        (
                        )
                    )
                         t
                        (
                             bool
                            (
                            )
                        )
                )
                    )
      let
      (
        eval
          poly
           's
            arrow
            
               t
              (
                  s
              )
               unit
              (
              )
          s
          (
          (
            case
            (
              pat_or
              (
              IntLit
                _
              BoolLit
                _
              )
              ()
                          )
          )
          :
              arrow
              
                 t
                (
                     s
                    (
                    )
                )
                 unit
                (
                )
                    )
      )
    )
  module Polymorphic_variants
    struct
    (
      type
      (
        t
          type
            params =
              (
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  IntLit
                    (
                         int
                        (
                        )
                    )
                         t
                        (
                             int
                            (
                            )
                        )
                  BoolLit
                    (
                         bool
                        (
                        )
                    )
                         t
                        (
                             bool
                            (
                            )
                        )
                )
                    )
      let
      (
        eval
          poly
           's
            arrow
            
              tuple
              (
                  (
                    A
                      (
                      )
                  )
                                     t
                  (
                      s
                  )
              )
               unit
              (
              )
          s
          (
          (
            case
            (
              (
                A
                                IntLit
                  _
              )
              ()
                          )
            case
            (
              (
                A
                                BoolLit
                  _
              )
              ()
                          )
          )
          :
              arrow
              
                tuple
                (
                    (
                      A
                        (
                        )
                    )
                                         t
                    (
                         s
                        (
                        )
                    )
                )
                 unit
                (
                )
                    )
      )
    )
  module Propagation
    struct
    (
      type
      (
        t
          type
            params =
              (
                "_"
              )
            cstrs =
              (
              )
            kind =
                (
                  IntLit
                    (
                         int
                        (
                        )
                    )
                         t
                        (
                             int
                            (
                            )
                        )
                  BoolLit
                    (
                         bool
                        (
                        )
                    )
                         t
                        (
                             bool
                            (
                            )
                        )
                )
                    )
      let
      (
        check
          poly
           's
            arrow
            
               t
              (
                  s
              )
              s
          s
          (
          (
            case
            (
              IntLit
                n
              n
            )
            case
            (
              BoolLit
                b
              b
            )
          )
          :
              arrow
              
                 t
                (
                     s
                    (
                    )
                )
                 s
                (
                )
                    )
      )
      let
      (
        check
          poly
           's
            arrow
            
               t
              (
                  s
              )
              s
          s
          (
          (
            case
            (
              x
              let
              (
                (
                  r
                    match
                    x
                    (
                      case
                      (
                        IntLit
                          n
                        (
                        n
                        :
                             s
                            (
                            )
                                                )
                      )
                      case
                      (
                        BoolLit
                          b
                        b
                      )
                    )
                )
              in
                r
              )
            )
          )
          :
              arrow
              
                 t
                (
                     s
                    (
                    )
                )
                 s
                (
                )
                    )
      )
    )
  module Normal_constrs
    struct
    (
      type
      (
        a
          type
            params =
              (
              )
            cstrs =
              (
              )
            kind =
                (
                  A
                    (
                    )
                                    )
                    )
      type
      (
        b
          type
            params =
              (
              )
            cstrs =
              (
              )
            kind =
                (
                  B
                    (
                    )
                                    )
                    )
      let
      (
        f
          (
            case
            (
              A
                            1
            )
            case
            (
              B
                            2
            )
          )
      )
    )
  type
  (
    t
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Int
                (
                )
                     t
                    (
                         int
                        (
                        )
                    )
            )
            )
  let
  (
    ky
      (
        case
        (
          x
          (
            case
            (
              y
              sequence
              (
                ignore
                (
                  
                    =
                    (
                      
                        x
                      
                        y
                    )
                )
              ;
                x
              )
            )
          )
        )
      )
  )
  let
  (
    test
      poly
       'a
        arrow
        
           t
          (
              a
          )
          a
      a
      (
      (
        case
        (
          Int
                    ky
          (
            
              (
              1
              :
                   a
                  (
                  )
                            )
            
              1
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  let
  (
    test
      poly
       'a
        arrow
        
           t
          (
              a
          )
          
      a
      (
      (
        case
        (
          Int
                    1
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
            
            )
  )
  let
  (
    test
      poly
       'a
        arrow
        
           t
          (
              a
          )
          
      a
      (
      (
        case
        (
          Int
                    ky
          (
            
              (
              1
              :
                   a
                  (
                  )
                            )
            
              1
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
            
            )
  )
  let
  (
    test
      poly
       'a
        arrow
        
           t
          (
              a
          )
          a
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                match
                x
                (
                  case
                  (
                    Int
                                        ky
                    (
                      
                        (
                        1
                        :
                             a
                            (
                            )
                                                )
                      
                        1
                    )
                  )
                )
            )
          in
            r
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  let
  (
    test
      poly
       'a
        arrow
        
           t
          (
              a
          )
          a
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                match
                x
                (
                  case
                  (
                    Int
                                        ky
                    (
                      
                        1
                      
                        (
                        1
                        :
                             a
                            (
                            )
                                                )
                    )
                  )
                )
            )
          in
            r
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  let
  (
    test
      a
      (
        case
        (
          x
          let
          (
            (
              r
                match
                (
                x
                :
                     t
                    (
                         a
                        (
                        )
                    )
                                )
                (
                  case
                  (
                    Int
                                        ky
                    (
                      
                        1
                      
                        1
                    )
                  )
                )
            )
          in
            r
          )
        )
      )
  )
  let
  (
    test
      poly
       'a
        arrow
        
           t
          (
              a
          )
          a
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                match
                x
                (
                  case
                  (
                    Int
                                        (
                    1
                    :
                         a
                        (
                        )
                                        )
                  )
                )
            )
          in
            r
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  let
  (
    test
      poly
       'a
        arrow
        
           t
          (
              a
          )
          
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                match
                x
                (
                  case
                  (
                    Int
                                        1
                  )
                )
            )
          in
            r
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
            
            )
  )
  let
  (
    test
      poly
       'a
        arrow
        
           t
          (
              a
          )
          a
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                (
                match
                x
                (
                  case
                  (
                    Int
                                        1
                  )
                )
                :
                     a
                    (
                    )
                                )
            )
          in
            r
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  let
  (
    test2
      poly
       'a
        arrow
        
           t
          (
              a
          )
           option
          (
              a
          )
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                ref
                (
                  
                    None
                                    )
            )
          in
            sequence
            (
              match
              x
              (
                case
                (
                  Int
                                    :=
                  (
                    
                      r
                    
                      Some
                        (
                        1
                        :
                             a
                            (
                            )
                                                )
                  )
                )
              )
            ;
              !
              (
                
                  r
              )
            )
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             option
            (
                 a
                (
                )
            )
            )
  )
  let
  (
    test2
      poly
       'a
        arrow
        
           t
          (
              a
          )
           option
          (
              a
          )
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                (
                ref
                (
                  
                    None
                                    )
                :
                     ref
                    (
                         option
                        (
                             a
                            (
                            )
                        )
                    )
                                )
            )
          in
            sequence
            (
              match
              x
              (
                case
                (
                  Int
                                    :=
                  (
                    
                      r
                    
                      Some
                        1
                  )
                )
              )
            ;
              !
              (
                
                  r
              )
            )
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             option
            (
                 a
                (
                )
            )
            )
  )
  let
  (
    test2
      poly
       'a
        arrow
        
           t
          (
              a
          )
           option
          (
              a
          )
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                (
                ref
                (
                  
                    None
                                    )
                :
                     ref
                    (
                         option
                        (
                             a
                            (
                            )
                        )
                    )
                                )
            )
          in
            let
            (
              (
                u
                  ref
                  (
                    
                      None
                                        )
              )
            in
              sequence
              (
                match
                x
                (
                  case
                  (
                    Int
                                        sequence
                    (
                      :=
                      (
                        
                          r
                        
                          Some
                            1
                      )
                    ;
                      :=
                      (
                        
                          u
                        
                          !
                          (
                            
                              r
                          )
                      )
                    )
                  )
                )
              ;
                !
                (
                  
                    u
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             option
            (
                 a
                (
                )
            )
            )
  )
  let
  (
    test2
      poly
       'a
        arrow
        
           t
          (
              a
          )
           option
          (
              a
          )
      a
      (
      (
        case
        (
          x
          let
          (
            (
              r
                (
                ref
                (
                  
                    None
                                    )
                :
                     ref
                    (
                         option
                        (
                             a
                            (
                            )
                        )
                    )
                                )
            )
          in
            let
            (
              (
                u
                  ref
                  (
                    
                      None
                                        )
              )
            in
              sequence
              (
                match
                x
                (
                  case
                  (
                    Int
                                        sequence
                    (
                      :=
                      (
                        
                          u
                        
                          Some
                            1
                      )
                    ;
                      :=
                      (
                        
                          r
                        
                          !
                          (
                            
                              u
                          )
                      )
                    )
                  )
                )
              ;
                !
                (
                  
                    u
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             option
            (
                 a
                (
                )
            )
            )
  )
  let
  (
    test2
      poly
       'a
        arrow
        
           t
          (
              a
          )
           option
          (
              a
          )
      a
      (
      (
        case
        (
          x
          let
          (
            (
              u
                ref
                (
                  
                    None
                                    )
            )
          in
            let
            (
              (
                r
                  (
                  ref
                  (
                    
                      None
                                        )
                  :
                       ref
                      (
                           option
                          (
                               a
                              (
                              )
                          )
                      )
                                    )
              )
            in
              sequence
              (
                match
                x
                (
                  case
                  (
                    Int
                                        sequence
                    (
                      :=
                      (
                        
                          r
                        
                          Some
                            1
                      )
                    ;
                      :=
                      (
                        
                          u
                        
                          !
                          (
                            
                              r
                          )
                      )
                    )
                  )
                )
              ;
                !
                (
                  
                    u
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             option
            (
                 a
                (
                )
            )
            )
  )
  let
  (
    test2
      poly
       'a
        arrow
        
           t
          (
              a
          )
           option
          (
              a
          )
      a
      (
      (
        case
        (
          x
          let
          (
            (
              u
                ref
                (
                  
                    None
                                    )
            )
          in
            let
            (
              (
                a
                  let
                  (
                    (
                      r
                        (
                        ref
                        (
                          
                            None
                                                    )
                        :
                             ref
                            (
                                 option
                                (
                                     a
                                    (
                                    )
                                )
                            )
                                                )
                    )
                  in
                    sequence
                    (
                      match
                      x
                      (
                        case
                        (
                          Int
                                                    sequence
                          (
                            :=
                            (
                              
                                r
                              
                                Some
                                  1
                            )
                          ;
                            :=
                            (
                              
                                u
                              
                                !
                                (
                                  
                                    r
                                )
                            )
                          )
                        )
                      )
                    ;
                      !
                      (
                        
                          u
                      )
                    )
                  )
              )
            in
              a
            )
          )
        )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             option
            (
                 a
                (
                )
            )
            )
  )
  let
  (
    either
      ky
  )
  let
  (
    we_y1x
      a
      (
        case
        (
          x
             a
            (
            )
          (
            case
            (
              v
                 t
                (
                     a
                    (
                    )
                )
              match
              v
              (
                case
                (
                  Int
                                    let
                  (
                    (
                      y
                        either
                        (
                          
                            1
                          
                            x
                        )
                    )
                  in
                    y
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    f
      a
      (
        case
        (
          x
             t
            (
                 a
                (
                )
            )
          (
            case
            (
              y
              sequence
              (
                ignore
                (
                  
                    (
                    y
                    :
                         a
                        (
                        )
                                        )
                )
              ;
                let
                (
                  (
                    r
                      match
                      x
                      (
                        case
                        (
                          Int
                                                    (
                          y
                          :
                               a
                              (
                              )
                                                    )
                        )
                      )
                  )
                in
                  r
                )
              )
            )
          )
        )
      )
  )
  let
  (
    f
      a
      (
        case
        (
          x
             t
            (
                 a
                (
                )
            )
          (
            case
            (
              y
              let
              (
                (
                  r
                    match
                    x
                    (
                      case
                      (
                        Int
                                                (
                        y
                        :
                             a
                            (
                            )
                                                )
                      )
                    )
                )
              in
                sequence
                (
                  ignore
                  (
                    
                      (
                      y
                      :
                           a
                          (
                          )
                                            )
                  )
                ;
                  r
                )
              )
            )
          )
        )
      )
  )
  let
  (
    f
      a
      (
        case
        (
          x
             t
            (
                 a
                (
                )
            )
          (
            case
            (
              y
              sequence
              (
                ignore
                (
                  
                    (
                    y
                    :
                         a
                        (
                        )
                                        )
                )
              ;
                let
                (
                  (
                    r
                      match
                      x
                      (
                        case
                        (
                          Int
                                                    y
                        )
                      )
                  )
                in
                  r
                )
              )
            )
          )
        )
      )
  )
  let
  (
    f
      a
      (
        case
        (
          x
             t
            (
                 a
                (
                )
            )
          (
            case
            (
              y
              let
              (
                (
                  r
                    match
                    x
                    (
                      case
                      (
                        Int
                                                y
                      )
                    )
                )
              in
                sequence
                (
                  ignore
                  (
                    
                      (
                      y
                      :
                           a
                          (
                          )
                                            )
                  )
                ;
                  r
                )
              )
            )
          )
        )
      )
  )
  let
  (
    f
      a
      (
        case
        (
          x
             t
            (
                 a
                (
                )
            )
          (
            case
            (
              y
                 a
                (
                )
              match
              x
              (
                case
                (
                  Int
                                    y
                )
              )
            )
          )
        )
      )
  )
  let
  (
    f
      a
      (
        case
        (
          x
             t
            (
                 a
                (
                )
            )
          (
            case
            (
              y
              match
              x
              (
                case
                (
                  Int
                                    let module M
                  (
                    struct
                    (
                      type
                      (
                        b
                          type
                            params =
                              (
                              )
                            cstrs =
                              (
                              )
                            kind =
                              
                                   a
                                  (
                                  )
                      )
                      let
                      (
                        z
                          (
                          y
                          :
                               b
                              (
                              )
                                                    )
                      )
                    )
                  )
                  in
                  (
                  M.z
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    f
      a
      (
        case
        (
          x
             t
            (
                 a
                (
                )
            )
          (
            case
            (
              y
              match
              x
              (
                case
                (
                  Int
                                    let module M
                  (
                    struct
                    (
                      type
                      (
                        b
                          type
                            params =
                              (
                              )
                            cstrs =
                              (
                              )
                            kind =
                              
                                   int
                                  (
                                  )
                      )
                      let
                      (
                        z
                          (
                          y
                          :
                               b
                              (
                              )
                                                    )
                      )
                    )
                  )
                  in
                  (
                  M.z
                  )
                )
              )
            )
          )
        )
      )
  )
  type
  (
    h
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Has_m
                (
                )
                     h
                    (
                        (
                            m
                              poly
                              
                                 int
                                (
                                )
                        )
                    )
              Has_b
                (
                )
                     h
                    (
                        (
                            b
                              poly
                              
                                 bool
                                (
                                )
                        )
                    )
            )
            )
  let
  (
    f
      poly
       'a
        arrow
        
           h
          (
              a
          )
          a
      a
      (
      (
        case
        (
          Has_m
                    Pexp_object          class_structure
            (
              method m
                1
                            )
        )
        case
        (
          Has_b
                    Pexp_object          class_structure
            (
              method b
                true
                                            )
        )
      )
      :
          arrow
          
             h
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  type
  (
    j
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Has_A
                (
                )
                     j
                    (
                        (
                          A
                            (
                                 int
                                (
                                )
                            )
                        )
                                            )
              Has_B
                (
                )
                     j
                    (
                        (
                          B
                            (
                                 bool
                                (
                                )
                            )
                        )
                                            )
            )
            )
  let
  (
    f
      poly
       'a
        arrow
        
           j
          (
              a
          )
          a
      a
      (
      (
        case
        (
          Has_A
                    A
            1
        )
        case
        (
          Has_B
                    B
            true
                    )
      )
      :
          arrow
          
             j
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  type
  (
    eq
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Eq
                (
                )
                     eq
                    (
                        a
                        a
                    )
            )
            )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            Ptyp_alias "c"
              (
                  m
                    poly
                    
                      a
                  
              )
            Ptyp_alias "c"
              (
                  m
                    poly
                    
                      b
                  
              )
      a
      b
      (
      (
        case
        (
          Eq
                    (
            case
            (
              o
              o
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              Ptyp_alias "c"
                (
                    m
                      poly
                      
                         a
                        (
                        )
                    
                )
              Ptyp_alias "c"
                (
                    m
                      poly
                      
                         b
                        (
                        )
                    
                )
            )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
                m
                  poly
                  
                    a
                
            )
            (
                m
                  poly
                  
                    b
                
            )
      a
      b
      (
      (
        case
        (
          Eq
                    (
            case
            (
              o
              o
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                  m
                    poly
                    
                       a
                      (
                      )
                  
              )
              (
                  m
                    poly
                    
                       b
                      (
                      )
                  
              )
            )
  )
  let
  (
    f
      a
      b
      (
        case
        (
          eq
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
          (
            case
            (
              o
                (
                    m
                      poly
                      
                         a
                        (
                        )
                    
                )
              (
              match
              eq
              (
                case
                (
                  Eq
                                    o
                )
              )
              :
                  (
                      m
                        poly
                        
                           b
                          (
                          )
                      
                  )
                            )
            )
          )
        )
      )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
                m
                  poly
                  
                    a
            )
            (
                m
                  poly
                  
                    b
            )
      a
      b
      (
      (
        case
        (
          Eq
                    (
            case
            (
              o
              o
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                  m
                    poly
                    
                       a
                      (
                      )
              )
              (
                  m
                    poly
                    
                       b
                      (
                      )
              )
            )
  )
  let
  (
    int_of_bool
      (
      Obj.magic
      (
        
          Eq
                )
      :
           eq
          (
               bool
              (
              )
               int
              (
              )
          )
            )
  )
  let
  (
    x
      Pexp_object      class_structure
        (
          method m
            true
                                )
  )
  let
  (
    y
      (
        x
        f
        (
          
            int_of_bool
          
            x
        )
      )
  )
  let
  (
    f
      poly
       'a
        arrow
        
           eq
          (
              a
               int
              (
              )
          )
          arrow
          
            (
                m
                  poly
                  
                    a
            )
             bool
            (
            )
      a
      (
      (
        case
        (
          Eq
                    (
            case
            (
              o
              sequence
              (
                ignore
                (
                  
                    (
                    o
                    :
                        (
                            m
                              poly
                              
                                 int
                                (
                                )
                            
                        )
                                        )
                )
              ;
                =
                (
                  
                    send m
                    (
                      o
                    )
                  
                    3
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 int
                (
                )
            )
            arrow
            
              (
                  m
                    poly
                    
                       a
                      (
                      )
              )
               bool
              (
              )
            )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
                m
                  poly
                  
                    a
                
            )
            (
                m
                  poly
                  
                    b
            )
      a
      b
      (
      (
        case
        (
          eq
          (
            case
            (
              o
              sequence
              (
                ignore
                (
                  
                    (
                    o
                    :
                        (
                            m
                              poly
                              
                                 a
                                (
                                )
                        )
                                        )
                )
              ;
                let
                (
                  (
                    r
                      (
                      match
                      eq
                      (
                        case
                        (
                          Eq
                                                    o
                        )
                      )
                      :
                          (
                              m
                                poly
                                
                                   b
                                  (
                                  )
                          )
                                            )
                  )
                in
                  r
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                  m
                    poly
                    
                       a
                      (
                      )
                  
              )
              (
                  m
                    poly
                    
                       b
                      (
                      )
              )
            )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
                m
                  poly
                  
                    a
                
            )
            (
                m
                  poly
                  
                    b
            )
      a
      b
      (
      (
        case
        (
          eq
          (
            case
            (
              o
              let
              (
                (
                  r
                    (
                    match
                    eq
                    (
                      case
                      (
                        Eq
                                                o
                      )
                    )
                    :
                        (
                            m
                              poly
                              
                                 b
                                (
                                )
                        )
                                        )
                )
              in
                sequence
                (
                  ignore
                  (
                    
                      (
                      o
                      :
                          (
                              m
                                poly
                                
                                   a
                                  (
                                  )
                          )
                                            )
                  )
                ;
                  r
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                  m
                    poly
                    
                       a
                      (
                      )
                  
              )
              (
                  m
                    poly
                    
                       b
                      (
                      )
              )
            )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
              A
                (
                    a
                )
            )
                        (
              A
                (
                    b
                )
            )
                  a
      b
      (
      (
        case
        (
          Eq
                    (
            case
            (
              o
              o
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                A
                  (
                       a
                      (
                      )
                  )
              )
                            (
                A
                  (
                       b
                      (
                      )
                  )
              )
                          )
  )
  let
  (
    f
      a
      b
      (
        case
        (
          eq
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
          (
            case
            (
              v
                (
                  A
                    (
                         a
                        (
                        )
                    )
                )
                              (
              match
              eq
              (
                case
                (
                  Eq
                                    v
                )
              )
              :
                  (
                    A
                      (
                           b
                          (
                          )
                      )
                  )
                                              )
            )
          )
        )
      )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
              A
                (
                    a
                )
              B
                (
                )
            )
              (
              )
            (
              A
                (
                    b
                )
              B
                (
                )
            )
              (
              )
      a
      b
      (
      (
        case
        (
          Eq
                    (
            case
            (
              o
              o
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                A
                  (
                       a
                      (
                      )
                  )
                B
                  (
                  )
              )
                (
                )
              (
                A
                  (
                       b
                      (
                      )
                  )
                B
                  (
                  )
              )
                (
                )
            )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
              A
                (
                    a
                )
              B
                (
                )
            )
                        (
              A
                (
                    b
                )
              B
                (
                )
            )
                  a
      b
      (
      (
        case
        (
          Eq
                    (
            case
            (
              o
              o
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                A
                  (
                       a
                      (
                      )
                  )
                B
                  (
                  )
              )
                            (
                A
                  (
                       b
                      (
                      )
                  )
                B
                  (
                  )
              )
                          )
  )
  let
  (
    f
      poly
       'a
        arrow
        
           eq
          (
              a
               int
              (
              )
          )
          arrow
          
            (
              A
                (
                    a
                )
            )
                         bool
            (
            )
      a
      (
      (
        case
        (
          Eq
                    (
            case
            (
              v
              match
              v
              (
                case
                (
                  A
                    1
                  true
                                  )
                case
                (
                  _
                  false
                                  )
              )
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 int
                (
                )
            )
            arrow
            
              (
                A
                  (
                       a
                      (
                      )
                  )
              )
                             bool
              (
              )
            )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
              A
                (
                    a
                )
              B
                (
                )
            )
                        (
              A
                (
                    b
                )
              B
                (
                )
            )
                  a
      b
      (
      (
        case
        (
          eq
          (
            case
            (
              o
              sequence
              (
                ignore
                (
                  
                    (
                    o
                    :
                        (
                          A
                            (
                                 a
                                (
                                )
                            )
                          B
                            (
                            )
                        )
                          (
                          )
                                        )
                )
              ;
                let
                (
                  (
                    r
                      (
                      match
                      eq
                      (
                        case
                        (
                          Eq
                                                    o
                        )
                      )
                      :
                          (
                            A
                              (
                                   b
                                  (
                                  )
                              )
                            B
                              (
                              )
                          )
                                                                      )
                  )
                in
                  r
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                A
                  (
                       a
                      (
                      )
                  )
                B
                  (
                  )
              )
                            (
                A
                  (
                       b
                      (
                      )
                  )
                B
                  (
                  )
              )
                          )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              a
              b
          )
          arrow
          
            (
              A
                (
                    a
                )
              B
                (
                )
            )
                        (
              A
                (
                    b
                )
              B
                (
                )
            )
                  a
      b
      (
      (
        case
        (
          eq
          (
            case
            (
              o
              let
              (
                (
                  r
                    (
                    match
                    eq
                    (
                      case
                      (
                        Eq
                                                o
                      )
                    )
                    :
                        (
                          A
                            (
                                 b
                                (
                                )
                            )
                          B
                            (
                            )
                        )
                                                                )
                )
              in
                sequence
                (
                  ignore
                  (
                    
                      (
                      o
                      :
                          (
                            A
                              (
                                   a
                                  (
                                  )
                              )
                            B
                              (
                              )
                          )
                            (
                            )
                                            )
                  )
                ;
                  r
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
              (
                A
                  (
                       a
                      (
                      )
                  )
                B
                  (
                  )
              )
                            (
                A
                  (
                       b
                      (
                      )
                  )
                B
                  (
                  )
              )
                          )
  )
  type
  (
    t
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              A
                (
                     int
                    (
                    )
                )
                              B
                (
                     bool
                    (
                    )
                )
                              C
                (
                     float
                    (
                    )
                )
                              D
                (
                    a
                )
                            )
            )
  type
  (
    ty
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              TE
                (
                     ty
                    (
                        a
                    )
                )
                     ty
                    (
                         array
                        (
                            a
                        )
                    )
              TA
                (
                )
                     ty
                    (
                         int
                        (
                        )
                    )
              TB
                (
                )
                     ty
                    (
                         bool
                        (
                        )
                    )
              TC
                (
                )
                     ty
                    (
                         float
                        (
                        )
                    )
              TD
                (
                     string
                    (
                    )
                )
                     ty
                    (
                         bool
                        (
                        )
                    )
            )
            )
  let
  (
    f
      poly
       'a
        arrow
        
           ty
          (
              a
          )
          arrow
          
             t
            (
                a
            )
             int
            (
            )
      a
      (
      (
        case
        (
          x
          (
            case
            (
              y
              match
              (
                x
                y
              )
              (
                case
                (
                  (
                    _
                    A
                      z
                  )
                  z
                )
                case
                (
                  (
                    _
                    B
                      z
                  )
                  ifthenelse
                  (
                    if
                    (
                      z
                    )
                    then
                    (
                      1
                    )
                    else
                    (
                        2
                    )
                  )
                )
                case
                (
                  (
                    _
                    C
                      z
                  )
                  truncate
                  (
                    
                      z
                  )
                )
                case
                (
                  (
                    TE
                      TC
                                          D
                      array
                      (
                        1.0
                      )
                  )
                  14
                )
                case
                (
                  (
                    TA
                                        D
                      0
                  )
                  -1
                )
                case
                (
                  (
                    TA
                                        D
                      z
                  )
                  z
                )
                case
                (
                  (
                    TD
                      "bye"
                    D
                      false
                                        )
                  13
                )
                case
                (
                  (
                    TD
                      "hello"
                    D
                      true
                                        )
                  12
                )
                case
                (
                  (
                    TC
                                        D
                      z
                  )
                  truncate
                  (
                    
                      z
                  )
                )
                case
                (
                  (
                    _
                    D
                      _
                  )
                  0
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             ty
            (
                 a
                (
                )
            )
            arrow
            
               t
              (
                   a
                  (
                  )
              )
               int
              (
              )
            )
  )
  let
  (
    f
      poly
       'a
        arrow
        
           ty
          (
              a
          )
          arrow
          
             t
            (
                a
            )
             int
            (
            )
      a
      (
      (
        case
        (
          x
          (
            case
            (
              y
              match
              (
                x
                y
              )
              (
                case
                (
                  (
                    _
                    A
                      z
                  )
                  z
                )
                case
                (
                  (
                    _
                    B
                      z
                  )
                  ifthenelse
                  (
                    if
                    (
                      z
                    )
                    then
                    (
                      1
                    )
                    else
                    (
                        2
                    )
                  )
                )
                case
                (
                  (
                    _
                    C
                      z
                  )
                  truncate
                  (
                    
                      z
                  )
                )
                case
                (
                  (
                    TE
                      TC
                                          D
                      array
                      (
                        1.0
                      )
                  )
                  14
                )
                case
                (
                  (
                    TA
                                        D
                      0
                  )
                  -1
                )
                case
                (
                  (
                    TA
                                        D
                      z
                  )
                  z
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             ty
            (
                 a
                (
                )
            )
            arrow
            
               t
              (
                   a
                  (
                  )
              )
               int
              (
              )
            )
  )
  let
  (
    f
      poly
       'a
        arrow
        
           ty
          (
              a
          )
          arrow
          
             t
            (
                a
            )
             int
            (
            )
      a
      (
      (
        case
        (
          x
          (
            case
            (
              y
              match
              (
                y
                x
              )
              (
                case
                (
                  (
                    A
                      z
                    _
                  )
                  z
                )
                case
                (
                  (
                    B
                      z
                    _
                  )
                  ifthenelse
                  (
                    if
                    (
                      z
                    )
                    then
                    (
                      1
                    )
                    else
                    (
                        2
                    )
                  )
                )
                case
                (
                  (
                    C
                      z
                    _
                  )
                  truncate
                  (
                    
                      z
                  )
                )
                case
                (
                  (
                    D
                      array
                      (
                        1.0
                      )
                    TE
                      TC
                                        )
                  14
                )
                case
                (
                  (
                    D
                      0
                    TA
                                      )
                  -1
                )
                case
                (
                  (
                    D
                      z
                    TA
                                      )
                  z
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             ty
            (
                 a
                (
                )
            )
            arrow
            
               t
              (
                   a
                  (
                  )
              )
               int
              (
              )
            )
  )
  type
  (
    pair
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
          )
        kind =
            (
              right
                  poly
                  
                    a
              left
                  poly
                  
                    b
            )
            )
  let
  (
    f
      poly
       'a
        arrow
        
           ty
          (
              a
          )
          arrow
          
             t
            (
                a
            )
             int
            (
            )
      a
      (
      (
        case
        (
          x
          (
            case
            (
              y
              match
              record
              (
                left
                  x
                right
                  y
              )
                            (
                case
                (
                  Ppat_record
                  (
                    left
                      _
                    right
                      A
                        z
                  )
                  z
                )
                case
                (
                  Ppat_record
                  (
                    left
                      _
                    right
                      B
                        z
                  )
                  ifthenelse
                  (
                    if
                    (
                      z
                    )
                    then
                    (
                      1
                    )
                    else
                    (
                        2
                    )
                  )
                )
                case
                (
                  Ppat_record
                  (
                    left
                      _
                    right
                      C
                        z
                  )
                  truncate
                  (
                    
                      z
                  )
                )
                case
                (
                  Ppat_record
                  (
                    left
                      TE
                        TC
                                            right
                      D
                        array
                        (
                          1.0
                        )
                  )
                  14
                )
                case
                (
                  Ppat_record
                  (
                    left
                      TA
                                          right
                      D
                        0
                  )
                  -1
                )
                case
                (
                  Ppat_record
                  (
                    left
                      TA
                                          right
                      D
                        z
                  )
                  z
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             ty
            (
                 a
                (
                )
            )
            arrow
            
               t
              (
                   a
                  (
                  )
              )
               int
              (
              )
            )
  )
  type
  (
    pair
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
          )
        kind =
            (
              left
                  poly
                  
                    a
              right
                  poly
                  
                    b
            )
            )
  let
  (
    f
      poly
       'a
        arrow
        
           ty
          (
              a
          )
          arrow
          
             t
            (
                a
            )
             int
            (
            )
      a
      (
      (
        case
        (
          x
          (
            case
            (
              y
              match
              record
              (
                left
                  x
                right
                  y
              )
                            (
                case
                (
                  Ppat_record
                  (
                    left
                      _
                    right
                      A
                        z
                  )
                  z
                )
                case
                (
                  Ppat_record
                  (
                    left
                      _
                    right
                      B
                        z
                  )
                  ifthenelse
                  (
                    if
                    (
                      z
                    )
                    then
                    (
                      1
                    )
                    else
                    (
                        2
                    )
                  )
                )
                case
                (
                  Ppat_record
                  (
                    left
                      _
                    right
                      C
                        z
                  )
                  truncate
                  (
                    
                      z
                  )
                )
                case
                (
                  Ppat_record
                  (
                    left
                      TE
                        TC
                                            right
                      D
                        array
                        (
                          1.0
                        )
                  )
                  14
                )
                case
                (
                  Ppat_record
                  (
                    left
                      TA
                                          right
                      D
                        0
                  )
                  -1
                )
                case
                (
                  Ppat_record
                  (
                    left
                      TA
                                          right
                      D
                        z
                  )
                  z
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             ty
            (
                 a
                (
                )
            )
            arrow
            
               t
              (
                   a
                  (
                  )
              )
               int
              (
              )
            )
  )
  module M
      struct
      (
        type
        (
          t
            type
              params =
                (
                  a
                )
              cstrs =
                (
                )
              kind =
                
                     int
                    (
                    )
        )
        let
        (
          eq
            Eq
                    )
      )
      signature
      (
          type
          (
            t
              type
                params =
                  (
                    a
                  )
                cstrs =
                  (
                  )
                kind =
                  
                            )
          sig_value eq
          value_description
               eq
              (
                   t
                  (
                      a
                  )
                   t
                  (
                      b
                  )
              )
            (
            )
      )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
               M.t
              (
                  a
              )
               M.t
              (
                  b
              )
          )
           eq
          (
              a
              b
          )
      a
      b
      (
      (
        case
        (
          Eq
                    Eq
                  )
      )
      :
          arrow
          
             eq
            (
                 M.t
                (
                     a
                    (
                    )
                )
                 M.t
                (
                     b
                    (
                    )
                )
            )
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              tuple
              (
                   M.t
                  (
                      a
                  )
                  a
              )
              tuple
              (
                   M.t
                  (
                      b
                  )
                  b
              )
          )
           eq
          (
              a
              b
          )
      a
      b
      (
      (
        case
        (
          Eq
                    Eq
                  )
      )
      :
          arrow
          
             eq
            (
                tuple
                (
                     M.t
                    (
                         a
                        (
                        )
                    )
                     a
                    (
                    )
                )
                tuple
                (
                     M.t
                    (
                         b
                        (
                        )
                    )
                     b
                    (
                    )
                )
            )
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            )
  )
  let
  (
    f
      poly
       'a 'b
        arrow
        
           eq
          (
              tuple
              (
                  a
                   M.t
                  (
                      a
                  )
              )
              tuple
              (
                  b
                   M.t
                  (
                      b
                  )
              )
          )
           eq
          (
              a
              b
          )
      a
      b
      (
      (
        case
        (
          Eq
                    Eq
                  )
      )
      :
          arrow
          
             eq
            (
                tuple
                (
                     a
                    (
                    )
                     M.t
                    (
                         a
                        (
                        )
                    )
                )
                tuple
                (
                     b
                    (
                    )
                     M.t
                    (
                         b
                        (
                        )
                    )
                )
            )
             eq
            (
                 a
                (
                )
                 b
                (
                )
            )
            )
  )
  type
  (
    t
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              V1
                (
                )
                     t
                    (
                        (
                          A
                            (
                            )
                          B
                            (
                            )
                        )
                                            )
              V2
                (
                )
                     t
                    (
                        (
                          C
                            (
                            )
                          D
                            (
                            )
                        )
                                            )
            )
            )
  let
  (
    f
      poly
       'a
        arrow
        
           t
          (
              a
          )
          a
      a
      (
      (
        case
        (
          V1
                    A
                  )
        case
        (
          V2
                    C
                  )
      )
      :
          arrow
          
             t
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  f
  (
    
      V1
        )
  type
  (
    int_foo
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              IF_constr
                (
                )
                     int_foo
                    (
                        (
                            foo
                              poly
                              
                                 int
                                (
                                )
                            
                        )
                    )
            )
            )
  type
  (
    int_bar
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              IB_constr
                (
                )
                     int_bar
                    (
                        (
                            bar
                              poly
                              
                                 int
                                (
                                )
                            
                        )
                    )
            )
            )
  let
  (
    g
      t
      (
        case
        (
          x
             t
            (
            )
          (
            case
            (
              e
                 int_foo
                (
                     t
                    (
                    )
                )
              (
                case
                (
                  e'
                     int_bar
                    (
                         t
                        (
                        )
                    )
                  let
                  (
                    (
                      (
                        IF_constr
                                                IB_constr
                                              )
                        (
                          e
                          e'
                        )
                    )
                  in
                    (
                    x
                    :
                        (
                            foo
                              poly
                              
                                 int
                                (
                                )
                        )
                                        )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    g
      t
      (
        case
        (
          x
             t
            (
            )
          (
            case
            (
              e
                 int_foo
                (
                     t
                    (
                    )
                )
              (
                case
                (
                  e'
                     int_bar
                    (
                         t
                        (
                        )
                    )
                  let
                  (
                    (
                      (
                        IF_constr
                                                IB_constr
                                              )
                        (
                          e
                          e'
                        )
                    )
                  in
                    (
                    x
                    :
                        (
                            foo
                              poly
                              
                                 int
                                (
                                )
                            bar
                              poly
                              
                                 int
                                (
                                )
                        )
                                        )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    g
      t
      (
        case
        (
          x
             t
            (
            )
          (
            case
            (
              e
                 int_foo
                (
                     t
                    (
                    )
                )
              (
                case
                (
                  e'
                     int_bar
                    (
                         t
                        (
                        )
                    )
                  let
                  (
                    (
                      (
                        IF_constr
                                                IB_constr
                                              )
                        (
                          e
                          e'
                        )
                    )
                  in
                    (
                    x
                    :
                        (
                            foo
                              poly
                              
                                 int
                                (
                                )
                            bar
                              poly
                              
                                 int
                                (
                                )
                            
                        )
                                        )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    g
      t
      (
        case
        (
          x
             t
            (
            )
          (
            case
            (
              e
                 int_foo
                (
                     t
                    (
                    )
                )
              (
                case
                (
                  e'
                     int_bar
                    (
                         t
                        (
                        )
                    )
                  (
                  let
                  (
                    (
                      (
                        IF_constr
                                                IB_constr
                                              )
                        (
                          e
                          e'
                        )
                    )
                  in
                    (
                    x
                    :
                        (
                            foo
                              poly
                              
                                 int
                                (
                                )
                            bar
                              poly
                              
                                 int
                                (
                                )
                            
                        )
                                        )
                  )
                  :
                       t
                      (
                      )
                                    )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    g
      t
      (
        case
        (
          x
             t
            (
            )
          (
            case
            (
              e
                 int_foo
                (
                     t
                    (
                    )
                )
              (
                case
                (
                  e'
                     int_bar
                    (
                         t
                        (
                        )
                    )
                  let
                  (
                    (
                      (
                        IF_constr
                                                IB_constr
                                              )
                        (
                          e
                          e'
                        )
                    )
                  in
                    (
                      x
                      send foo
                      (
                        x
                      )
                      send bar
                      (
                        x
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
  )
  type
  (
    ty
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
            (
              Int
                (
                     int
                    (
                    )
                )
                     ty
                    (
                         int
                        (
                        )
                    )
            )
            )
  let
  (
    f
      poly
       'a
        arrow
        
           ty
          (
              a
          )
          a
      a
      (
      (
        case
        (
          x
          match
          x
          (
            case
            (
              Int
                y
              y
            )
          )
        )
      )
      :
          arrow
          
             ty
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  let
  (
    g
      poly
       'a
        arrow
        
           ty
          (
              a
          )
          a
      a
      (
      let
      (
        (
          ()
                      ()
                    )
      in
        (
          case
          (
            x
            match
            x
            (
              case
              (
                Int
                  y
                y
              )
            )
          )
        )
      )
      :
          arrow
          
             ty
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
)

