(
  type
  (
    sum
      type
        params =
          (
            a
            b
          )
        cstrs =
          (
          )
        kind =
            (
              Inl
                (
                    a
                )
                              Inr
                (
                    b
                )
                            )
            )
  type
  (
    zero
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Zero
                (
                )
                            )
            )
  type
  (
    succ
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    nat
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              NZ
                (
                )
                     nat
                    (
                         zero
                        (
                        )
                    )
              NS
                (
                     nat
                    (
                        a
                    )
                )
                     nat
                    (
                         succ
                        (
                            a
                        )
                    )
            )
            )
  type
  (
    seq
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Snil
                (
                )
                     seq
                    (
                        a
                         zero
                        (
                        )
                    )
              Scons
                (
                    a
                     seq
                    (
                        a
                        n
                    )
                )
                     seq
                    (
                        a
                         succ
                        (
                            n
                        )
                    )
            )
            )
  let
  (
    l1
      Scons
        (
          3
          Scons
            (
              5
              Snil
                          )
        )
  )
  type
  (
    plus
      type
        params =
          (
            "_"
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              PlusZ
                (
                     nat
                    (
                        a
                    )
                )
                     plus
                    (
                         zero
                        (
                        )
                        a
                        a
                    )
              PlusS
                (
                     plus
                    (
                        a
                        b
                        c
                    )
                )
                     plus
                    (
                         succ
                        (
                            a
                        )
                        b
                         succ
                        (
                            c
                        )
                    )
            )
            )
  let
  (
    length
      poly
       'a 'n
        arrow
        
           seq
          (
              a
              n
          )
           nat
          (
              n
          )
      a
      n
      (
      (
        case
        (
          Snil
                    NZ
                  )
        case
        (
          Scons
            (
              _
              s
            )
          NS
            length
            (
              
                s
            )
        )
      )
      :
          arrow
          
             seq
            (
                 a
                (
                )
                 n
                (
                )
            )
             nat
            (
                 n
                (
                )
            )
            )
  )
  type
  (
    app
      type
        params =
          (
            "_"
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              App
                (
                     seq
                    (
                        a
                        p
                    )
                     plus
                    (
                        n
                        m
                        p
                    )
                )
                     app
                    (
                        a
                        n
                        m
                    )
            )
            )
  let
  (
    app
      poly
       'a 'n 'm
        arrow
        
           seq
          (
              a
              n
          )
          arrow
          
             seq
            (
                a
                m
            )
             app
            (
                a
                n
                m
            )
      a
      n
      m
      (
      (
        case
        (
          xs
          (
            case
            (
              ys
              match
              xs
              (
                case
                (
                  Snil
                                    App
                    (
                      ys
                      PlusZ
                        length
                        (
                          
                            ys
                        )
                    )
                )
                case
                (
                  Scons
                    (
                      x
                      xs'
                    )
                  match
                  app
                  (
                    
                      xs'
                    
                      ys
                  )
                  (
                    case
                    (
                      App
                        (
                          xs''
                          pl
                        )
                      App
                        (
                          Scons
                            (
                              x
                              xs''
                            )
                          PlusS
                            pl
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             seq
            (
                 a
                (
                )
                 n
                (
                )
            )
            arrow
            
               seq
              (
                   a
                  (
                  )
                   m
                  (
                  )
              )
               app
              (
                   a
                  (
                  )
                   n
                  (
                  )
                   m
                  (
                  )
              )
            )
  )
  type
  (
    tp
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    nd
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    fk
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    shape
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Tp
                (
                )
                     shape
                    (
                         tp
                        (
                        )
                    )
              Nd
                (
                )
                     shape
                    (
                         nd
                        (
                        )
                    )
              Fk
                (
                     shape
                    (
                        a
                    )
                     shape
                    (
                        b
                    )
                )
                     shape
                    (
                         fk
                        (
                            a
                            b
                        )
                    )
            )
            )
  type
  (
    tt
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    ff
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    boolean
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              BT
                (
                )
                     boolean
                    (
                         tt
                        (
                        )
                    )
              BF
                (
                )
                     boolean
                    (
                         ff
                        (
                        )
                    )
            )
            )
  type
  (
    path
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Pnone
                (
                    a
                )
                     path
                    (
                         tp
                        (
                        )
                        a
                    )
              Phere
                (
                )
                     path
                    (
                         nd
                        (
                        )
                        a
                    )
              Pleft
                (
                     path
                    (
                        x
                        a
                    )
                )
                     path
                    (
                         fk
                        (
                            x
                            y
                        )
                        a
                    )
              Pright
                (
                     path
                    (
                        y
                        a
                    )
                )
                     path
                    (
                         fk
                        (
                            x
                            y
                        )
                        a
                    )
            )
            )
  type
  (
    tree
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Ttip
                (
                )
                     tree
                    (
                         tp
                        (
                        )
                        a
                    )
              Tnode
                (
                    a
                )
                     tree
                    (
                         nd
                        (
                        )
                        a
                    )
              Tfork
                (
                     tree
                    (
                        x
                        a
                    )
                     tree
                    (
                        y
                        a
                    )
                )
                     tree
                    (
                         fk
                        (
                            x
                            y
                        )
                        a
                    )
            )
            )
  let
  (
    tree1
      Tfork
        (
          Tfork
            (
              Ttip
                            Tnode
                4
            )
          Tfork
            (
              Tnode
                4
              Tnode
                3
            )
        )
  )
  let
  (
    find
      poly
       'sh
        arrow
        
          arrow
          
            a
            arrow
            
              a
               bool
              (
              )
          arrow
          
            a
            arrow
            
               tree
              (
                  sh
                  a
              )
               list
              (
                   path
                  (
                      sh
                      a
                  )
              )
      sh
      (
      (
        case
        (
          eq
          (
            case
            (
              n
              (
                case
                (
                  t
                  match
                  t
                  (
                    case
                    (
                      Ttip
                                            []
                                          )
                    case
                    (
                      Tnode
                        m
                      ifthenelse
                      (
                        if
                        (
                          eq
                          (
                            
                              n
                            
                              m
                          )
                        )
                        then
                        (
                          ::
                            (
                              Phere
                                                            []
                                                          )
                        )
                        else
                        (
                            []
                                                    )
                      )
                    )
                    case
                    (
                      Tfork
                        (
                          x
                          y
                        )
                      @
                      (
                        
                          List.map
                          (
                            
                              (
                                case
                                (
                                  x
                                  Pleft
                                    x
                                )
                              )
                            
                              find
                              (
                                
                                  eq
                                
                                  n
                                
                                  x
                              )
                          )
                        
                          List.map
                          (
                            
                              (
                                case
                                (
                                  x
                                  Pright
                                    x
                                )
                              )
                            
                              find
                              (
                                
                                  eq
                                
                                  n
                                
                                  y
                              )
                          )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
            arrow
            
              a
              arrow
              
                a
                 bool
                (
                )
            arrow
            
              a
              arrow
              
                 tree
                (
                     sh
                    (
                    )
                    a
                )
                 list
                (
                     path
                    (
                         sh
                        (
                        )
                        a
                    )
                )
            )
  )
  let
  (
    extract
      poly
       'sh
        arrow
        
           path
          (
              sh
              a
          )
          arrow
          
             tree
            (
                sh
                a
            )
            a
      sh
      (
      (
        case
        (
          p
          (
            case
            (
              t
              match
              (
                p
                t
              )
              (
                case
                (
                  (
                    Pnone
                      x
                    Ttip
                                      )
                  x
                )
                case
                (
                  (
                    Phere
                                        Tnode
                      y
                  )
                  y
                )
                case
                (
                  (
                    Pleft
                      p
                    Tfork
                      (
                        l
                        _
                      )
                  )
                  extract
                  (
                    
                      p
                    
                      l
                  )
                )
                case
                (
                  (
                    Pright
                      p
                    Tfork
                      (
                        _
                        r
                      )
                  )
                  extract
                  (
                    
                      p
                    
                      r
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             path
            (
                 sh
                (
                )
                a
            )
            arrow
            
               tree
              (
                   sh
                  (
                  )
                  a
              )
              a
            )
  )
  type
  (
    le
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              LeZ
                (
                     nat
                    (
                        a
                    )
                )
                     le
                    (
                         zero
                        (
                        )
                        a
                    )
              LeS
                (
                     le
                    (
                        n
                        m
                    )
                )
                     le
                    (
                         succ
                        (
                            n
                        )
                         succ
                        (
                            m
                        )
                    )
            )
            )
  type
  (
    even
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              EvenZ
                (
                )
                     even
                    (
                         zero
                        (
                        )
                    )
              EvenSS
                (
                     even
                    (
                        n
                    )
                )
                     even
                    (
                         succ
                        (
                             succ
                            (
                                n
                            )
                        )
                    )
            )
            )
  type
  (
    one
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               succ
              (
                   zero
                  (
                  )
              )
  )
  type
  (
    two
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               succ
              (
                   one
                  (
                  )
              )
  )
  type
  (
    three
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               succ
              (
                   two
                  (
                  )
              )
  )
  type
  (
    four
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               succ
              (
                   three
                  (
                  )
              )
  )
  let
  (
    even0
      (
      EvenZ
            :
           even
          (
               zero
              (
              )
          )
            )
  )
  let
  (
    even2
      (
      EvenSS
        EvenZ
              :
           even
          (
               two
              (
              )
          )
            )
  )
  let
  (
    even4
      (
      EvenSS
        EvenSS
          EvenZ
                :
           even
          (
               four
              (
              )
          )
            )
  )
  let
  (
    p1
      (
      PlusS
        PlusS
          PlusZ
            NS
              NZ
                    :
           plus
          (
               two
              (
              )
               one
              (
              )
               three
              (
              )
          )
            )
  )
  let
  (
    summandLessThanSum
      poly
       'a 'b 'c
        arrow
        
           plus
          (
              a
              b
              c
          )
           le
          (
              a
              c
          )
      a
      b
      c
      (
      (
        case
        (
          p
          match
          p
          (
            case
            (
              PlusZ
                n
              LeZ
                n
            )
            case
            (
              PlusS
                p'
              LeS
                summandLessThanSum
                (
                  
                    p'
                )
            )
          )
        )
      )
      :
          arrow
          
             plus
            (
                 a
                (
                )
                 b
                (
                )
                 c
                (
                )
            )
             le
            (
                 a
                (
                )
                 c
                (
                )
            )
            )
  )
  type
  (
    equal
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Eq
                (
                )
                     equal
                    (
                        a
                        a
                    )
            )
            )
  let
  (
    convert
      poly
       'a 'b
        arrow
        
           equal
          (
              a
              b
          )
          arrow
          
            a
            b
      a
      b
      (
      (
        case
        (
          Eq
                    (
            case
            (
              x
              x
            )
          )
        )
      )
      :
          arrow
          
             equal
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
               a
              (
              )
               b
              (
              )
            )
  )
  let
  (
    sameNat
      poly
       'a 'b
        arrow
        
           nat
          (
              a
          )
          arrow
          
             nat
            (
                b
            )
             option
            (
                 equal
                (
                    a
                    b
                )
            )
      a
      b
      (
      (
        case
        (
          a
          (
            case
            (
              b
              match
              (
                a
                b
              )
              (
                case
                (
                  (
                    NZ
                                        NZ
                                      )
                  Some
                    Eq
                                    )
                case
                (
                  (
                    NS
                      a'
                    NS
                      b'
                  )
                  match
                  sameNat
                  (
                    
                      a'
                    
                      b'
                  )
                  (
                    case
                    (
                      Some
                        Eq
                                              Some
                        Eq
                                            )
                    case
                    (
                      None
                                            None
                                          )
                  )
                )
                case
                (
                  _
                  None
                                  )
              )
            )
          )
        )
      )
      :
          arrow
          
             nat
            (
                 a
                (
                )
            )
            arrow
            
               nat
              (
                   b
                  (
                  )
              )
               option
              (
                   equal
                  (
                       a
                      (
                      )
                       b
                      (
                      )
                  )
              )
            )
  )
  let
  (
    smaller
      poly
       'a 'b
        arrow
        
           le
          (
               succ
              (
                  a
              )
               succ
              (
                  b
              )
          )
           le
          (
              a
              b
          )
      a
      b
      (
      (
        case
        (
          LeS
            x
          x
        )
      )
      :
          arrow
          
             le
            (
                 succ
                (
                     a
                    (
                    )
                )
                 succ
                (
                     b
                    (
                    )
                )
            )
             le
            (
                 a
                (
                )
                 b
                (
                )
            )
            )
  )
  type
  (
    diff
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Diff
                (
                     nat
                    (
                        c
                    )
                     plus
                    (
                        a
                        c
                        b
                    )
                )
                     diff
                    (
                        a
                        b
                    )
            )
            )
  let
  (
    diff
      poly
       'a 'b
        arrow
        
           le
          (
              a
              b
          )
          arrow
          
             nat
            (
                a
            )
            arrow
            
               nat
              (
                  b
              )
               diff
              (
                  a
                  b
              )
      a
      b
      (
      (
        case
        (
          le
          (
            case
            (
              a
              (
                case
                (
                  b
                  match
                  (
                    le
                    a
                    b
                  )
                  (
                    case
                    (
                      (
                        LeZ
                          _
                        _
                        m
                      )
                      Diff
                        (
                          m
                          PlusZ
                            m
                        )
                    )
                    case
                    (
                      (
                        LeS
                          q
                        NS
                          x
                        NS
                          y
                      )
                      match
                      diff
                      (
                        
                          q
                        
                          x
                        
                          y
                      )
                      (
                        case
                        (
                          Diff
                            (
                              m
                              p
                            )
                          Diff
                            (
                              m
                              PlusS
                                p
                            )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             le
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
               nat
              (
                   a
                  (
                  )
              )
              arrow
              
                 nat
                (
                     b
                    (
                    )
                )
                 diff
                (
                     a
                    (
                    )
                     b
                    (
                    )
                )
            )
  )
  let
  (
    diff
      poly
       'a 'b
        arrow
        
           le
          (
              a
              b
          )
          arrow
          
             nat
            (
                a
            )
            arrow
            
               nat
              (
                  b
              )
               diff
              (
                  a
                  b
              )
      a
      b
      (
      (
        case
        (
          le
          (
            case
            (
              a
              (
                case
                (
                  b
                  match
                  (
                    a
                    b
                    le
                  )
                  (
                    case
                    (
                      (
                        NZ
                                                m
                        LeZ
                          _
                      )
                      Diff
                        (
                          m
                          PlusZ
                            m
                        )
                    )
                    case
                    (
                      (
                        NS
                          x
                        NS
                          y
                        LeS
                          q
                      )
                      match
                      diff
                      (
                        
                          q
                        
                          x
                        
                          y
                      )
                      (
                        case
                        (
                          Diff
                            (
                              m
                              p
                            )
                          Diff
                            (
                              m
                              PlusS
                                p
                            )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             le
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
               nat
              (
                   a
                  (
                  )
              )
              arrow
              
                 nat
                (
                     b
                    (
                    )
                )
                 diff
                (
                     a
                    (
                    )
                     b
                    (
                    )
                )
            )
  )
  let
  (
    diff
      poly
       'a 'b
        arrow
        
           le
          (
              a
              b
          )
          arrow
          
             nat
            (
                b
            )
             diff
            (
                a
                b
            )
      a
      b
      (
      (
        case
        (
          le
          (
            case
            (
              b
              match
              (
                b
                le
              )
              (
                case
                (
                  (
                    m
                    LeZ
                      _
                  )
                  Diff
                    (
                      m
                      PlusZ
                        m
                    )
                )
                case
                (
                  (
                    NS
                      y
                    LeS
                      q
                  )
                  match
                  diff
                  (
                    
                      q
                    
                      y
                  )
                  (
                    case
                    (
                      Diff
                        (
                          m
                          p
                        )
                      Diff
                        (
                          m
                          PlusS
                            p
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             le
            (
                 a
                (
                )
                 b
                (
                )
            )
            arrow
            
               nat
              (
                   b
                  (
                  )
              )
               diff
              (
                   a
                  (
                  )
                   b
                  (
                  )
              )
            )
  )
  type
  (
    filter
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Filter
                (
                     le
                    (
                        m
                        n
                    )
                     seq
                    (
                        a
                        m
                    )
                )
                     filter
                    (
                        a
                        n
                    )
            )
            )
  let
  (
    leS'
      poly
       'm 'n
        arrow
        
           le
          (
              m
              n
          )
           le
          (
              m
               succ
              (
                  n
              )
          )
      m
      n
      (
      (
        case
        (
          LeZ
            n
          LeZ
            NS
              n
        )
        case
        (
          LeS
            le
          LeS
            leS'
            (
              
                le
            )
        )
      )
      :
          arrow
          
             le
            (
                 m
                (
                )
                 n
                (
                )
            )
             le
            (
                 m
                (
                )
                 succ
                (
                     n
                    (
                    )
                )
            )
            )
  )
  let
  (
    filter
      poly
       'a 'n
        arrow
        
          arrow
          
            a
             bool
            (
            )
          arrow
          
             seq
            (
                a
                n
            )
             filter
            (
                a
                n
            )
      a
      n
      (
      (
        case
        (
          f
          (
            case
            (
              s
              match
              s
              (
                case
                (
                  Snil
                                    Filter
                    (
                      LeZ
                        NZ
                                              Snil
                                          )
                )
                case
                (
                  Scons
                    (
                      a
                      l
                    )
                  match
                  filter
                  (
                    
                      f
                    
                      l
                  )
                  (
                    case
                    (
                      Filter
                        (
                          le
                          l'
                        )
                      ifthenelse
                      (
                        if
                        (
                          f
                          (
                            
                              a
                          )
                        )
                        then
                        (
                          Filter
                            (
                              LeS
                                le
                              Scons
                                (
                                  a
                                  l'
                                )
                            )
                        )
                        else
                        (
                            Filter
                              (
                                leS'
                                (
                                  
                                    le
                                )
                                l'
                              )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
            arrow
            
               a
              (
              )
               bool
              (
              )
            arrow
            
               seq
              (
                   a
                  (
                  )
                   n
                  (
                  )
              )
               filter
              (
                   a
                  (
                  )
                   n
                  (
                  )
              )
            )
  )
  type
  (
    balance
      type
        params =
          (
            "_"
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Less
                (
                )
                     balance
                    (
                        h
                         succ
                        (
                            h
                        )
                         succ
                        (
                            h
                        )
                    )
              Same
                (
                )
                     balance
                    (
                        h
                        h
                        h
                    )
              More
                (
                )
                     balance
                    (
                         succ
                        (
                            h
                        )
                        h
                         succ
                        (
                            h
                        )
                    )
            )
            )
  type
  (
    avl
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Leaf
                (
                )
                     avl
                    (
                         zero
                        (
                        )
                    )
              Node
                (
                     balance
                    (
                        hL
                        hR
                        hMax
                    )
                     avl
                    (
                        hL
                    )
                     int
                    (
                    )
                     avl
                    (
                        hR
                    )
                )
                     avl
                    (
                         succ
                        (
                            hMax
                        )
                    )
            )
            )
  type
  (
    avl'
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Avl
                (
                     avl
                    (
                        h
                    )
                )
                     avl'
                    (
                    )
            )
            )
  let
  (
    empty
      Avl
        Leaf
          )
  let
  (
    elem
      poly
       'h
        arrow
        
           int
          (
          )
          arrow
          
             avl
            (
                h
            )
             bool
            (
            )
      h
      (
      (
        case
        (
          x
          (
            case
            (
              t
              match
              t
              (
                case
                (
                  Leaf
                                    false
                                  )
                case
                (
                  Node
                    (
                      _
                      l
                      y
                      r
                    )
                  ||
                  (
                    
                      =
                      (
                        
                          x
                        
                          y
                      )
                    
                      ifthenelse
                      (
                        if
                        (
                          <
                          (
                            
                              x
                            
                              y
                          )
                        )
                        then
                        (
                          elem
                          (
                            
                              x
                            
                              l
                          )
                        )
                        else
                        (
                            elem
                            (
                              
                                x
                              
                                r
                            )
                        )
                      )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             int
            (
            )
            arrow
            
               avl
              (
                   h
                  (
                  )
              )
               bool
              (
              )
            )
  )
  let
  (
    rotr
      poly
       'n
        arrow
        
           avl
          (
               succ
              (
                   succ
                  (
                      n
                  )
              )
          )
          arrow
          
             int
            (
            )
            arrow
            
               avl
              (
                  n
              )
               sum
              (
                   avl
                  (
                       succ
                      (
                           succ
                          (
                              n
                          )
                      )
                  )
                   avl
                  (
                       succ
                      (
                           succ
                          (
                               succ
                              (
                                  n
                              )
                          )
                      )
                  )
              )
      n
      (
      (
        case
        (
          tL
          (
            case
            (
              y
              (
                case
                (
                  tR
                  match
                  tL
                  (
                    case
                    (
                      Node
                        (
                          Same
                                                    a
                          x
                          b
                        )
                      Inr
                        Node
                          (
                            Less
                                                        a
                            x
                            Node
                              (
                                More
                                                                b
                                y
                                tR
                              )
                          )
                    )
                    case
                    (
                      Node
                        (
                          More
                                                    a
                          x
                          b
                        )
                      Inl
                        Node
                          (
                            Same
                                                        a
                            x
                            Node
                              (
                                Same
                                                                b
                                y
                                tR
                              )
                          )
                    )
                    case
                    (
                      Node
                        (
                          Less
                                                    a
                          x
                          Node
                            (
                              Same
                                                            b
                              z
                              c
                            )
                        )
                      Inl
                        Node
                          (
                            Same
                                                        Node
                              (
                                Same
                                                                a
                                x
                                b
                              )
                            z
                            Node
                              (
                                Same
                                                                c
                                y
                                tR
                              )
                          )
                    )
                    case
                    (
                      Node
                        (
                          Less
                                                    a
                          x
                          Node
                            (
                              Less
                                                            b
                              z
                              c
                            )
                        )
                      Inl
                        Node
                          (
                            Same
                                                        Node
                              (
                                More
                                                                a
                                x
                                b
                              )
                            z
                            Node
                              (
                                Same
                                                                c
                                y
                                tR
                              )
                          )
                    )
                    case
                    (
                      Node
                        (
                          Less
                                                    a
                          x
                          Node
                            (
                              More
                                                            b
                              z
                              c
                            )
                        )
                      Inl
                        Node
                          (
                            Same
                                                        Node
                              (
                                Same
                                                                a
                                x
                                b
                              )
                            z
                            Node
                              (
                                Less
                                                                c
                                y
                                tR
                              )
                          )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             avl
            (
                 succ
                (
                     succ
                    (
                         n
                        (
                        )
                    )
                )
            )
            arrow
            
               int
              (
              )
              arrow
              
                 avl
                (
                     n
                    (
                    )
                )
                 sum
                (
                     avl
                    (
                         succ
                        (
                             succ
                            (
                                 n
                                (
                                )
                            )
                        )
                    )
                     avl
                    (
                         succ
                        (
                             succ
                            (
                                 succ
                                (
                                     n
                                    (
                                    )
                                )
                            )
                        )
                    )
                )
            )
  )
  let
  (
    rotl
      poly
       'n
        arrow
        
           avl
          (
              n
          )
          arrow
          
             int
            (
            )
            arrow
            
               avl
              (
                   succ
                  (
                       succ
                      (
                          n
                      )
                  )
              )
               sum
              (
                   avl
                  (
                       succ
                      (
                           succ
                          (
                              n
                          )
                      )
                  )
                   avl
                  (
                       succ
                      (
                           succ
                          (
                               succ
                              (
                                  n
                              )
                          )
                      )
                  )
              )
      n
      (
      (
        case
        (
          tL
          (
            case
            (
              u
              (
                case
                (
                  tR
                  match
                  tR
                  (
                    case
                    (
                      Node
                        (
                          Same
                                                    a
                          x
                          b
                        )
                      Inr
                        Node
                          (
                            More
                                                        Node
                              (
                                Less
                                                                tL
                                u
                                a
                              )
                            x
                            b
                          )
                    )
                    case
                    (
                      Node
                        (
                          Less
                                                    a
                          x
                          b
                        )
                      Inl
                        Node
                          (
                            Same
                                                        Node
                              (
                                Same
                                                                tL
                                u
                                a
                              )
                            x
                            b
                          )
                    )
                    case
                    (
                      Node
                        (
                          More
                                                    Node
                            (
                              Same
                                                            a
                              x
                              b
                            )
                          y
                          c
                        )
                      Inl
                        Node
                          (
                            Same
                                                        Node
                              (
                                Same
                                                                tL
                                u
                                a
                              )
                            x
                            Node
                              (
                                Same
                                                                b
                                y
                                c
                              )
                          )
                    )
                    case
                    (
                      Node
                        (
                          More
                                                    Node
                            (
                              Less
                                                            a
                              x
                              b
                            )
                          y
                          c
                        )
                      Inl
                        Node
                          (
                            Same
                                                        Node
                              (
                                More
                                                                tL
                                u
                                a
                              )
                            x
                            Node
                              (
                                Same
                                                                b
                                y
                                c
                              )
                          )
                    )
                    case
                    (
                      Node
                        (
                          More
                                                    Node
                            (
                              More
                                                            a
                              x
                              b
                            )
                          y
                          c
                        )
                      Inl
                        Node
                          (
                            Same
                                                        Node
                              (
                                Same
                                                                tL
                                u
                                a
                              )
                            x
                            Node
                              (
                                Less
                                                                b
                                y
                                c
                              )
                          )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             avl
            (
                 n
                (
                )
            )
            arrow
            
               int
              (
              )
              arrow
              
                 avl
                (
                     succ
                    (
                         succ
                        (
                             n
                            (
                            )
                        )
                    )
                )
                 sum
                (
                     avl
                    (
                         succ
                        (
                             succ
                            (
                                 n
                                (
                                )
                            )
                        )
                    )
                     avl
                    (
                         succ
                        (
                             succ
                            (
                                 succ
                                (
                                     n
                                    (
                                    )
                                )
                            )
                        )
                    )
                )
            )
  )
  let
  (
    ins
      poly
       'n
        arrow
        
           int
          (
          )
          arrow
          
             avl
            (
                n
            )
             sum
            (
                 avl
                (
                    n
                )
                 avl
                (
                     succ
                    (
                        n
                    )
                )
            )
      n
      (
      (
        case
        (
          x
          (
            case
            (
              t
              match
              t
              (
                case
                (
                  Leaf
                                    Inr
                    Node
                      (
                        Same
                                                Leaf
                                                x
                        Leaf
                                              )
                )
                case
                (
                  Node
                    (
                      bal
                      a
                      y
                      b
                    )
                  ifthenelse
                  (
                    if
                    (
                      =
                      (
                        
                          x
                        
                          y
                      )
                    )
                    then
                    (
                      Inl
                        t
                    )
                    else
                    (
                        ifthenelse
                        (
                          if
                          (
                            <
                            (
                              
                                x
                              
                                y
                            )
                          )
                          then
                          (
                            match
                            ins
                            (
                              
                                x
                              
                                a
                            )
                            (
                              case
                              (
                                Inl
                                  a
                                Inl
                                  Node
                                    (
                                      bal
                                      a
                                      y
                                      b
                                    )
                              )
                              case
                              (
                                Inr
                                  a
                                match
                                bal
                                (
                                  case
                                  (
                                    Less
                                                                        Inl
                                      Node
                                        (
                                          Same
                                                                                    a
                                          y
                                          b
                                        )
                                  )
                                  case
                                  (
                                    Same
                                                                        Inr
                                      Node
                                        (
                                          More
                                                                                    a
                                          y
                                          b
                                        )
                                  )
                                  case
                                  (
                                    More
                                                                        rotr
                                    (
                                      
                                        a
                                      
                                        y
                                      
                                        b
                                    )
                                  )
                                )
                              )
                            )
                          )
                          else
                          (
                              match
                              ins
                              (
                                
                                  x
                                
                                  b
                              )
                              (
                                case
                                (
                                  Inl
                                    b
                                  Inl
                                    (
                                    Node
                                      (
                                        bal
                                        a
                                        y
                                        b
                                      )
                                    :
                                         avl
                                        (
                                             n
                                            (
                                            )
                                        )
                                                                        )
                                )
                                case
                                (
                                  Inr
                                    b
                                  match
                                  bal
                                  (
                                    case
                                    (
                                      More
                                                                            Inl
                                        (
                                        Node
                                          (
                                            Same
                                                                                        a
                                            y
                                            b
                                          )
                                        :
                                             avl
                                            (
                                                 n
                                                (
                                                )
                                            )
                                                                                )
                                    )
                                    case
                                    (
                                      Same
                                                                            Inr
                                        (
                                        Node
                                          (
                                            Less
                                                                                        a
                                            y
                                            b
                                          )
                                        :
                                             avl
                                            (
                                                 succ
                                                (
                                                     n
                                                    (
                                                    )
                                                )
                                            )
                                                                                )
                                    )
                                    case
                                    (
                                      Less
                                                                            rotl
                                      (
                                        
                                          a
                                        
                                          y
                                        
                                          b
                                      )
                                    )
                                  )
                                )
                              )
                          )
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             int
            (
            )
            arrow
            
               avl
              (
                   n
                  (
                  )
              )
               sum
              (
                   avl
                  (
                       n
                      (
                      )
                  )
                   avl
                  (
                       succ
                      (
                           n
                          (
                          )
                      )
                  )
              )
            )
  )
  let
  (
    insert
      (
        case
        (
          x
          (
            case
            (
              Avl
                t
              match
              ins
              (
                
                  x
                
                  t
              )
              (
                case
                (
                  Inl
                    t
                  Avl
                    t
                )
                case
                (
                  Inr
                    t
                  Avl
                    t
                )
              )
            )
          )
        )
      )
  )
  let
  (
    del_min
      poly
       'n
        arrow
        
           avl
          (
               succ
              (
                  n
              )
          )
          tuple
          (
               int
              (
              )
               sum
              (
                   avl
                  (
                      n
                  )
                   avl
                  (
                       succ
                      (
                          n
                      )
                  )
              )
          )
      n
      (
      (
        case
        (
          Node
            (
              Less
                            Leaf
                            x
              r
            )
          (
            x
            Inl
              r
          )
        )
        case
        (
          Node
            (
              Same
                            Leaf
                            x
              r
            )
          (
            x
            Inl
              r
          )
        )
        case
        (
          Node
            (
              bal
              alias l
              (
                Node
                  _
              )
              x
              r
            )
          match
          del_min
          (
            
              l
          )
          (
            case
            (
              (
                y
                Inr
                  l
              )
              (
                y
                Inr
                  Node
                    (
                      bal
                      l
                      x
                      r
                    )
              )
            )
            case
            (
              (
                y
                Inl
                  l
              )
              (
                y
                match
                bal
                (
                  case
                  (
                    Same
                                        Inr
                      Node
                        (
                          Less
                                                    l
                          x
                          r
                        )
                  )
                  case
                  (
                    More
                                        Inl
                      Node
                        (
                          Same
                                                    l
                          x
                          r
                        )
                  )
                  case
                  (
                    Less
                                        rotl
                    (
                      
                        l
                      
                        x
                      
                        r
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             avl
            (
                 succ
                (
                     n
                    (
                    )
                )
            )
            tuple
            (
                 int
                (
                )
                 sum
                (
                     avl
                    (
                         n
                        (
                        )
                    )
                     avl
                    (
                         succ
                        (
                             n
                            (
                            )
                        )
                    )
                )
            )
            )
  )
  type
  (
    avl_del
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Dsame
                (
                     avl
                    (
                        n
                    )
                )
                     avl_del
                    (
                        n
                    )
              Ddecr
                (
                     equal
                    (
                         succ
                        (
                            m
                        )
                        n
                    )
                     avl
                    (
                        m
                    )
                )
                     avl_del
                    (
                        n
                    )
            )
            )
  let
  (
    del
      poly
       'n
        arrow
        
           int
          (
          )
          arrow
          
             avl
            (
                n
            )
             avl_del
            (
                n
            )
      n
      (
      (
        case
        (
          y
          (
            case
            (
              t
              match
              t
              (
                case
                (
                  Leaf
                                    Dsame
                    Leaf
                                    )
                case
                (
                  Node
                    (
                      bal
                      l
                      x
                      r
                    )
                  ifthenelse
                  (
                    if
                    (
                      =
                      (
                        
                          x
                        
                          y
                      )
                    )
                    then
                    (
                      match
                      r
                      (
                        case
                        (
                          Leaf
                                                    match
                          bal
                          (
                            case
                            (
                              Same
                                                            Ddecr
                                (
                                  Eq
                                                                    l
                                )
                            )
                            case
                            (
                              More
                                                            Ddecr
                                (
                                  Eq
                                                                    l
                                )
                            )
                          )
                        )
                        case
                        (
                          Node
                            _
                          match
                          (
                            bal
                            del_min
                            (
                              
                                r
                            )
                          )
                          (
                            case
                            (
                              (
                                _
                                (
                                  z
                                  Inr
                                    r
                                )
                              )
                              Dsame
                                Node
                                  (
                                    bal
                                    l
                                    z
                                    r
                                  )
                            )
                            case
                            (
                              (
                                Same
                                                                (
                                  z
                                  Inl
                                    r
                                )
                              )
                              Dsame
                                Node
                                  (
                                    More
                                                                        l
                                    z
                                    r
                                  )
                            )
                            case
                            (
                              (
                                Less
                                                                (
                                  z
                                  Inl
                                    r
                                )
                              )
                              Ddecr
                                (
                                  Eq
                                                                    Node
                                    (
                                      Same
                                                                            l
                                      z
                                      r
                                    )
                                )
                            )
                            case
                            (
                              (
                                More
                                                                (
                                  z
                                  Inl
                                    r
                                )
                              )
                              match
                              rotr
                              (
                                
                                  l
                                
                                  z
                                
                                  r
                              )
                              (
                                case
                                (
                                  Inl
                                    t
                                  Ddecr
                                    (
                                      Eq
                                                                            t
                                    )
                                )
                                case
                                (
                                  Inr
                                    t
                                  Dsame
                                    t
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    else
                    (
                        ifthenelse
                        (
                          if
                          (
                            <
                            (
                              
                                y
                              
                                x
                            )
                          )
                          then
                          (
                            match
                            del
                            (
                              
                                y
                              
                                l
                            )
                            (
                              case
                              (
                                Dsame
                                  l
                                Dsame
                                  Node
                                    (
                                      bal
                                      l
                                      x
                                      r
                                    )
                              )
                              case
                              (
                                Ddecr
                                  (
                                    Eq
                                                                        l
                                  )
                                match
                                bal
                                (
                                  case
                                  (
                                    Same
                                                                        Dsame
                                      Node
                                        (
                                          Less
                                                                                    l
                                          x
                                          r
                                        )
                                  )
                                  case
                                  (
                                    More
                                                                        Ddecr
                                      (
                                        Eq
                                                                                Node
                                          (
                                            Same
                                                                                        l
                                            x
                                            r
                                          )
                                      )
                                  )
                                  case
                                  (
                                    Less
                                                                        match
                                    rotl
                                    (
                                      
                                        l
                                      
                                        x
                                      
                                        r
                                    )
                                    (
                                      case
                                      (
                                        Inl
                                          t
                                        Ddecr
                                          (
                                            Eq
                                                                                        t
                                          )
                                      )
                                      case
                                      (
                                        Inr
                                          t
                                        Dsame
                                          t
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          else
                          (
                              match
                              del
                              (
                                
                                  y
                                
                                  r
                              )
                              (
                                case
                                (
                                  Dsame
                                    r
                                  Dsame
                                    Node
                                      (
                                        bal
                                        l
                                        x
                                        r
                                      )
                                )
                                case
                                (
                                  Ddecr
                                    (
                                      Eq
                                                                            r
                                    )
                                  match
                                  bal
                                  (
                                    case
                                    (
                                      Same
                                                                            Dsame
                                        Node
                                          (
                                            More
                                                                                        l
                                            x
                                            r
                                          )
                                    )
                                    case
                                    (
                                      Less
                                                                            Ddecr
                                        (
                                          Eq
                                                                                    Node
                                            (
                                              Same
                                                                                            l
                                              x
                                              r
                                            )
                                        )
                                    )
                                    case
                                    (
                                      More
                                                                            match
                                      rotr
                                      (
                                        
                                          l
                                        
                                          x
                                        
                                          r
                                      )
                                      (
                                        case
                                        (
                                          Inl
                                            t
                                          Ddecr
                                            (
                                              Eq
                                                                                            t
                                            )
                                        )
                                        case
                                        (
                                          Inr
                                            t
                                          Dsame
                                            t
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                          )
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             int
            (
            )
            arrow
            
               avl
              (
                   n
                  (
                  )
              )
               avl_del
              (
                   n
                  (
                  )
              )
            )
  )
  let
  (
    delete
      (
        case
        (
          x
          (
            case
            (
              Avl
                t
              match
              del
              (
                
                  x
                
                  t
              )
              (
                case
                (
                  Dsame
                    t
                  Avl
                    t
                )
                case
                (
                  Ddecr
                    (
                      _
                      t
                    )
                  Avl
                    t
                )
              )
            )
          )
        )
      )
  )
  type
  (
    red
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    black
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    sub_tree
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Bleaf
                (
                )
                     sub_tree
                    (
                         black
                        (
                        )
                         zero
                        (
                        )
                    )
              Rnode
                (
                     sub_tree
                    (
                         black
                        (
                        )
                        n
                    )
                     int
                    (
                    )
                     sub_tree
                    (
                         black
                        (
                        )
                        n
                    )
                )
                     sub_tree
                    (
                         red
                        (
                        )
                        n
                    )
              Bnode
                (
                     sub_tree
                    (
                        cL
                        n
                    )
                     int
                    (
                    )
                     sub_tree
                    (
                        cR
                        n
                    )
                )
                     sub_tree
                    (
                         black
                        (
                        )
                         succ
                        (
                            n
                        )
                    )
            )
            )
  type
  (
    rb_tree
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Root
                (
                     sub_tree
                    (
                         black
                        (
                        )
                        n
                    )
                )
                     rb_tree
                    (
                    )
            )
            )
  type
  (
    dir
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              LeftD
                (
                )
                              RightD
                (
                )
                            )
            )
  type
  (
    ctxt
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              CNil
                (
                )
                     ctxt
                    (
                         black
                        (
                        )
                        n
                    )
              CRed
                (
                     int
                    (
                    )
                     dir
                    (
                    )
                     sub_tree
                    (
                         black
                        (
                        )
                        n
                    )
                     ctxt
                    (
                         red
                        (
                        )
                        n
                    )
                )
                     ctxt
                    (
                         black
                        (
                        )
                        n
                    )
              CBlk
                (
                     int
                    (
                    )
                     dir
                    (
                    )
                     sub_tree
                    (
                        c1
                        n
                    )
                     ctxt
                    (
                         black
                        (
                        )
                         succ
                        (
                            n
                        )
                    )
                )
                     ctxt
                    (
                        c
                        n
                    )
            )
            )
  let
  (
    blacken
      (
        case
        (
          Rnode
            (
              l
              e
              r
            )
          Bnode
            (
              l
              e
              r
            )
        )
      )
  )
  type
  (
    crep
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Red
                (
                )
                     crep
                    (
                         red
                        (
                        )
                    )
              Black
                (
                )
                     crep
                    (
                         black
                        (
                        )
                    )
            )
            )
  let
  (
    color
      poly
       'c 'n
        arrow
        
           sub_tree
          (
              c
              n
          )
           crep
          (
              c
          )
      c
      n
      (
      (
        case
        (
          Bleaf
                    Black
                  )
        case
        (
          Rnode
            _
          Red
                  )
        case
        (
          Bnode
            _
          Black
                  )
      )
      :
          arrow
          
             sub_tree
            (
                 c
                (
                )
                 n
                (
                )
            )
             crep
            (
                 c
                (
                )
            )
            )
  )
  let
  (
    fill
      poly
       'c 'n
        arrow
        
           ctxt
          (
              c
              n
          )
          arrow
          
             sub_tree
            (
                c
                n
            )
             rb_tree
            (
            )
      c
      n
      (
      (
        case
        (
          ct
          (
            case
            (
              t
              match
              ct
              (
                case
                (
                  CNil
                                    Root
                    t
                )
                case
                (
                  CRed
                    (
                      e
                      LeftD
                                            uncle
                      c
                    )
                  fill
                  (
                    
                      c
                    
                      Rnode
                        (
                          uncle
                          e
                          t
                        )
                  )
                )
                case
                (
                  CRed
                    (
                      e
                      RightD
                                            uncle
                      c
                    )
                  fill
                  (
                    
                      c
                    
                      Rnode
                        (
                          t
                          e
                          uncle
                        )
                  )
                )
                case
                (
                  CBlk
                    (
                      e
                      LeftD
                                            uncle
                      c
                    )
                  fill
                  (
                    
                      c
                    
                      Bnode
                        (
                          uncle
                          e
                          t
                        )
                  )
                )
                case
                (
                  CBlk
                    (
                      e
                      RightD
                                            uncle
                      c
                    )
                  fill
                  (
                    
                      c
                    
                      Bnode
                        (
                          t
                          e
                          uncle
                        )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             ctxt
            (
                 c
                (
                )
                 n
                (
                )
            )
            arrow
            
               sub_tree
              (
                   c
                  (
                  )
                   n
                  (
                  )
              )
               rb_tree
              (
              )
            )
  )
  let
  (
    recolor
      (
        case
        (
          d1
          (
            case
            (
              pE
              (
                case
                (
                  sib
                  (
                    case
                    (
                      d2
                      (
                        case
                        (
                          gE
                          (
                            case
                            (
                              uncle
                              (
                                case
                                (
                                  t
                                  match
                                  (
                                    d1
                                    d2
                                  )
                                  (
                                    case
                                    (
                                      (
                                        LeftD
                                                                                RightD
                                                                              )
                                      Rnode
                                        (
                                          Bnode
                                            (
                                              sib
                                              pE
                                              t
                                            )
                                          gE
                                          uncle
                                        )
                                    )
                                    case
                                    (
                                      (
                                        RightD
                                                                                RightD
                                                                              )
                                      Rnode
                                        (
                                          Bnode
                                            (
                                              t
                                              pE
                                              sib
                                            )
                                          gE
                                          uncle
                                        )
                                    )
                                    case
                                    (
                                      (
                                        LeftD
                                                                                LeftD
                                                                              )
                                      Rnode
                                        (
                                          uncle
                                          gE
                                          Bnode
                                            (
                                              sib
                                              pE
                                              t
                                            )
                                        )
                                    )
                                    case
                                    (
                                      (
                                        RightD
                                                                                LeftD
                                                                              )
                                      Rnode
                                        (
                                          uncle
                                          gE
                                          Bnode
                                            (
                                              t
                                              pE
                                              sib
                                            )
                                        )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    rotate
      (
        case
        (
          d1
          (
            case
            (
              pE
              (
                case
                (
                  sib
                  (
                    case
                    (
                      d2
                      (
                        case
                        (
                          gE
                          (
                            case
                            (
                              uncle
                              (
                                case
                                (
                                  Rnode
                                    (
                                      x
                                      e
                                      y
                                    )
                                  match
                                  (
                                    d1
                                    d2
                                  )
                                  (
                                    case
                                    (
                                      (
                                        RightD
                                                                                RightD
                                                                              )
                                      Bnode
                                        (
                                          Rnode
                                            (
                                              x
                                              e
                                              y
                                            )
                                          pE
                                          Rnode
                                            (
                                              sib
                                              gE
                                              uncle
                                            )
                                        )
                                    )
                                    case
                                    (
                                      (
                                        LeftD
                                                                                RightD
                                                                              )
                                      Bnode
                                        (
                                          Rnode
                                            (
                                              sib
                                              pE
                                              x
                                            )
                                          e
                                          Rnode
                                            (
                                              y
                                              gE
                                              uncle
                                            )
                                        )
                                    )
                                    case
                                    (
                                      (
                                        LeftD
                                                                                LeftD
                                                                              )
                                      Bnode
                                        (
                                          Rnode
                                            (
                                              uncle
                                              gE
                                              sib
                                            )
                                          pE
                                          Rnode
                                            (
                                              x
                                              e
                                              y
                                            )
                                        )
                                    )
                                    case
                                    (
                                      (
                                        RightD
                                                                                LeftD
                                                                              )
                                      Bnode
                                        (
                                          Rnode
                                            (
                                              uncle
                                              gE
                                              x
                                            )
                                          e
                                          Rnode
                                            (
                                              y
                                              pE
                                              sib
                                            )
                                        )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    repair
      poly
       'c 'n
        arrow
        
           sub_tree
          (
               red
              (
              )
              n
          )
          arrow
          
             ctxt
            (
                c
                n
            )
             rb_tree
            (
            )
      c
      n
      (
      (
        case
        (
          t
          (
            case
            (
              ct
              match
              ct
              (
                case
                (
                  CNil
                                    Root
                    blacken
                    (
                      
                        t
                    )
                )
                case
                (
                  CBlk
                    (
                      e
                      LeftD
                                            sib
                      c
                    )
                  fill
                  (
                    
                      c
                    
                      Bnode
                        (
                          sib
                          e
                          t
                        )
                  )
                )
                case
                (
                  CBlk
                    (
                      e
                      RightD
                                            sib
                      c
                    )
                  fill
                  (
                    
                      c
                    
                      Bnode
                        (
                          t
                          e
                          sib
                        )
                  )
                )
                case
                (
                  CRed
                    (
                      e
                      dir
                      sib
                      CBlk
                        (
                          e'
                          dir'
                          uncle
                          ct
                        )
                    )
                  match
                  color
                  (
                    
                      uncle
                  )
                  (
                    case
                    (
                      Red
                                            repair
                      (
                        
                          recolor
                          (
                            
                              dir
                            
                              e
                            
                              sib
                            
                              dir'
                            
                              e'
                            
                              blacken
                              (
                                
                                  uncle
                              )
                            
                              t
                          )
                        
                          ct
                      )
                    )
                    case
                    (
                      Black
                                            fill
                      (
                        
                          ct
                        
                          rotate
                          (
                            
                              dir
                            
                              e
                            
                              sib
                            
                              dir'
                            
                              e'
                            
                              uncle
                            
                              t
                          )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             sub_tree
            (
                 red
                (
                )
                 n
                (
                )
            )
            arrow
            
               ctxt
              (
                   c
                  (
                  )
                   n
                  (
                  )
              )
               rb_tree
              (
              )
            )
  )
  let
  (
    ins
      poly
       'c 'n
        arrow
        
           int
          (
          )
          arrow
          
             sub_tree
            (
                c
                n
            )
            arrow
            
               ctxt
              (
                  c
                  n
              )
               rb_tree
              (
              )
      c
      n
      (
      (
        case
        (
          e
          (
            case
            (
              t
              (
                case
                (
                  ct
                  match
                  t
                  (
                    case
                    (
                      Rnode
                        (
                          l
                          e'
                          r
                        )
                      ifthenelse
                      (
                        if
                        (
                          <
                          (
                            
                              e
                            
                              e'
                          )
                        )
                        then
                        (
                          ins
                          (
                            
                              e
                            
                              l
                            
                              CRed
                                (
                                  e'
                                  RightD
                                                                    r
                                  ct
                                )
                          )
                        )
                        else
                        (
                            ins
                            (
                              
                                e
                              
                                r
                              
                                CRed
                                  (
                                    e'
                                    LeftD
                                                                        l
                                    ct
                                  )
                            )
                        )
                      )
                    )
                    case
                    (
                      Bnode
                        (
                          l
                          e'
                          r
                        )
                      ifthenelse
                      (
                        if
                        (
                          <
                          (
                            
                              e
                            
                              e'
                          )
                        )
                        then
                        (
                          ins
                          (
                            
                              e
                            
                              l
                            
                              CBlk
                                (
                                  e'
                                  RightD
                                                                    r
                                  ct
                                )
                          )
                        )
                        else
                        (
                            ins
                            (
                              
                                e
                              
                                r
                              
                                CBlk
                                  (
                                    e'
                                    LeftD
                                                                        l
                                    ct
                                  )
                            )
                        )
                      )
                    )
                    case
                    (
                      Bleaf
                                            repair
                      (
                        
                          Rnode
                            (
                              Bleaf
                                                            e
                              Bleaf
                                                          )
                        
                          ct
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             int
            (
            )
            arrow
            
               sub_tree
              (
                   c
                  (
                  )
                   n
                  (
                  )
              )
              arrow
              
                 ctxt
                (
                     c
                    (
                    )
                     n
                    (
                    )
                )
                 rb_tree
                (
                )
            )
  )
  let
  (
    insert
      (
        case
        (
          e
          (
            case
            (
              Root
                t
              ins
              (
                
                  e
                
                  t
                
                  CNil
                                )
            )
          )
        )
      )
  )
  type
  (
    term
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Const
                (
                     int
                    (
                    )
                )
                     term
                    (
                         int
                        (
                        )
                    )
              Add
                (
                )
                     term
                    (
                        arrow
                        
                          tuple
                          (
                               int
                              (
                              )
                               int
                              (
                              )
                          )
                           int
                          (
                          )
                    )
              LT
                (
                )
                     term
                    (
                        arrow
                        
                          tuple
                          (
                               int
                              (
                              )
                               int
                              (
                              )
                          )
                           bool
                          (
                          )
                    )
              Ap
                (
                     term
                    (
                        arrow
                        
                          a
                          b
                    )
                     term
                    (
                        a
                    )
                )
                     term
                    (
                        b
                    )
              Pair
                (
                     term
                    (
                        a
                    )
                     term
                    (
                        b
                    )
                )
                     term
                    (
                        tuple
                        (
                            a
                            b
                        )
                    )
            )
            )
  let
  (
    ex1
      Ap
        (
          Add
                    Pair
            (
              Const
                3
              Const
                5
            )
        )
  )
  let
  (
    ex2
      Pair
        (
          ex1
          Const
            1
        )
  )
  let
  (
    eval_term
      poly
       'a
        arrow
        
           term
          (
              a
          )
          a
      a
      (
      (
        case
        (
          Const
            x
          x
        )
        case
        (
          Add
                    (
            case
            (
              (
                x
                y
              )
              +
              (
                
                  x
                
                  y
              )
            )
          )
        )
        case
        (
          LT
                    (
            case
            (
              (
                x
                y
              )
              <
              (
                
                  x
                
                  y
              )
            )
          )
        )
        case
        (
          Ap
            (
              f
              x
            )
          eval_term
          (
            
              f
            
              eval_term
              (
                
                  x
              )
          )
        )
        case
        (
          Pair
            (
              x
              y
            )
          (
            eval_term
            (
              
                x
            )
            eval_term
            (
              
                y
            )
          )
        )
      )
      :
          arrow
          
             term
            (
                 a
                (
                )
            )
             a
            (
            )
            )
  )
  type
  (
    rep
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Rint
                (
                )
                     rep
                    (
                         int
                        (
                        )
                    )
              Rbool
                (
                )
                     rep
                    (
                         bool
                        (
                        )
                    )
              Rpair
                (
                     rep
                    (
                        a
                    )
                     rep
                    (
                        b
                    )
                )
                     rep
                    (
                        tuple
                        (
                            a
                            b
                        )
                    )
              Rfun
                (
                     rep
                    (
                        a
                    )
                     rep
                    (
                        b
                    )
                )
                     rep
                    (
                        arrow
                        
                          a
                          b
                    )
            )
            )
  type
  (
    equal
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Eq
                (
                )
                     equal
                    (
                        a
                        a
                    )
            )
            )
  let
  (
    rep_equal
      poly
       'a 'b
        arrow
        
           rep
          (
              a
          )
          arrow
          
             rep
            (
                b
            )
             option
            (
                 equal
                (
                    a
                    b
                )
            )
      a
      b
      (
      (
        case
        (
          ra
          (
            case
            (
              rb
              match
              (
                ra
                rb
              )
              (
                case
                (
                  (
                    Rint
                                        Rint
                                      )
                  Some
                    Eq
                                    )
                case
                (
                  (
                    Rbool
                                        Rbool
                                      )
                  Some
                    Eq
                                    )
                case
                (
                  (
                    Rpair
                      (
                        a1
                        a2
                      )
                    Rpair
                      (
                        b1
                        b2
                      )
                  )
                  match
                  rep_equal
                  (
                    
                      a1
                    
                      b1
                  )
                  (
                    case
                    (
                      None
                                            None
                                          )
                    case
                    (
                      Some
                        Eq
                                              match
                      rep_equal
                      (
                        
                          a2
                        
                          b2
                      )
                      (
                        case
                        (
                          None
                                                    None
                                                  )
                        case
                        (
                          Some
                            Eq
                                                      Some
                            Eq
                                                    )
                      )
                    )
                  )
                )
                case
                (
                  (
                    Rfun
                      (
                        a1
                        a2
                      )
                    Rfun
                      (
                        b1
                        b2
                      )
                  )
                  match
                  rep_equal
                  (
                    
                      a1
                    
                      b1
                  )
                  (
                    case
                    (
                      None
                                            None
                                          )
                    case
                    (
                      Some
                        Eq
                                              match
                      rep_equal
                      (
                        
                          a2
                        
                          b2
                      )
                      (
                        case
                        (
                          None
                                                    None
                                                  )
                        case
                        (
                          Some
                            Eq
                                                      Some
                            Eq
                                                    )
                      )
                    )
                  )
                )
                case
                (
                  _
                  None
                                  )
              )
            )
          )
        )
      )
      :
          arrow
          
             rep
            (
                 a
                (
                )
            )
            arrow
            
               rep
              (
                   b
                  (
                  )
              )
               option
              (
                   equal
                  (
                       a
                      (
                      )
                       b
                      (
                      )
                  )
              )
            )
  )
  type
  (
    assoc
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Assoc
                (
                     string
                    (
                    )
                     rep
                    (
                        a
                    )
                    a
                )
                     assoc
                    (
                    )
            )
            )
  let
  (
    assoc
      poly
       'a
        arrow
        
           string
          (
          )
          arrow
          
             rep
            (
                a
            )
            arrow
            
               list
              (
                   assoc
                  (
                  )
              )
              a
      a
      (
      (
        case
        (
          x
          (
            case
            (
              r
              (
                case
                (
                  []
                                    raise
                  (
                    
                      Not_found
                                        )
                )
                case
                (
                  ::
                    (
                      Assoc
                        (
                          x'
                          r'
                          v
                        )
                      env
                    )
                  ifthenelse
                  (
                    if
                    (
                      =
                      (
                        
                          x
                        
                          x'
                      )
                    )
                    then
                    (
                      match
                      rep_equal
                      (
                        
                          r
                        
                          r'
                      )
                      (
                        case
                        (
                          None
                                                    failwith
                          (
                            
                              ^
                              (
                                
                                  "Wrong type for "
                                
                                  x
                              )
                          )
                        )
                        case
                        (
                          Some
                            Eq
                                                      v
                        )
                      )
                    )
                    else
                    (
                        assoc
                        (
                          
                            x
                          
                            r
                          
                            env
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             string
            (
            )
            arrow
            
               rep
              (
                   a
                  (
                  )
              )
              arrow
              
                 list
                (
                     assoc
                    (
                    )
                )
                 a
                (
                )
            )
  )
  type
  (
    term
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Var
                (
                     string
                    (
                    )
                     rep
                    (
                        a
                    )
                )
                     term
                    (
                        a
                    )
              Abs
                (
                     string
                    (
                    )
                     rep
                    (
                        a
                    )
                     term
                    (
                        b
                    )
                )
                     term
                    (
                        arrow
                        
                          a
                          b
                    )
              Const
                (
                     int
                    (
                    )
                )
                     term
                    (
                         int
                        (
                        )
                    )
              Add
                (
                )
                     term
                    (
                        arrow
                        
                          tuple
                          (
                               int
                              (
                              )
                               int
                              (
                              )
                          )
                           int
                          (
                          )
                    )
              LT
                (
                )
                     term
                    (
                        arrow
                        
                          tuple
                          (
                               int
                              (
                              )
                               int
                              (
                              )
                          )
                           bool
                          (
                          )
                    )
              Ap
                (
                     term
                    (
                        arrow
                        
                          a
                          b
                    )
                     term
                    (
                        a
                    )
                )
                     term
                    (
                        b
                    )
              Pair
                (
                     term
                    (
                        a
                    )
                     term
                    (
                        b
                    )
                )
                     term
                    (
                        tuple
                        (
                            a
                            b
                        )
                    )
            )
            )
  let
  (
    eval_term
      poly
       'a
        arrow
        
           list
          (
               assoc
              (
              )
          )
          arrow
          
             term
            (
                a
            )
            a
      a
      (
      (
        case
        (
          env
          (
            case
            (
              Var
                (
                  x
                  r
                )
              assoc
              (
                
                  x
                
                  r
                
                  env
              )
            )
            case
            (
              Abs
                (
                  x
                  r
                  e
                )
              (
                case
                (
                  v
                  eval_term
                  (
                    
                      ::
                        (
                          Assoc
                            (
                              x
                              r
                              v
                            )
                          env
                        )
                    
                      e
                  )
                )
              )
            )
            case
            (
              Const
                x
              x
            )
            case
            (
              Add
                            (
                case
                (
                  (
                    x
                    y
                  )
                  +
                  (
                    
                      x
                    
                      y
                  )
                )
              )
            )
            case
            (
              LT
                            (
                case
                (
                  (
                    x
                    y
                  )
                  <
                  (
                    
                      x
                    
                      y
                  )
                )
              )
            )
            case
            (
              Ap
                (
                  f
                  x
                )
              eval_term
              (
                
                  env
                
                  f
                
                  eval_term
                  (
                    
                      env
                    
                      x
                  )
              )
            )
            case
            (
              Pair
                (
                  x
                  y
                )
              (
                eval_term
                (
                  
                    env
                  
                    x
                )
                eval_term
                (
                  
                    env
                  
                    y
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             list
            (
                 assoc
                (
                )
            )
            arrow
            
               term
              (
                   a
                  (
                  )
              )
               a
              (
              )
            )
  )
  let
  (
    ex3
      Abs
        (
          "x"
          Rint
                    Ap
            (
              Add
                            Pair
                (
                  Var
                    (
                      "x"
                      Rint
                                          )
                  Var
                    (
                      "x"
                      Rint
                                          )
                )
            )
        )
  )
  let
  (
    ex4
      Ap
        (
          ex3
          Const
            3
        )
  )
  let
  (
    v4
      eval_term
      (
        
          []
                  
          ex4
      )
  )
  type
  (
    rnil
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    rcons
      type
        params =
          (
            "_"
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    is_row
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Rnil
                (
                )
                     is_row
                    (
                         rnil
                        (
                        )
                    )
              Rcons
                (
                     is_row
                    (
                        c
                    )
                )
                     is_row
                    (
                         rcons
                        (
                            a
                            b
                            c
                        )
                    )
            )
            )
  type
  (
    lam
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Const
                (
                     int
                    (
                    )
                )
                     lam
                    (
                        e
                         int
                        (
                        )
                    )
              Var
                (
                    a
                )
                     lam
                    (
                         rcons
                        (
                            a
                            t
                            e
                        )
                        t
                    )
              Shift
                (
                     lam
                    (
                        e
                        t
                    )
                )
                     lam
                    (
                         rcons
                        (
                            a
                            q
                            e
                        )
                        t
                    )
              Abs
                (
                    a
                     lam
                    (
                         rcons
                        (
                            a
                            s
                            e
                        )
                        t
                    )
                )
                     lam
                    (
                        e
                        arrow
                        
                          s
                          t
                    )
              App
                (
                     lam
                    (
                        e
                        arrow
                        
                          s
                          t
                    )
                     lam
                    (
                        e
                        s
                    )
                )
                     lam
                    (
                        e
                        t
                    )
            )
            )
  type
  (
    x
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              X
                (
                )
                            )
            )
  type
  (
    y
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Y
                (
                )
                            )
            )
  let
  (
    ex1
      App
        (
          Var
            X
                      Shift
            Var
              Y
                      )
  )
  let
  (
    ex2
      Abs
        (
          X
                    Abs
            (
              Y
                            App
                (
                  Shift
                    Var
                      X
                                        Var
                    Y
                                    )
            )
        )
  )
  type
  (
    env
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Enil
                (
                )
                     env
                    (
                         rnil
                        (
                        )
                    )
              Econs
                (
                    a
                    t
                     env
                    (
                        e
                    )
                )
                     env
                    (
                         rcons
                        (
                            a
                            t
                            e
                        )
                    )
            )
            )
  let
  (
    eval_lam
      poly
       'e 't
        arrow
        
           env
          (
              e
          )
          arrow
          
             lam
            (
                e
                t
            )
            t
      e
      t
      (
      (
        case
        (
          env
          (
            case
            (
              m
              match
              (
                env
                m
              )
              (
                case
                (
                  (
                    _
                    Const
                      n
                  )
                  n
                )
                case
                (
                  (
                    Econs
                      (
                        _
                        v
                        r
                      )
                    Var
                      _
                  )
                  v
                )
                case
                (
                  (
                    Econs
                      (
                        _
                        _
                        r
                      )
                    Shift
                      e
                  )
                  eval_lam
                  (
                    
                      r
                    
                      e
                  )
                )
                case
                (
                  (
                    _
                    Abs
                      (
                        n
                        body
                      )
                  )
                  (
                    case
                    (
                      x
                      eval_lam
                      (
                        
                          Econs
                            (
                              n
                              x
                              env
                            )
                        
                          body
                      )
                    )
                  )
                )
                case
                (
                  (
                    _
                    App
                      (
                        f
                        x
                      )
                  )
                  eval_lam
                  (
                    
                      env
                    
                      f
                    
                      eval_lam
                      (
                        
                          env
                        
                          x
                      )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             env
            (
                 e
                (
                )
            )
            arrow
            
               lam
              (
                   e
                  (
                  )
                   t
                  (
                  )
              )
               t
              (
              )
            )
  )
  type
  (
    add
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Add
                (
                )
                            )
            )
  type
  (
    suc
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Suc
                (
                )
                            )
            )
  let
  (
    env0
      Econs
        (
          Zero
                    0
          Econs
            (
              Suc
                            succ
              Econs
                (
                  Add
                                    +
                  Enil
                                  )
            )
        )
  )
  let
  (
    _0
      (
      Var
        Zero
              :
           lam
          (
              
               int
              (
              )
          )
            )
  )
  let
  (
    suc
      (
        case
        (
          x
          App
            (
              Shift
                (
                Var
                  Suc
                                  :
                     lam
                    (
                        
                        arrow
                        
                           int
                          (
                          )
                           int
                          (
                          )
                    )
                                )
              x
            )
        )
      )
  )
  let
  (
    _1
      suc
      (
        
          _0
      )
  )
  let
  (
    _2
      suc
      (
        
          _1
      )
  )
  let
  (
    _3
      suc
      (
        
          _2
      )
  )
  let
  (
    add
      Shift
        Shift
          (
          Var
            Add
                      :
               lam
              (
                  
                  arrow
                  
                     int
                    (
                    )
                    arrow
                    
                       int
                      (
                      )
                       int
                      (
                      )
              )
                    )
  )
  let
  (
    double
      Abs
        (
          X
                    App
            (
              App
                (
                  Shift
                    add
                  Var
                    X
                                    )
              Var
                X
                            )
        )
  )
  let
  (
    ex3
      App
        (
          double
          _3
        )
  )
  let
  (
    v3
      eval_lam
      (
        
          env0
        
          ex3
      )
  )
  type
  (
    rep
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              I
                (
                )
                     rep
                    (
                         int
                        (
                        )
                    )
              Ar
                (
                     rep
                    (
                        a
                    )
                     rep
                    (
                        b
                    )
                )
                     rep
                    (
                        arrow
                        
                          a
                          b
                    )
            )
            )
  let
  (
    compare
      poly
       'a 'b
        arrow
        
           rep
          (
              a
          )
          arrow
          
             rep
            (
                b
            )
             sum
            (
                 string
                (
                )
                 equal
                (
                    a
                    b
                )
            )
      a
      b
      (
      (
        case
        (
          a
          (
            case
            (
              b
              match
              (
                a
                b
              )
              (
                case
                (
                  (
                    I
                                        I
                                      )
                  Inr
                    Eq
                                    )
                case
                (
                  (
                    Ar
                      (
                        x
                        y
                      )
                    Ar
                      (
                        s
                        t
                      )
                  )
                  match
                  compare
                  (
                    
                      x
                    
                      s
                  )
                  (
                    case
                    (
                      alias e
                      (
                        Inl
                          _
                      )
                      e
                    )
                    case
                    (
                      Inr
                        Eq
                                              match
                      compare
                      (
                        
                          y
                        
                          t
                      )
                      (
                        case
                        (
                          alias e
                          (
                            Inl
                              _
                          )
                          e
                        )
                        case
                        (
                          alias e
                          (
                            Inr
                              Eq
                                                        )
                          e
                        )
                      )
                    )
                  )
                )
                case
                (
                  (
                    I
                                        Ar
                      _
                  )
                  Inl
                    "I <> Ar _"
                )
                case
                (
                  (
                    Ar
                      _
                    I
                                      )
                  Inl
                    "Ar _ <> I"
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             rep
            (
                 a
                (
                )
            )
            arrow
            
               rep
              (
                   b
                  (
                  )
              )
               sum
              (
                   string
                  (
                  )
                   equal
                  (
                       a
                      (
                      )
                       b
                      (
                      )
                  )
              )
            )
  )
  type
  (
    term
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              C
                (
                     int
                    (
                    )
                )
                              Ab
                (
                     string
                    (
                    )
                     rep
                    (
                        a
                    )
                     term
                    (
                    )
                )
                     term
                    (
                    )
              Ap
                (
                     term
                    (
                    )
                     term
                    (
                    )
                )
                              V
                (
                     string
                    (
                    )
                )
                            )
            )
  type
  (
    ctx
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Cnil
                (
                )
                     ctx
                    (
                         rnil
                        (
                        )
                    )
              Ccons
                (
                    t
                     string
                    (
                    )
                     rep
                    (
                        x
                    )
                     ctx
                    (
                        e
                    )
                )
                     ctx
                    (
                         rcons
                        (
                            t
                            x
                            e
                        )
                    )
            )
            )
  type
  (
    checked
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Cerror
                (
                     string
                    (
                    )
                )
                              Cok
                (
                     lam
                    (
                        e
                        t
                    )
                     rep
                    (
                        t
                    )
                )
                     checked
                    (
                        e
                    )
            )
            )
  let
  (
    lookup
      poly
       'e
        arrow
        
           string
          (
          )
          arrow
          
             ctx
            (
                e
            )
             checked
            (
                e
            )
      e
      (
      (
        case
        (
          name
          (
            case
            (
              ctx
              match
              ctx
              (
                case
                (
                  Cnil
                                    Cerror
                    ^
                    (
                      
                        "Name not found: "
                      
                        name
                    )
                )
                case
                (
                  Ccons
                    (
                      l
                      s
                      t
                      rs
                    )
                  ifthenelse
                  (
                    if
                    (
                      =
                      (
                        
                          s
                        
                          name
                      )
                    )
                    then
                    (
                      Cok
                        (
                          Var
                            l
                          t
                        )
                    )
                    else
                    (
                        match
                        lookup
                        (
                          
                            name
                          
                            rs
                        )
                        (
                          case
                          (
                            Cerror
                              m
                            Cerror
                              m
                          )
                          case
                          (
                            Cok
                              (
                                v
                                t
                              )
                            Cok
                              (
                                Shift
                                  v
                                t
                              )
                          )
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             string
            (
            )
            arrow
            
               ctx
              (
                   e
                  (
                  )
              )
               checked
              (
                   e
                  (
                  )
              )
            )
  )
  let
  (
    tc
      poly
       'n 'e
        arrow
        
           nat
          (
              n
          )
          arrow
          
             ctx
            (
                e
            )
            arrow
            
               term
              (
              )
               checked
              (
                  e
              )
      n
      e
      (
      (
        case
        (
          n
          (
            case
            (
              ctx
              (
                case
                (
                  t
                  match
                  t
                  (
                    case
                    (
                      V
                        s
                      lookup
                      (
                        
                          s
                        
                          ctx
                      )
                    )
                    case
                    (
                      Ap
                        (
                          f
                          x
                        )
                      match
                      tc
                      (
                        
                          n
                        
                          ctx
                        
                          f
                      )
                      (
                        case
                        (
                          alias e
                          (
                            Cerror
                              _
                          )
                          e
                        )
                        case
                        (
                          Cok
                            (
                              f'
                              ft
                            )
                          match
                          tc
                          (
                            
                              n
                            
                              ctx
                            
                              x
                          )
                          (
                            case
                            (
                              alias e
                              (
                                Cerror
                                  _
                              )
                              e
                            )
                            case
                            (
                              Cok
                                (
                                  x'
                                  xt
                                )
                              match
                              ft
                              (
                                case
                                (
                                  Ar
                                    (
                                      a
                                      b
                                    )
                                  match
                                  compare
                                  (
                                    
                                      a
                                    
                                      xt
                                  )
                                  (
                                    case
                                    (
                                      Inl
                                        s
                                      Cerror
                                        s
                                    )
                                    case
                                    (
                                      Inr
                                        Eq
                                                                              Cok
                                        (
                                          App
                                            (
                                              f'
                                              x'
                                            )
                                          b
                                        )
                                    )
                                  )
                                )
                                case
                                (
                                  _
                                  Cerror
                                    "Non fun in Ap"
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    case
                    (
                      Ab
                        (
                          s
                          t
                          body
                        )
                      match
                      tc
                      (
                        
                          NS
                            n
                        
                          Ccons
                            (
                              n
                              s
                              t
                              ctx
                            )
                        
                          body
                      )
                      (
                        case
                        (
                          alias e
                          (
                            Cerror
                              _
                          )
                          e
                        )
                        case
                        (
                          Cok
                            (
                              body'
                              et
                            )
                          Cok
                            (
                              Abs
                                (
                                  n
                                  body'
                                )
                              Ar
                                (
                                  t
                                  et
                                )
                            )
                        )
                      )
                    )
                    case
                    (
                      C
                        m
                      Cok
                        (
                          Const
                            m
                          I
                                                  )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             nat
            (
                 n
                (
                )
            )
            arrow
            
               ctx
              (
                   e
                  (
                  )
              )
              arrow
              
                 term
                (
                )
                 checked
                (
                     e
                    (
                    )
                )
            )
  )
  let
  (
    ctx0
      Ccons
        (
          Zero
                    "0"
          I
                    Ccons
            (
              Suc
                            "S"
              Ar
                (
                  I
                                    I
                                  )
              Ccons
                (
                  Add
                                    "+"
                  Ar
                    (
                      I
                                            Ar
                        (
                          I
                                                    I
                                                  )
                    )
                  Cnil
                                  )
            )
        )
  )
  let
  (
    ex1
      Ab
        (
          "x"
          I
                    Ap
            (
              Ap
                (
                  V
                    "+"
                  V
                    "x"
                )
              V
                "x"
            )
        )
  )
  let
  (
    c1
      tc
      (
        
          NZ
                  
          ctx0
        
          ex1
      )
  )
  let
  (
    ex2
      Ap
        (
          ex1
          C
            3
        )
  )
  let
  (
    c2
      tc
      (
        
          NZ
                  
          ctx0
        
          ex2
      )
  )
  let
  (
    eval_checked
      (
        case
        (
          env
          (
            case
            (
              Cerror
                s
              failwith
              (
                
                  s
              )
            )
            case
            (
              Cok
                (
                  e
                  I
                                  )
              (
              eval_lam
              (
                
                  env
                
                  e
              )
              :
                   int
                  (
                  )
                            )
            )
            case
            (
              Cok
                _
              failwith
              (
                
                  "Can only evaluate expressions of type I"
              )
            )
          )
        )
      )
  )
  let
  (
    v2
      eval_checked
      (
        
          env0
        
          c2
      )
  )
  type
  (
    pexp
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    pval
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    mode
      type
        params =
          (
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Pexp
                (
                )
                     mode
                    (
                         pexp
                        (
                        )
                    )
              Pval
                (
                )
                     mode
                    (
                         pval
                        (
                        )
                    )
            )
            )
  type
  (
    tarr
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    tint
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
            )
  type
  (
    rel
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              IntR
                (
                )
                     rel
                    (
                         tint
                        (
                        )
                         int
                        (
                        )
                    )
              IntTo
                (
                     rel
                    (
                        b
                        s
                    )
                )
                     rel
                    (
                         tarr
                        (
                             tint
                            (
                            )
                            b
                        )
                        arrow
                        
                           int
                          (
                          )
                          s
                    )
            )
            )
  type
  (
    lam
      type
        params =
          (
            "_"
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Const
                (
                     rel
                    (
                        a
                        b
                    )
                    b
                )
                     lam
                    (
                         pval
                        (
                        )
                        env
                        a
                    )
              Var
                (
                    a
                )
                     lam
                    (
                         pval
                        (
                        )
                         rcons
                        (
                            a
                            t
                            e
                        )
                        t
                    )
              Shift
                (
                     lam
                    (
                        m
                        e
                        t
                    )
                )
                     lam
                    (
                        m
                         rcons
                        (
                            a
                            q
                            e
                        )
                        t
                    )
              Lam
                (
                    a
                     lam
                    (
                        m
                         rcons
                        (
                            a
                            s
                            e
                        )
                        t
                    )
                )
                     lam
                    (
                         pval
                        (
                        )
                        e
                         tarr
                        (
                            s
                            t
                        )
                    )
              App
                (
                     lam
                    (
                        m1
                        e
                         tarr
                        (
                            s
                            t
                        )
                    )
                     lam
                    (
                        m2
                        e
                        s
                    )
                )
                     lam
                    (
                         pexp
                        (
                        )
                        e
                        t
                    )
            )
            )
  let
  (
    ex1
      App
        (
          Lam
            (
              X
                            Var
                X
                            )
          Const
            (
              IntR
                            3
            )
        )
  )
  let
  (
    mode
      poly
       'm 'e 't
        arrow
        
           lam
          (
              m
              e
              t
          )
           mode
          (
              m
          )
      m
      e
      t
      (
      (
        case
        (
          Lam
            (
              v
              body
            )
          Pval
                  )
        case
        (
          Var
            v
          Pval
                  )
        case
        (
          Const
            (
              r
              v
            )
          Pval
                  )
        case
        (
          Shift
            e
          mode
          (
            
              e
          )
        )
        case
        (
          App
            _
          Pexp
                  )
      )
      :
          arrow
          
             lam
            (
                 m
                (
                )
                 e
                (
                )
                 t
                (
                )
            )
             mode
            (
                 m
                (
                )
            )
            )
  )
  type
  (
    sub
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Id
                (
                )
                     sub
                    (
                        r
                        r
                    )
              Bind
                (
                    t
                     lam
                    (
                        m
                        r2
                        x
                    )
                     sub
                    (
                        r
                        r2
                    )
                )
                     sub
                    (
                         rcons
                        (
                            t
                            x
                            r
                        )
                        r2
                    )
              Push
                (
                     sub
                    (
                        r1
                        r2
                    )
                )
                     sub
                    (
                         rcons
                        (
                            a
                            b
                            r1
                        )
                         rcons
                        (
                            a
                            b
                            r2
                        )
                    )
            )
            )
  type
  (
    lam'
      type
        params =
          (
            "_"
            "_"
          )
        cstrs =
          (
          )
        kind =
            (
              Ex
                (
                     lam
                    (
                        m
                        s
                        t
                    )
                )
                     lam'
                    (
                        s
                        t
                    )
            )
            )
  let
  (
    subst
      poly
       'm1 'r 't 's
        arrow
        
           lam
          (
              m1
              r
              t
          )
          arrow
          
             sub
            (
                r
                s
            )
             lam'
            (
                s
                t
            )
      m1
      r
      t
      s
      (
      (
        case
        (
          t
          (
            case
            (
              s
              match
              (
                t
                s
              )
              (
                case
                (
                  (
                    _
                    Id
                                      )
                  Ex
                    t
                )
                case
                (
                  (
                    Const
                      (
                        r
                        c
                      )
                    sub
                  )
                  Ex
                    Const
                      (
                        r
                        c
                      )
                )
                case
                (
                  (
                    Var
                      v
                    Bind
                      (
                        x
                        e
                        r
                      )
                  )
                  Ex
                    e
                )
                case
                (
                  (
                    Var
                      v
                    Push
                      sub
                  )
                  Ex
                    Var
                      v
                )
                case
                (
                  (
                    Shift
                      e
                    Bind
                      (
                        _
                        _
                        r
                      )
                  )
                  subst
                  (
                    
                      e
                    
                      r
                  )
                )
                case
                (
                  (
                    Shift
                      e
                    Push
                      sub
                  )
                  match
                  subst
                  (
                    
                      e
                    
                      sub
                  )
                  (
                    case
                    (
                      Ex
                        a
                      Ex
                        Shift
                          a
                    )
                  )
                )
                case
                (
                  (
                    App
                      (
                        f
                        x
                      )
                    sub
                  )
                  match
                  (
                    subst
                    (
                      
                        f
                      
                        sub
                    )
                    subst
                    (
                      
                        x
                      
                        sub
                    )
                  )
                  (
                    case
                    (
                      (
                        Ex
                          g
                        Ex
                          y
                      )
                      Ex
                        App
                          (
                            g
                            y
                          )
                    )
                  )
                )
                case
                (
                  (
                    Lam
                      (
                        v
                        x
                      )
                    sub
                  )
                  match
                  subst
                  (
                    
                      x
                    
                      Push
                        sub
                  )
                  (
                    case
                    (
                      Ex
                        body
                      Ex
                        Lam
                          (
                            v
                            body
                          )
                    )
                  )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             lam
            (
                 m1
                (
                )
                 r
                (
                )
                 t
                (
                )
            )
            arrow
            
               sub
              (
                   r
                  (
                  )
                   s
                  (
                  )
              )
               lam'
              (
                   s
                  (
                  )
                   t
                  (
                  )
              )
            )
  )
  type
  (
    closed
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
          
               rnil
              (
              )
  )
  type
  (
    rlam
      type
        params =
          (
            a
          )
        cstrs =
          (
          )
        kind =
          
               sum
              (
                   lam
                  (
                       pexp
                      (
                      )
                       closed
                      (
                      )
                      a
                  )
                   lam
                  (
                       pval
                      (
                      )
                       closed
                      (
                      )
                      a
                  )
              )
  )
  let
  (
    rule
      poly
       'a 'b
        arrow
        
           lam
          (
               pval
              (
              )
               closed
              (
              )
               tarr
              (
                  a
                  b
              )
          )
          arrow
          
             lam
            (
                 pval
                (
                )
                 closed
                (
                )
                a
            )
             rlam
            (
                b
            )
      a
      b
      (
      (
        case
        (
          v1
          (
            case
            (
              v2
              match
              (
                v1
                v2
              )
              (
                case
                (
                  (
                    Lam
                      (
                        x
                        body
                      )
                    v
                  )
                  match
                  subst
                  (
                    
                      body
                    
                      Bind
                        (
                          x
                          v
                          Id
                                                  )
                  )
                  (
                    case
                    (
                      Ex
                        term
                      match
                      mode
                      (
                        
                          term
                      )
                      (
                        case
                        (
                          Pexp
                                                    Inl
                            term
                        )
                        case
                        (
                          Pval
                                                    Inr
                            term
                        )
                      )
                    )
                  )
                )
                case
                (
                  (
                    Const
                      (
                        IntTo
                          b
                        f
                      )
                    Const
                      (
                        IntR
                                                x
                      )
                  )
                  Inr
                    Const
                      (
                        b
                        f
                        (
                          
                            x
                        )
                      )
                )
              )
            )
          )
        )
      )
      :
          arrow
          
             lam
            (
                 pval
                (
                )
                 closed
                (
                )
                 tarr
                (
                     a
                    (
                    )
                     b
                    (
                    )
                )
            )
            arrow
            
               lam
              (
                   pval
                  (
                  )
                   closed
                  (
                  )
                   a
                  (
                  )
              )
               rlam
              (
                   b
                  (
                  )
              )
            )
  )
  let
  (
    onestep
      poly
       'm 't
        arrow
        
           lam
          (
              m
               closed
              (
              )
              t
          )
           rlam
          (
              t
          )
      m
      t
      (
      (
        case
        (
          Lam
            (
              v
              body
            )
          Inr
            Lam
              (
                v
                body
              )
        )
        case
        (
          Const
            (
              r
              v
            )
          Inr
            Const
              (
                r
                v
              )
        )
        case
        (
          App
            (
              e1
              e2
            )
          match
          (
            mode
            (
              
                e1
            )
            mode
            (
              
                e2
            )
          )
          (
            case
            (
              (
                Pexp
                                _
              )
              match
              onestep
              (
                
                  e1
              )
              (
                case
                (
                  Inl
                    e
                  Inl
                    App
                      (
                        e
                        e2
                      )
                )
                case
                (
                  Inr
                    v
                  Inl
                    App
                      (
                        v
                        e2
                      )
                )
              )
            )
            case
            (
              (
                Pval
                                Pexp
                              )
              match
              onestep
              (
                
                  e2
              )
              (
                case
                (
                  Inl
                    e
                  Inl
                    App
                      (
                        e1
                        e
                      )
                )
                case
                (
                  Inr
                    v
                  Inl
                    App
                      (
                        e1
                        v
                      )
                )
              )
            )
            case
            (
              (
                Pval
                                Pval
                              )
              rule
              (
                
                  e1
                
                  e2
              )
            )
          )
        )
      )
      :
          arrow
          
             lam
            (
                 m
                (
                )
                 closed
                (
                )
                 t
                (
                )
            )
             rlam
            (
                 t
                (
                )
            )
            )
  )
)

