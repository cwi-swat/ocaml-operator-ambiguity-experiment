(
  type
  (
    term
      type
        params =
          (
          )
        cstrs =
          (
          )
        kind =
            (
              Var
                (
                     int
                    (
                    )
                )
                              Term
                (
                     string
                    (
                    )
                     list
                    (
                         term
                        (
                        )
                    )
                )
                            )
            )
  let
  (
    union
      (
        case
        (
          l1
          (
            case
            (
              l2
              match
              l1
              (
                case
                (
                  []
                                    l2
                )
                case
                (
                  ::
                    (
                      a
                      r
                    )
                  ifthenelse
                  (
                    if
                    (
                      List.mem
                      (
                          a
                          l2
                      )
                    )
                    then
                    (
                      union
                      (
                          r
                          l2
                      )
                    )
                    else
                    (
                        ::
                          (
                            a
                            union
                            (
                                r
                                l2
                            )
                          )
                    )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    vars
      (
        case
        (
          Var
            n
          ::
            (
              n
              []
                          )
        )
        case
        (
          Term
            (
              _
              l
            )
          vars_of_list
          (
              l
          )
        )
      )
    vars_of_list
      (
        case
        (
          []
                    []
                  )
        case
        (
          ::
            (
              t
              r
            )
          union
          (
              vars
              (
                  t
              )
              vars_of_list
              (
                  r
              )
          )
        )
      )
  )
  let
  (
    substitute
      (
        case
        (
          subst
          (
            case
            (
              Term
                (
                  oper
                  sons
                )
              Term
                (
                  oper
                  List.map
                  (
                      substitute
                      (
                          subst
                      )
                      sons
                  )
                )
            )
            case
            (
              alias t
              (
                Var
                  n
              )
              try
              List.assoc
              (
                  n
                  subst
              )
              (
                case
                (
                  Not_found
                                    t
                )
              )
            )
          )
        )
      )
  )
  let
  (
    replace
      (
        case
        (
          m
          (
            case
            (
              u
              (
                case
                (
                  n
                  match
                  (
                    u
                    m
                  )
                  (
                    case
                    (
                      (
                        []
                                                _
                      )
                      n
                    )
                    case
                    (
                      (
                        ::
                          (
                            i
                            u
                          )
                        Term
                          (
                            oper
                            sons
                          )
                      )
                      Term
                        (
                          oper
                          replace_nth
                          (
                              i
                              sons
                              u
                              n
                          )
                        )
                    )
                    case
                    (
                      _
                      failwith
                      (
                          "replace"
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    replace_nth
      (
        case
        (
          i
          (
            case
            (
              sons
              (
                case
                (
                  u
                  (
                    case
                    (
                      n
                      match
                      sons
                      (
                        case
                        (
                          ::
                            (
                              s
                              r
                            )
                          ifthenelse
                          (
                            if
                            (
                              =
                              (
                                  i
                                  1
                              )
                            )
                            then
                            (
                              ::
                                (
                                  replace
                                  (
                                      s
                                      u
                                      n
                                  )
                                  r
                                )
                            )
                            else
                            (
                                ::
                                  (
                                    s
                                    replace_nth
                                    (
                                        -
                                        (
                                            i
                                            1
                                        )
                                        r
                                        u
                                        n
                                    )
                                  )
                            )
                          )
                        )
                        case
                        (
                          []
                                                    failwith
                          (
                              "replace_nth"
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    matching
      (
        case
        (
          term1
          (
            case
            (
              term2
              let
              (
                (
                  match_rec
                    (
                      case
                      (
                        subst
                        (
                          case
                          (
                            t1
                            (
                              case
                              (
                                t2
                                match
                                (
                                  t1
                                  t2
                                )
                                (
                                  case
                                  (
                                    (
                                      Var
                                        v
                                      _
                                    )
                                    ifthenelse
                                    (
                                      if
                                      (
                                        List.mem_assoc
                                        (
                                            v
                                            subst
                                        )
                                      )
                                      then
                                      (
                                        ifthenelse
                                        (
                                          if
                                          (
                                            =
                                            (
                                                t2
                                                List.assoc
                                                (
                                                    v
                                                    subst
                                                )
                                            )
                                          )
                                          then
                                          (
                                            subst
                                          )
                                          else
                                          (
                                              failwith
                                              (
                                                  "matching"
                                              )
                                          )
                                        )
                                      )
                                      else
                                      (
                                          ::
                                            (
                                              (
                                                v
                                                t2
                                              )
                                              subst
                                            )
                                      )
                                    )
                                  )
                                  case
                                  (
                                    (
                                      Term
                                        (
                                          op1
                                          sons1
                                        )
                                      Term
                                        (
                                          op2
                                          sons2
                                        )
                                    )
                                    ifthenelse
                                    (
                                      if
                                      (
                                        =
                                        (
                                            op1
                                            op2
                                        )
                                      )
                                      then
                                      (
                                        List.fold_left2
                                        (
                                            match_rec
                                            subst
                                            sons1
                                            sons2
                                        )
                                      )
                                      else
                                      (
                                          failwith
                                          (
                                              "matching"
                                          )
                                      )
                                    )
                                  )
                                  case
                                  (
                                    _
                                    failwith
                                    (
                                        "matching"
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                )
              in
                match_rec
                (
                    []
                                        term1
                    term2
                )
              )
            )
          )
        )
      )
  )
  let
  (
    compsubst
      (
        case
        (
          subst1
          (
            case
            (
              subst2
              @
              (
                  List.map
                  (
                      (
                        case
                        (
                          (
                            v
                            t
                          )
                          (
                            v
                            substitute
                            (
                                subst1
                                t
                            )
                          )
                        )
                      )
                      subst2
                  )
                  subst1
              )
            )
          )
        )
      )
  )
  let
  (
    occurs
      (
        case
        (
          n
          (
            case
            (
              Var
                m
              =
              (
                  m
                  n
              )
            )
            case
            (
              Term
                (
                  _
                  sons
                )
              List.exists
              (
                  occurs
                  (
                      n
                  )
                  sons
              )
            )
          )
        )
      )
  )
  let
  (
    unify
      (
        case
        (
          term1
          (
            case
            (
              term2
              match
              (
                term1
                term2
              )
              (
                case
                (
                  (
                    Var
                      n1
                    _
                  )
                  ifthenelse
                  (
                    if
                    (
                      =
                      (
                          term1
                          term2
                      )
                    )
                    then
                    (
                      []
                                          )
                    else
                    (
                        ifthenelse
                        (
                          if
                          (
                            occurs
                            (
                                n1
                                term2
                            )
                          )
                          then
                          (
                            failwith
                            (
                                "unify"
                            )
                          )
                          else
                          (
                              ::
                                (
                                  (
                                    n1
                                    term2
                                  )
                                  []
                                                                  )
                          )
                        )
                    )
                  )
                )
                case
                (
                  (
                    term1
                    Var
                      n2
                  )
                  ifthenelse
                  (
                    if
                    (
                      occurs
                      (
                          n2
                          term1
                      )
                    )
                    then
                    (
                      failwith
                      (
                          "unify"
                      )
                    )
                    else
                    (
                        ::
                          (
                            (
                              n2
                              term1
                            )
                            []
                                                      )
                    )
                  )
                )
                case
                (
                  (
                    Term
                      (
                        op1
                        sons1
                      )
                    Term
                      (
                        op2
                        sons2
                      )
                  )
                  ifthenelse
                  (
                    if
                    (
                      =
                      (
                          op1
                          op2
                      )
                    )
                    then
                    (
                      List.fold_left2
                      (
                          (
                            case
                            (
                              s
                              (
                                case
                                (
                                  t1
                                  (
                                    case
                                    (
                                      t2
                                      compsubst
                                      (
                                          unify
                                          (
                                              substitute
                                              (
                                                  s
                                                  t1
                                              )
                                              substitute
                                              (
                                                  s
                                                  t2
                                              )
                                          )
                                          s
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          []
                                                    sons1
                          sons2
                      )
                    )
                    else
                    (
                        failwith
                        (
                            "unify"
                        )
                    )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    infixes
      ::
        (
          "+"
          ::
            (
              "*"
              []
                          )
        )
  )
  let
  (
    pretty_term
      (
        case
        (
          Var
            n
          sequence
          (
            print_string
            (
                "v"
            )
          ;
            print_int
            (
                n
            )
          )
        )
        case
        (
          Term
            (
              oper
              sons
            )
          ifthenelse
          (
            if
            (
              List.mem
              (
                  oper
                  infixes
              )
            )
            then
            (
              match
              sons
              (
                case
                (
                  ::
                    (
                      s1
                      ::
                        (
                          s2
                          []
                                                  )
                    )
                  sequence
                  (
                    pretty_close
                    (
                        s1
                    )
                  ;
                    sequence
                    (
                      print_string
                      (
                          oper
                      )
                    ;
                      pretty_close
                      (
                          s2
                      )
                    )
                  )
                )
                case
                (
                  _
                  failwith
                  (
                      "pretty_term : infix arity <> 2"
                  )
                )
              )
            )
            else
            (
                sequence
                (
                  print_string
                  (
                      oper
                  )
                ;
                  match
                  sons
                  (
                    case
                    (
                      []
                                            ()
                                          )
                    case
                    (
                      ::
                        (
                          t
                          lt
                        )
                      sequence
                      (
                        print_string
                        (
                            "("
                        )
                      ;
                        sequence
                        (
                          pretty_term
                          (
                              t
                          )
                        ;
                          sequence
                          (
                            List.iter
                            (
                                (
                                  case
                                  (
                                    t
                                    sequence
                                    (
                                      print_string
                                      (
                                          ","
                                      )
                                    ;
                                      pretty_term
                                      (
                                          t
                                      )
                                    )
                                  )
                                )
                                lt
                            )
                          ;
                            print_string
                            (
                                ")"
                            )
                          )
                        )
                      )
                    )
                  )
                )
            )
          )
        )
      )
    pretty_close
      (
        case
        (
          alias m
          (
            Term
              (
                oper
                _
              )
          )
          ifthenelse
          (
            if
            (
              List.mem
              (
                  oper
                  infixes
              )
            )
            then
            (
              sequence
              (
                print_string
                (
                    "("
                )
              ;
                sequence
                (
                  pretty_term
                  (
                      m
                  )
                ;
                  print_string
                  (
                      ")"
                  )
                )
              )
            )
            else
            (
                pretty_term
                (
                    m
                )
            )
          )
        )
        case
        (
          m
          pretty_term
          (
              m
          )
        )
      )
  )
)
