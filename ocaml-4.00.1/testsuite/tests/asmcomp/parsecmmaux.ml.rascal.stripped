(
  type
  (  						
     error
     type
     params=
     (
     )
     cstrs =
     (
     )
     kind =
     (
     Unbound
     (
      string
      (
      )
     )
     )
  )
  exception Error
  (
  error
  (
  )
  )
  let
  (
    tbl_ident
    (
    Hashtbl.create
    (
        57
    )
    :
    <["typexprConstr2"("typeConstr"([],"string")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],"typexprConstr2"("typeConstr"(["extendedModulePath1"([],"Ident")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"typeConstr"(["extendedModulePath1"([],"Hashtbl")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
    )
  )
  let
  (
    bind_ident
   (
    case
        (
    	  s
         let
         (
          (
            id
            Ident.create
            (
                s
            ) 
          )
         in
           sequence
           (
             Hashtbl.add
             (
                 tbl_ident
                 s
                 id
             )
           ;
             id
           )
         )
        )
   )
  )
  let
  (
    find_ident
   (
    case
        (
    	  s
         try
         Hashtbl.find
         (
             tbl_ident
             s
         )
         (
         case
         (
           Not_found
           raise
           (
                Error
                 Unbound
                 s
           )
         ) 
         )
        )
   )
  )
  let
  (
    unbind_ident
   (
    case
        (
    	  id
         Hashtbl.remove
         (
             tbl_ident
             Ident.name
             (
                 id
             )
         )
        )
   )
  )
  let
  (
    report_error
    (
     case
     (
       Unbound
       s
       sequence
       (
         prerr_string
         (
             "Unbound identifier "
         )
       ;
         sequence
         (
           prerr_string
           (
               s
           )
         ;
           prerr_endline
           (
               "."
           )
         )
       )
     ) 
    )
  )
)
