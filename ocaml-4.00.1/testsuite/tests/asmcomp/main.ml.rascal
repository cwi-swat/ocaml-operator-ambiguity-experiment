
(
    								 
  open Clflags
                                     
  let
  (
   
    compile_file
   (
    case
        (
    	  filename
         
         sequence
         (
           Compilenv.reset
           (
               "test"
           )
         ;
           
           sequence
           (
             Emit.begin_assembly
             (
                 ()
             )
           ;
             
             let
             (
              (
                 									  
               
                ic
                open_in
                (
                    filename
                ) 
               							    		   
                 									  
              )
             in
               
               let
               (
                (
                   									  
                 
                  lb
                  Lexing.from_channel
                  (
                      ic
                  ) 
                 							    		   
                   									  
                )
               in
                 
                 try
                 whileloop 
                 (
                     true
                     Asmgen.compile_phrase
                     (
                         Format.std_formatter
                         Parsecmm.phrase
                         (
                             Lexcmm.token
                             lb
                         )
                     )
                 )
                 (
                 
                 case
                 (
                   End_of_file
                   
                   
                   sequence
                   (
                     close_in
                     (
                         ic
                     )
                   ;
                     Emit.end_assembly
                     (
                         ()
                     )
                   )
                       							
                 ) 
                 	        											 
                   
                   case
                   (
                    
                    Lexcmm.Error
                    msg
                    									  
                    
                    
                    sequence
                    (
                      close_in
                      (
                          ic
                      )
                    ;
                      Lexcmm.report_error
                      (
                          lb
                          msg
                      )
                    )
                        							
                   )
                   													    
                 	        											 
                   
                   case
                   (
                    Parsing.Parse_error
                    
                    
                    sequence
                    (
                      close_in
                      (
                          ic
                      )
                    ;
                      
                      sequence
                      (
                        prerr_string
                        (
                            "Syntax error near character "
                        )
                      ;
                        
                        sequence
                        (
                          prerr_int
                          (
                              Lexing.lexeme_start
                              (
                                  lb
                              )
                          )
                        ;
                          prerr_newline
                          (
                              ()
                          )
                        )
                            							
                      )
                          							
                    )
                        							
                   )
                   													    
                 	        											 
                   
                   case
                   (
                    
                    Parsecmmaux.Error
                    msg
                    									  
                    
                    
                    sequence
                    (
                      close_in
                      (
                          ic
                      )
                    ;
                      Parsecmmaux.report_error
                      (
                          msg
                      )
                    )
                        							
                   )
                   													    
                 	        											 
                   
                   case
                   (
                    x
                    
                    
                    sequence
                    (
                      close_in
                      (
                          ic
                      )
                    ;
                      raise
                      (
                          x
                      )
                    )
                        							
                   )
                   													    
                 	        											 
                 	        											 
                 )
                     							   
               )
                   									
             )
                 									
           )
               							
         )
             							
        )
   )
       		    
  )
                                     
  let
  (
   
    usage
    "Usage: codegen <options> <files>\noptions are:" 
   							    		    
  )
                                     
  let
  (
   
    main
   (
    case
        (
    	  ()
         Arg.parse
         (
             ::
              (
              
              (
                  					 "-dcmm"
                  					 
              	
              	 Arg.Set
              	 dump_cmm
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dsel"
                  					 
              	
              	 Arg.Set
              	 dump_selection
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dlive"
                  					 
              	
              	 Arg.Unit
              	 (
              	  
              	  case
              	  (
              	  ()
              	  
              	  
              	  sequence
              	  (
              	    :=
              	    (
              	        dump_live
              	        true
              	    )
              	  ;
              	    :=
              	    (
              	        Printmach.print_live
              	        true
              	    )
              	  )
              	      							
              	  )
              	  													 
              	 )
              	    						  
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dspill"
                  					 
              	
              	 Arg.Set
              	 dump_spill
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dsplit"
                  					 
              	
              	 Arg.Set
              	 dump_split
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dinterf"
                  					 
              	
              	 Arg.Set
              	 dump_interf
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dprefer"
                  					 
              	
              	 Arg.Set
              	 dump_prefer
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dalloc"
                  					 
              	
              	 Arg.Set
              	 dump_regalloc
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dreload"
                  					 
              	
              	 Arg.Set
              	 dump_reload
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dscheduling"
                  					 
              	
              	 Arg.Set
              	 dump_scheduling
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              ::
              (
              
              (
                  					 "-dlinear"
                  					 
              	
              	 Arg.Set
              	 dump_linear
              	    								 
                  					 
              	""
                  					 
              )
                  					 
              []
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
              ) 
                 						  
             compile_file
             usage
         )
        )
   )
       		    
  )
                                     
  
   
   
   sequence
   (
     main
     (
         ()
     )
   ;
     exit
     (
         0
     )
   )
       							 
  							    		    
                                     
)