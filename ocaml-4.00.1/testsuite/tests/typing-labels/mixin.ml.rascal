
(
    								 
  open StdLabels
                                     
  open MoreLabels
                                     
  module  Subst
   
       								  
    Map.Make
       							     
   (
   struct
   (
   							  
   type
   (  						
       							    	 
      t
      type
      params=
      (
      
      )
      cstrs =
      (
      )
      kind =
      
      string
      (
      )
      								  
      
      														  
      														 
     											   
   								        
   )
   							  
   let
   (
    
     compare
     compare 
    							    		    
   )
   							  
   )
   							  
   )
   								   
  										    
                                     
  module  Names
   
       								  
    Set.Make
       							     
   (
   struct
   (
   							  
   type
   (  						
       							    	 
      t
      type
      params=
      (
      
      )
      cstrs =
      (
      )
      kind =
      
      string
      (
      )
      								  
      
      														  
      														 
     											   
   								        
   )
   							  
   let
   (
    
     compare
     compare 
    							    		    
   )
   							  
   )
   							  
   )
   								   
  										    
                                     
  type
  (  						
      							    	 
     var
     type
     params=
     (
     
     )
     cstrs =
     (
     )
     kind =
     <[],[<"Var",["typexprConstr2"("typeConstr"([],"string")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]]>]>
     
     														  
     														 
    											   
  								        
  )
                                     
  let
  (
   
    subst_var
   (
    case
        (
    	  subst
         (
          
          case
          (
            patternAs 
            (
                tagNamePattern 
                (
                    Var
                    s
                )
                x
            )
            
            
            try
            Subst.find
            (
                s
                subst
            )
            (
            
            case
            (
              Not_found
              
              x
            ) 
            	        											 
            	        											 
            )
                							   
          ) 
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    free_var
    (
     
     case
     (
       tagNamePattern 
       (
           Var
           s
       )
       
       Names.singleton
       (
           s
       )
     ) 
     	        											 
     	        											 
    )
       							    
   							    		    
  )
                                     
  type
  (  						
      							    	 
     lambda
     type
     params=
     (
     
      
      a
     										 
     )
     cstrs =
     (
     )
     kind =
     <[],[<"Var",["typexprConstr2"("typeConstr"([],"string")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"Abs",["star"("typexprConstr2"("typeConstr"([],"string")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"App",["star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("a")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>]>
     
     														  
     														 
    											   
  								        
  )
                                     
  let
  (
   
    free_lambda
   (
    case
        (
    	  free_rec
         (
          
          case
          (
            patternAs 
            (
                var
                x
            )
            
            free_var
            (
                x
            )
          ) 
          	        											 
            
            case
            (
             tagNamePattern 
             (
                 Abs
                 
                 (
                  s
                      						 
                 	t
                 
                 )
             )
             
             Names.remove
             (
                 s
                 free_rec
                 (
                     t
                 )
             )
            )
            													    
          	        											 
            
            case
            (
             tagNamePattern 
             (
                 App
                 
                 (
                  t1
                      						 
                 	t2
                 
                 )
             )
             
             Names.union
             (
                 free_rec
                 (
                     t1
                 )
                 free_rec
                 (
                     t2
                 )
             )
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    map_lambda
   (
    case
        (
    	  map_rec
         (
          
          case
          (
            patternAs 
            (
                var
                x
            )
            
            x
          ) 
          	        											 
            
            case
            (
             patternAs 
             (
                 tagNamePattern 
                 (
                     Abs
                     
                     (
                      s
                          						 
                     	t
                     
                     )
                 )
                 l
             )
             
             
             let
             (
              (
                 									  
               
                t'
                map_rec
                (
                    t
                ) 
               							    		   
                 									  
              )
             in
               ifthenelse
               (
                if
                (
                 ==
                 (
                     t
                     t'
                 )
                )
                then
                (
                 l
                )
                else
                (
                 Abs
                 (
                     
                     (
                         					 s
                         					 
                     	t'
                         					 
                     )
                         					 
                 )
                ) 
               )
               	    											 
             )
                 									
            )
            													    
          	        											 
            
            case
            (
             patternAs 
             (
                 tagNamePattern 
                 (
                     App
                     
                     (
                      t1
                          						 
                     	t2
                     
                     )
                 )
                 l
             )
             
             
             let
             (
              (
                 									  
               
                t'1
                map_rec
                (
                    t1
                ) 
               							    		   
                 									  
               
                t'2
                map_rec
                (
                    t2
                ) 
               							    		   
                 									  
              )
             in
               ifthenelse
               (
                if
                (
                 &&
                 (
                     ==
                     (
                         t'1
                         t1
                     )
                     ==
                     (
                         t'2
                         t2
                     )
                 )
                )
                then
                (
                 l
                )
                else
                (
                 App
                 (
                     
                     (
                         					 t'1
                         					 
                     	t'2
                         					 
                     )
                         					 
                 )
                ) 
               )
               	    											 
             )
                 									
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    next_id
    
    let
    (
     (
        									  
      
       current
       ref
       (
           3
       ) 
      							    		   
        									  
     )
    in
      (
       
       case
       (
       ()
       
       
       sequence
       (
         incr
         (
             current
         )
       ;
         
          !
          (
          current
          )
             							 
       )
           							
       )
       													 
      )
         						  
    )
        									 
   							    		    
  )
                                     
  let
  (
   
    subst_lambda
   (
    case
        (
     		
     		 subst_rec
     		(
     		 case
     		     (
     		  		
     		  		 free
     		  		(
     		  		 case
     		  		     (
     		  		 	  subst
     		  		      (
     		  		       
     		  		       case
     		  		       (
     		  		         patternAs 
     		  		         (
     		  		             var
     		  		             x
     		  		         )
     		  		         
     		  		         subst_var
     		  		         (
     		  		             subst
     		  		             x
     		  		         )
     		  		       ) 
     		  		       	        											 
     		  		         
     		  		         case
     		  		         (
     		  		          patternAs 
     		  		          (
     		  		              tagNamePattern 
     		  		              (
     		  		                  Abs
     		  		                  
     		  		                  (
     		  		                   s
     		  		                       						 
     		  		                  	t
     		  		                  
     		  		                  )
     		  		              )
     		  		              l
     		  		          )
     		  		          
     		  		          
     		  		          let
     		  		          (
     		  		           (
     		  		              									  
     		  		            
     		  		             used
     		  		             free
     		  		             (
     		  		                 t
     		  		             ) 
     		  		            							    		   
     		  		              									  
     		  		           )
     		  		          in
     		  		            
     		  		            let
     		  		            (
     		  		             (
     		  		                									  
     		  		              
     		  		               used_expr
     		  		               Subst.fold
     		  		               (
     		  		                   subst
     		  		                   <"~init:","constant"("emptyBrackets"()[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
     		  		                   <"~f:","brackets"("fun"("multipleMatching"(["key","data","patternValueName"("acc")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],[],"ifThenElse"("functionApplication"("valuePath"("valuePath"(["modulePath"([],"Names")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"mem")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],["valuePath"("valuePath"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],"valuePath"("valuePath"([],"used")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"coloncolon"("valuePath"("valuePath"([],"data")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"valuePath"("valuePath"([],"acc")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],"valuePath"("valuePath"([],"acc")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     		  		               ) 
     		  		              							    		   
     		  		                									  
     		  		             )
     		  		            in
     		  		              ifthenelse
     		  		              (
     		  		               if
     		  		               (
     		  		                List.exists
     		  		                (
     		  		                    used_expr
     		  		                    <"~f:","brackets"("fun"("multipleMatching"(["patternValueName"("t")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],[],"functionApplication"("valuePath"("valuePath"(["modulePath"([],"Names")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"mem")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["valuePath"("valuePath"([],"s")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],"brackets"("functionApplication"("valuePath"("valuePath"([],"free")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["valuePath"("valuePath"([],"t")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     		  		                )
     		  		               )
     		  		               then
     		  		               (
     		  		                
     		  		                let
     		  		                (
     		  		                 (
     		  		                    									  
     		  		                  
     		  		                   name
     		  		                   ^
     		  		                   (
     		  		                       s
     		  		                       string_of_int
     		  		                       (
     		  		                           next_id
     		  		                           (
     		  		                               ()
     		  		                           )
     		  		                       )
     		  		                   ) 
     		  		                  							    		   
     		  		                    									  
     		  		                 )
     		  		                in
     		  		                  Abs
     		  		                  (
     		  		                      
     		  		                      (
     		  		                          					 name
     		  		                          					 
     		  		                      	subst_rec
     		  		                      	(
     		  		                      	    <"~subst:","brackets"("functionApplication"("valuePath"("valuePath"(["modulePath"([],"Subst")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]],"add")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],[<"~key:","valuePath"("valuePath"([],"s")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,<"~data:","brackets"("functionApplication"("constant"("Var")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["valuePath"("valuePath"([],"name")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>,"valuePath"("valuePath"([],"subst")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
     		  		                      	    t
     		  		                      	)
     		  		                          					 
     		  		                      )
     		  		                          					 
     		  		                  )
     		  		                )
     		  		                    									
     		  		               )
     		  		               else
     		  		               (
     		  		                map_lambda
     		  		                (
     		  		                    <"~map_rec:","brackets"("functionApplication"("valuePath"("valuePath"([],"subst_rec")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],[<"~subst:","brackets"("functionApplication"("valuePath"("valuePath"(["modulePath"([],"Subst")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"remove")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["valuePath"("valuePath"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],"valuePath"("valuePath"([],"subst")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     		  		                    l
     		  		                )
     		  		               ) 
     		  		              )
     		  		              	    											 
     		  		            )
     		  		                									
     		  		          )
     		  		              									
     		  		         )
     		  		         													    
     		  		       	        											 
     		  		         
     		  		         case
     		  		         (
     		  		          patternAs 
     		  		          (
     		  		              tagNamePattern 
     		  		              (
     		  		                  App
     		  		                  _
     		  		              )
     		  		              l
     		  		          )
     		  		          
     		  		          map_lambda
     		  		          (
     		  		              <"~map_rec:","brackets"("functionApplication"("valuePath"("valuePath"([],"subst_rec")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["subst"])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
     		  		              l
     		  		          )
     		  		         )
     		  		         													    
     		  		       	        											 
     		  		       	        											 
     		  		      )
     		  		         							   
     		  		     )
     		  		)
     		  		    		   
     		     )
     		)
     		    		   
        )
   )
       		    
  )
                                     
  let
  (
   
    eval_lambda
   (
    case
        (
     		
     		 eval_rec
     		(
     		 case
     		     (
     		  		
     		  		 subst
     		  		(
     		  		 case
     		  		     (
     		  		 	  l
     		  		      match
     		  		      map_lambda
     		  		      (
     		  		          <"~map_rec:","valuePath"("valuePath"([],"eval_rec")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     		  		          l
     		  		      )
     		  		      (
     		  		      
     		  		      case
     		  		      (
     		  		        tagNamePattern 
     		  		        (
     		  		            App
     		  		            
     		  		            (
     		  		             tagNamePattern 
     		  		             (
     		  		                 Abs
     		  		                 
     		  		                 (
     		  		                  s
     		  		                      						 
     		  		                 	t1
     		  		                 
     		  		                 )
     		  		             )
     		  		                 						 
     		  		            	t2
     		  		            
     		  		            )
     		  		        )
     		  		        
     		  		        eval_rec
     		  		        (
     		  		            subst
     		  		            (
     		  		                <"~subst:","brackets"("functionApplication"("valuePath"("valuePath"(["modulePath"([],"Subst")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"add")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],[<"~key:","valuePath"("valuePath"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,<"~data:","valuePath"("valuePath"([],"t2")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>,"valuePath"("valuePath"(["modulePath"([],"Subst")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]],"empty")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     		  		                t1
     		  		            )
     		  		        )
     		  		      ) 
     		  		      	        											 
     		  		        
     		  		        case
     		  		        (
     		  		         t
     		  		         
     		  		         t
     		  		        )
     		  		        													    
     		  		      	        											 
     		  		      	        											 
     		  		      )
     		  		      			   
     		  		     )
     		  		)
     		  		    		   
     		     )
     		)
     		    		   
        )
   )
       		    
  )
                                     
  let
  (
   
    free1
   (
    case
        (
    	  x
         free_lambda
         (
             <"~free_rec:","valuePath"("valuePath"([],"free1")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
             x
         )
        )
   )
       		    
  )
                                     
  let
  (
   
    subst1
   (
    case
        (
    	  subst
         subst_lambda
         (
             <"~subst_rec:","valuePath"("valuePath"([],"subst1")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
             <"~free:","valuePath"("valuePath"([],"free1")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
             subst
         )
        )
   )
       		    
  )
                                     
  let
  (
   
    eval1
   (
    case
        (
    	  x
         eval_lambda
         (
             <"~eval_rec:","valuePath"("valuePath"([],"eval1")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
             <"~subst:","valuePath"("valuePath"([],"subst1")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
             x
         )
        )
   )
       		    
  )
                                     
  type
  (  						
      							    	 
     expr
     type
     params=
     (
     
      
      a
     										 
     )
     cstrs =
     (
     )
     kind =
     <[],[<"Var",["typexprConstr2"("typeConstr"([],"string")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"Num",["typexprConstr2"("typeConstr"([],"int")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"Add",["star"("tagg"("a")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]]>,<"Neg",["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"Mult",["star"("tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["tagg"("a")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]]>]>
     
     														  
     														 
    											   
  								        
  )
                                     
  let
  (
   
    free_expr
   (
    case
        (
    	  free_rec
         (
          
          case
          (
            patternAs 
            (
                var
                x
            )
            
            free_var
            (
                x
            )
          ) 
          	        											 
            
            case
            (
             tagNamePattern 
             (
                 Num
                 _
             )
             
             Names.empty
            )
            													    
          	        											 
            
            case
            (
             tagNamePattern 
             (
                 Add
                 
                 (
                  x
                      						 
                 	y
                 
                 )
             )
             
             Names.union
             (
                 free_rec
                 (
                     x
                 )
                 free_rec
                 (
                     y
                 )
             )
            )
            													    
          	        											 
            
            case
            (
             tagNamePattern 
             (
                 Neg
                 x
             )
             
             free_rec
             (
                 x
             )
            )
            													    
          	        											 
            
            case
            (
             tagNamePattern 
             (
                 Mult
                 
                 (
                  x
                      						 
                 	y
                 
                 )
             )
             
             Names.union
             (
                 free_rec
                 (
                     x
                 )
                 free_rec
                 (
                     y
                 )
             )
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    map_expr
   (
    case
        (
    	  map_rec
         (
          
          case
          (
            patternAs 
            (
                var
                x
            )
            
            x
          ) 
          	        											 
            
            case
            (
             patternAs 
             (
                 tagNamePattern 
                 (
                     Num
                     _
                 )
                 x
             )
             
             x
            )
            													    
          	        											 
            
            case
            (
             patternAs 
             (
                 tagNamePattern 
                 (
                     Add
                     
                     (
                      x
                          						 
                     	y
                     
                     )
                 )
                 e
             )
             
             
             let
             (
              (
                 									  
               
                x'
                map_rec
                (
                    x
                ) 
               							    		   
                 									  
               
                y'
                map_rec
                (
                    y
                ) 
               							    		   
                 									  
              )
             in
               ifthenelse
               (
                if
                (
                 &&
                 (
                     ==
                     (
                         x
                         x'
                     )
                     ==
                     (
                         y
                         y'
                     )
                 )
                )
                then
                (
                 e
                )
                else
                (
                 Add
                 (
                     
                     (
                         					 x'
                         					 
                     	y'
                         					 
                     )
                         					 
                 )
                ) 
               )
               	    											 
             )
                 									
            )
            													    
          	        											 
            
            case
            (
             patternAs 
             (
                 tagNamePattern 
                 (
                     Neg
                     x
                 )
                 e
             )
             
             
             let
             (
              (
                 									  
               
                x'
                map_rec
                (
                    x
                ) 
               							    		   
                 									  
              )
             in
               ifthenelse
               (
                if
                (
                 ==
                 (
                     x
                     x'
                 )
                )
                then
                (
                 e
                )
                else
                (
                 Neg
                 (
                     x'
                 )
                ) 
               )
               	    											 
             )
                 									
            )
            													    
          	        											 
            
            case
            (
             patternAs 
             (
                 tagNamePattern 
                 (
                     Mult
                     
                     (
                      x
                          						 
                     	y
                     
                     )
                 )
                 e
             )
             
             
             let
             (
              (
                 									  
               
                x'
                map_rec
                (
                    x
                ) 
               							    		   
                 									  
               
                y'
                map_rec
                (
                    y
                ) 
               							    		   
                 									  
              )
             in
               ifthenelse
               (
                if
                (
                 &&
                 (
                     ==
                     (
                         x
                         x'
                     )
                     ==
                     (
                         y
                         y'
                     )
                 )
                )
                then
                (
                 e
                )
                else
                (
                 Mult
                 (
                     
                     (
                         					 x'
                         					 
                     	y'
                         					 
                     )
                         					 
                 )
                ) 
               )
               	    											 
             )
                 									
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    subst_expr
   (
    case
        (
     		
     		 subst_rec
     		(
     		 case
     		     (
     		 	  subst
     		      (
     		       
     		       case
     		       (
     		         patternAs 
     		         (
     		             var
     		             x
     		         )
     		         
     		         subst_var
     		         (
     		             subst
     		             x
     		         )
     		       ) 
     		       	        											 
     		         
     		         case
     		         (
     		          patternAs 
     		          (
     		              expr
     		              e
     		          )
     		          
     		          map_expr
     		          (
     		              <"~map_rec:","brackets"("functionApplication"("valuePath"("valuePath"([],"subst_rec")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],["subst"])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
     		              e
     		          )
     		         )
     		         													    
     		       	        											 
     		       	        											 
     		      )
     		         							   
     		     )
     		)
     		    		   
        )
   )
       		    
  )
                                     
  let
  (
   
    eval_expr
   (
    case
        (
     		
     		 eval_rec
     		(
     		 case
     		     (
     		 	  e
     		      match
     		      map_expr
     		      (
     		          <"~map_rec:","valuePath"("valuePath"([],"eval_rec")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
     		          e
     		      )
     		      (
     		      
     		      case
     		      (
     		        tagNamePattern 
     		        (
     		            Add
     		            
     		            (
     		             tagNamePattern 
     		             (
     		                 Num
     		                 m
     		             )
     		                 						 
     		            	tagNamePattern 
     		            	(
     		            	    Num
     		            	    n
     		            	)
     		            
     		            )
     		        )
     		        
     		        Num
     		        (
     		            +
     		            (
     		                m
     		                n
     		            )
     		        )
     		      ) 
     		      	        											 
     		        
     		        case
     		        (
     		         tagNamePattern 
     		         (
     		             Neg
     		             tagNamePattern 
     		             (
     		                 Num
     		                 n
     		             )
     		         )
     		         
     		         Num
     		         (
     		             -n
     		         )
     		        )
     		        													    
     		      	        											 
     		        
     		        case
     		        (
     		         tagNamePattern 
     		         (
     		             Mult
     		             
     		             (
     		              tagNamePattern 
     		              (
     		                  Num
     		                  m
     		              )
     		                  						 
     		             	tagNamePattern 
     		             	(
     		             	    Num
     		             	    n
     		             	)
     		             
     		             )
     		         )
     		         
     		         Num
     		         (
     		             *
     		             (
     		                 m
     		                 n
     		             )
     		         )
     		        )
     		        													    
     		      	        											 
     		        
     		        case
     		        (
     		         patternAs 
     		         (
     		             expr
     		             e
     		         )
     		         
     		         e
     		        )
     		        													    
     		      	        											 
     		      	        											 
     		      )
     		      			   
     		     )
     		)
     		    		   
        )
   )
       		    
  )
                                     
  let
  (
   
    free2
   (
    case
        (
    	  x
         free_expr
         (
             <"~free_rec:","valuePath"("valuePath"([],"free2")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
             x
         )
        )
   )
       		    
  )
                                     
  let
  (
   
    subst2
   (
    case
        (
    	  subst
         subst_expr
         (
             <"~subst_rec:","valuePath"("valuePath"([],"subst2")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
             subst
         )
        )
   )
       		    
  )
                                     
  let
  (
   
    eval2
   (
    case
        (
    	  x
         eval_expr
         (
             <"~eval_rec:","valuePath"("valuePath"([],"eval2")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
             x
         )
        )
   )
       		    
  )
                                     
  type
  (  						
      							    	 
     lexpr
     type
     params=
     (
     
     )
     cstrs =
     (
     )
     kind =
     <[],[<"Var",["typexprConstr2"("typeConstr"([],"string")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]]>,<"Abs",["star"("typexprConstr2"("typeConstr"([],"string")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr2"("typeConstr"([],"lexpr")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"App",["star"("typexprConstr2"("typeConstr"([],"lexpr")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr2"("typeConstr"([],"lexpr")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"Num",["typexprConstr2"("typeConstr"([],"int")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"Add",["star"("typexprConstr2"("typeConstr"([],"lexpr")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()],["typexprConstr2"("typeConstr"([],"lexpr")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]]>,<"Neg",["typexprConstr2"("typeConstr"([],"lexpr")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]]>,<"Mult",["star"("typexprConstr2"("typeConstr"([],"lexpr")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)],["typexprConstr2"("typeConstr"([],"lexpr")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]]>]>
     
     														  
     														 
    											   
  								        
  )
                                     
  let
  (
   
    free
    (
     
     case
     (
       patternAs 
       (
           lambda
           x
       )
       
       free_lambda
       (
           <"~free_rec:","valuePath"("valuePath"([],"free")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
           x
       )
     ) 
     	        											 
       
       case
       (
        patternAs 
        (
            expr
            x
        )
        
        free_expr
        (
            <"~free_rec:","valuePath"("valuePath"([],"free")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
            x
        )
       )
       													    
     	        											 
     	        											 
    )
       							    
   							    		    
  )
                                     
  let
  (
   
    subst
   (
    case
        (
    	  <"subst","patternValueName"("s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
         (
          
          case
          (
            patternAs 
            (
                lambda
                x
            )
            
            subst_lambda
            (
                <"~subst_rec:","valuePath"("valuePath"([],"subst")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                <"~subst:","valuePath"("valuePath"([],"s")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()]>
                free
                x
            )
          ) 
          	        											 
            
            case
            (
             patternAs 
             (
                 expr
                 x
             )
             
             subst_expr
             (
                 <"~subst_rec:","valuePath"("valuePath"([],"subst")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                 <"~subst:","valuePath"("valuePath"([],"s")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
                 x
             )
            )
            													    
          	        											 
          	        											 
         )
            							   
        )
   )
       		    
  )
                                     
  let
  (
   
    eval
    (
     
     case
     (
       patternAs 
       (
           lambda
           x
       )
       
       eval_lambda
       (
           <"~eval_rec:","valuePath"("valuePath"([],"eval")[@location=|dunno:///|(0,1,<1,1>,<1,1>),@comments=()])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
           subst
           x
       )
     ) 
     	        											 
       
       case
       (
        patternAs 
        (
            expr
            x
        )
        
        eval_expr
        (
            <"~eval_rec:","valuePath"("valuePath"([],"eval")[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)])[@comments=(),@location=|dunno:///|(0,1,<1,1>,<1,1>)]>
            x
        )
       )
       													    
     	        											 
     	        											 
    )
       							    
   							    		    
  )
                                     
  let
  (
   
    print
    (
     
     case
     (
       tagNamePattern 
       (
           Var
           id
       )
       
       print_string
       (
           id
       )
     ) 
     	        											 
       
       case
       (
        tagNamePattern 
        (
            Abs
            
            (
             id
                 						 
            	l
            
            )
        )
        
        
        sequence
        (
          print_string
          (
              ^
              (
                  "\ "
                  ^
                  (
                      id
                      " . "
                  )
              )
          )
        ;
          print
          (
              l
          )
        )
            							
       )
       													    
     	        											 
       
       case
       (
        tagNamePattern 
        (
            App
            
            (
             l1
                 						 
            	l2
            
            )
        )
        
        
        sequence
        (
          print
          (
              l1
          )
        ;
          
          sequence
          (
            print_string
            (
                " "
            )
          ;
            print
            (
                l2
            )
          )
              							
        )
            							
       )
       													    
     	        											 
       
       case
       (
        tagNamePattern 
        (
            Num
            x
        )
        
        print_int
        (
            x
        )
       )
       													    
     	        											 
       
       case
       (
        tagNamePattern 
        (
            Add
            
            (
             e1
                 						 
            	e2
            
            )
        )
        
        
        sequence
        (
          print
          (
              e1
          )
        ;
          
          sequence
          (
            print_string
            (
                " + "
            )
          ;
            print
            (
                e2
            )
          )
              							
        )
            							
       )
       													    
     	        											 
       
       case
       (
        tagNamePattern 
        (
            Neg
            e
        )
        
        
        sequence
        (
          print_string
          (
              "-"
          )
        ;
          print
          (
              e
          )
        )
            							
       )
       													    
     	        											 
       
       case
       (
        tagNamePattern 
        (
            Mult
            
            (
             e1
                 						 
            	e2
            
            )
        )
        
        
        sequence
        (
          print
          (
              e1
          )
        ;
          
          sequence
          (
            print_string
            (
                " * "
            )
          ;
            print
            (
                e2
            )
          )
              							
        )
            							
       )
       													    
     	        											 
     	        											 
    )
       							    
   							    		    
  )
                                     
  let
  (
   
    ()
    
    let
    (
     (
        									  
      
       e1
       eval1
       (
           App
           (
               
               (
                   					 Abs
                     					 (
                     					     
                     					     (
                     					         					 "x"
                     					         					 
                     					     	Var
                     					     	(
                     					     	    "x"
                     					     	)
                     					         					 
                     					     )
                     					         					 
                     					 )
                   					 
               	Var
               	(
               	    "y"
               	)
                   					 
               )
                   					 
           )
       ) 
      							    		   
        									  
     )
    in
      
      let
      (
       (
          									  
        
         e2
         eval2
         (
             Add
             (
                 
                 (
                     					 Mult
                       					 (
                       					     
                       					     (
                       					         					 Num
                       					           					 (
                       					           					     3
                       					           					 )
                       					         					 
                       					     	Neg
                       					     	(
                       					     	    Num
                       					     	    (
                       					     	        2
                       					     	    )
                       					     	)
                       					         					 
                       					     )
                       					         					 
                       					 )
                     					 
                 	Var
                 	(
                 	    "x"
                 	)
                     					 
                 )
                     					 
             )
         ) 
        							    		   
          									  
       )
      in
        
        let
        (
         (
            									  
          
           e3
           eval
           (
               Add
               (
                   
                   (
                       					 App
                         					 (
                         					     
                         					     (
                         					         					 Abs
                         					           					 (
                         					           					     
                         					           					     (
                         					           					         					 "x"
                         					           					         					 
                         					           					     	Mult
                         					           					     	(
                         					           					     	    
                         					           					     	    (
                         					           					     	        					 Var
                         					           					     	          					 (
                         					           					     	          					     "x"
                         					           					     	          					 )
                         					           					     	        					 
                         					           					     	    	Var
                         					           					     	    	(
                         					           					     	    	    "x"
                         					           					     	    	)
                         					           					     	        					 
                         					           					     	    )
                         					           					     	        					 
                         					           					     	)
                         					           					         					 
                         					           					     )
                         					           					         					 
                         					           					 )
                         					         					 
                         					     	Num
                         					     	(
                         					     	    2
                         					     	)
                         					         					 
                         					     )
                         					         					 
                         					 )
                       					 
                   	Num
                   	(
                   	    5
                   	)
                       					 
                   )
                       					 
               )
           ) 
          							    		   
            									  
         )
        in
          
          sequence
          (
            print
            (
                e1
            )
          ;
            
            sequence
            (
              print_newline
              (
                  ()
              )
            ;
              
              sequence
              (
                print
                (
                    e2
                )
              ;
                
                sequence
                (
                  print_newline
                  (
                      ()
                  )
                ;
                  
                  sequence
                  (
                    print
                    (
                        e3
                    )
                  ;
                    print_newline
                    (
                        ()
                    )
                  )
                      							
                )
                    							
              )
                  							
            )
                							
          )
              							
        )
            									
      )
          									
    )
        									 
   							    		    
  )
                                     
)