
(
    								 
  module  IntSet
   
       								  
       							      Set.Make
   (
   struct
   (
   							  
   type
   (  						
       							    	 
      t
        type
        params=
        (
        
        )
        cstrs =
        (
     											   
     											   	  
     											   
        )
        kind =
        
         
        
        int
        (
        )
        								  
        														 
     											   
   								        
   )
   							  
   let
   (
    
      compare
                	   
    (
     case
         (
      		
      		 x
      		(
      		 case
      		     (
      		 	  y
      		      -
      		      (
      		          x
      		          y
      		      )
      		     )
      		)
      		    		   
         )
    )
                	    
   )
   							  
   )
   							  
   )
   								   
   
  										    
                                     
  let
  (
   
    even
    List.fold_right
    (
        IntSet.add
        ::
         (
         0
         ::
         (
         -2
         ::
         (
         2
         ::
         (
         4
         ::
         (
         6
         ::
         (
         -10
         []
         ) 
            						  
         ) 
            						  
         ) 
            						  
         ) 
            						  
         ) 
            						  
         ) 
            						  
        IntSet.empty
    ) 
   							    		    
  )
                                     
  let
  (
   
    odd
    List.fold_right
    (
        IntSet.add
        ::
         (
         9
         ::
         (
         -7
         ::
         (
         5
         ::
         (
         1
         ::
         (
         -3
         []
         ) 
            						  
         ) 
            						  
         ) 
            						  
         ) 
            						  
         ) 
            						  
        IntSet.empty
    ) 
   							    		    
  )
                                     
  
   
    for i
    -10
    10
    Printf.printf
    (
        "%d  %B  %B\n"
        i
        IntSet.mem
        (
            i
            even
        )
        IntSet.mem
        (
            i
            odd
        )
    )
       														   
  							    		    
                                     
  module  PowerSet
  functor BaseSet
  (
   Set.S
   functor SetOrd
   (
     functor S
     (
       Set.S
       Set.OrderedType
     )
     												
     
         								  
         							      Set.Make
     (
     SetOrd
     (
     BaseSet
     )
     								   
     )
     								   
     
   )
       													
  )
      										    
                                     
  module  IntSetSet
   PowerSet
   (
   IntSet
   )
   								   
   (
   functor S
   (
     Set.S
     S
   )
   												
   )
   								   
   
  										    
                                     
  let
  (
   
    setofset
    List.fold_right
    (
        IntSetSet.add
        ::
         (
         even
         ::
         (
         odd
         []
         ) 
            						  
         ) 
            						  
        IntSetSet.empty
    ) 
   							    		    
  )
                                     
  
   
   List.iter
   (
       
       (
         case
         (
          s
          
          Printf.printf
          (
              "%B\n"
              IntSetSet.mem
              (
                  s
                  setofset
              )
          )
         )
       )
       													 
       ::
        (
        IntSet.empty
        ::
        (
        even
        ::
        (
        odd
        ::
        (
        IntSet.union
        (
            even
            odd
        )
        []
        ) 
           						  
        ) 
           						  
        ) 
           						  
        ) 
           						  
   ) 
  							    		    
                                     
  
   
   exit
   (
       0
   ) 
  							    		    
                                     
)