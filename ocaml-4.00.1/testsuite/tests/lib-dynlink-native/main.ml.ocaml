(
  let
  (
    ()
          Api.add_cb
      (
          (
            case
            (
              ()
                            print_endline
              (
                  "Callback from main"
              )
            )
          )
      )
  )
  let
  (
    ()
          sequence
      (
        Dynlink.init
        (
            ()
                    )
      ;
        sequence
        (
          Dynlink.allow_unsafe_modules
          (
              true
                        )
        ;
          sequence
          (
            for i
            1
            -
            (
                Array.length
                (
                    Sys.argv
                )
                1
            )
            let
            (
              (
                name
                  Array.get
                  (
                      Sys.argv
                      i
                  )
              )
            in
              sequence
              (
                Printf.printf
                (
                    "Loading %s\n"
                    name
                )
              ;
                sequence
                (
                  flush
                  (
                      stdout
                  )
                ;
                  try
                  ifthenelse
                  (
                    if
                    (
                      =
                      (
                          String.get
                          (
                              name
                              0
                          )
                          2d
                      )
                    )
                    then
                    (
                      Dynlink.loadfile_private
                      (
                          String.sub
                          (
                              name
                              1
                              -
                              (
                                  String.length
                                  (
                                      name
                                  )
                                  1
                              )
                          )
                      )
                    )
                    else
                    (
                        Dynlink.loadfile
                        (
                            name
                        )
                    )
                  )
                  (
                    case
                    (
                      Dynlink.Error
                        err
                      Printf.printf
                      (
                          "Dynlink error: %s\n"
                          Dynlink.error_message
                          (
                              err
                          )
                      )
                    )
                    case
                    (
                      exn
                      Printf.printf
                      (
                          "Error: %s\n"
                          Printexc.to_string
                          (
                              exn
                          )
                      )
                    )
                  )
                )
              )
            )
          ;
            sequence
            (
              flush
              (
                  stdout
              )
            ;
              try
              let
              (
                (
                  oc
                    open_out_bin
                    (
                        "marshal.data"
                    )
                )
              in
                sequence
                (
                  Marshal.to_channel
                  (
                      oc
                      !
                      (
                          Api.cbs
                      )
                      ::
                        (
                          Marshal.Closures
                                                    []
                                                  )
                  )
                ;
                  sequence
                  (
                    close_out
                    (
                        oc
                    )
                  ;
                    let
                    (
                      (
                        ic
                          open_in_bin
                          (
                              "marshal.data"
                          )
                      )
                    in
                      let
                      (
                        (
                          l
                            (
                            Marshal.from_channel
                            (
                                ic
                            )
                            :
                                 list
                                (
                                    arrow
                                    
                                       unit
                                      (
                                      )
                                       unit
                                      (
                                      )
                                )
                                                        )
                        )
                      in
                        sequence
                        (
                          close_in
                          (
                              ic
                          )
                        ;
                          List.iter
                          (
                              (
                                case
                                (
                                  f
                                  f
                                  (
                                      ()
                                                                        )
                                )
                              )
                              l
                          )
                        )
                      )
                    )
                  )
                )
              )
              (
                case
                (
                  Failure
                    s
                  Printf.printf
                  (
                      "Failure: %s\n"
                      s
                  )
                )
              )
            )
          )
        )
      )
  )
)

