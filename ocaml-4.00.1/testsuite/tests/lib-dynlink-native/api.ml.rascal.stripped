(
  let
  (
    mods
    ref
    (
        []
    ) 
  )
  let
  (
    reg_mod
   (
    case
        (
    	  name
         ifthenelse
         (
          if
          (
           List.mem
           (
               name
                !
                (
                mods
                )
           )
          )
          then
          (
           Printf.printf
           (
               "Reloading module %s\n"
               name
           )
          )
          else
          (
           sequence
           (
             :=
             (
                 mods
                 ::
                 (
                     name
                      !
                      (
                      mods
                      )
                 )
             )
           ;
             Printf.printf
             (
                 "Registering module %s\n"
                 name
             )
           )
          ) 
         )
        )
   )
  )
  let
  (
    cbs
    ref
    (
        []
    ) 
  )
  let
  (
    add_cb
   (
    case
        (
    	  f
         :=
         (
             cbs
             ::
             (
                 f
                  !
                  (
                  cbs
                  )
             )
         )
        )
   )
  )
  let
  (
    runall
   (
    case
        (
    	  ()
         List.iter
         (
             (
              case
              (
              f
              f
              (
                  ()
              )
              )
             )
              !
              (
              cbs
              )
         )
        )
   )
  )
)
