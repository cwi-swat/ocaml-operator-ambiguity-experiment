(
  let
  (
    property
      Pexp_newtype "t"
      (
        case
        (
          ()
                    let module M
          (
            struct
            (
              exception E
              (
                   t
                  (
                  )
              )
            )
          )
          in
          (
          (
            (
              case
              (
                x
                M.E
                  x
              )
            )
            (
              case
              (
                M.E
                  x
                Some
                  x
              )
              case
              (
                _
                None
                              )
            )
          )
          )
        )
      )
  )
  let
  (
    ()
          let
      (
        (
          (
            int_inj
            int_proj
          )
            property
            (
                ()
                            )
        )
      in
        let
        (
          (
            (
              string_inj
              string_proj
            )
              property
              (
                  ()
                                )
          )
        in
          let
          (
            (
              i
                int_inj
                (
                    3
                )
            )
          in
            let
            (
              (
                s
                  string_inj
                  (
                      "abc"
                  )
              )
            in
              sequence
              (
                Printf.printf
                (
                    "%b\n%!"
                    =
                    (
                        int_proj
                        (
                            i
                        )
                        None
                                            )
                )
              ;
                sequence
                (
                  Printf.printf
                  (
                      "%b\n%!"
                      =
                      (
                          int_proj
                          (
                              s
                          )
                          None
                                                )
                  )
                ;
                  sequence
                  (
                    Printf.printf
                    (
                        "%b\n%!"
                        =
                        (
                            string_proj
                            (
                                i
                            )
                            None
                                                    )
                    )
                  ;
                    Printf.printf
                    (
                        "%b\n%!"
                        =
                        (
                            string_proj
                            (
                                s
                            )
                            None
                                                    )
                    )
                  )
                )
              )
            )
          )
        )
      )
  )
  let
  (
    sort_uniq
      Pexp_newtype "s"
      (
        case
        (
          cmp
          (
            case
            (
              l
              let module S
              (
                  Set.Make
                (
                  struct
                  (
                    type
                    (
                      t
                        type
                          params =
                            (
                            )
                          cstrs =
                            (
                            )
                          kind =
                            
                                 s
                                (
                                )
                    )
                    let
                    (
                      compare
                        cmp
                    )
                  )
                )
              )
              in
              (
              S.elements
              (
                  List.fold_right
                  (
                      S.add
                      l
                      S.empty
                  )
              )
              )
            )
          )
        )
      )
  )
  let
  (
    ()
          print_endline
      (
          String.concat
          (
              ","
              sort_uniq
              (
                  compare
                  ::
                    (
                      "abc"
                      ::
                        (
                          "xyz"
                          ::
                            (
                              "abc"
                              []
                                                          )
                        )
                    )
              )
          )
      )
  )
  let
  (
    f
      (
        case
        (
          x
          Pexp_newtype "a"
          (
            case
            (
              y
                 a
                (
                )
              =
              (
                  x
                  y
              )
            )
          )
        )
      )
  )
  class
  (
      params =
          (
            "a"
          )
      class name = c
      class expr =
          class_structure
            (
              method m
                (
                  case
                  (
                    x
                    x
                  )
                )
                    poly
                    
                      arrow
                      
                        a
                        a
              method n
                Pexp_newtype "g"
                (
                  case
                  (
                    x
                       g
                      (
                      )
                    send m
                    (
                      self
                    )
                    (
                        x
                    )
                  )
                )
                    poly
                    
                      arrow
                      
                        a
                        a
            )
  )
)

